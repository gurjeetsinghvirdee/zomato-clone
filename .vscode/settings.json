[{
    // Controls auto save of editors that have unsaved changes. Read more about autosave [here](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save).
    //  - off: An editor with changes is never automatically saved.
    //  - afterDelay: An editor with changes is automatically saved after the configured `files.autoSaveDelay`.
    //  - onFocusChange: An editor with changes is automatically saved when the editor loses focus.
    //  - onWindowChange: An editor with changes is automatically saved when the window loses focus.
    "files.autoSave": "off",
  
    // Controls the font size in pixels.
    "editor.fontSize": 14,
  
    // Controls the font family.
    "editor.fontFamily": "Consolas, 'Courier New', monospace",
  
    // The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
    "editor.tabSize": 4,
  
    // Controls how the editor should render whitespace characters.
    //  - none
    //  - boundary: Render whitespace characters except for single spaces between words.
    //  - selection: Render whitespace characters only on selected text.
    //  - trailing: Render only trailing whitespace characters.
    //  - all
    "editor.renderWhitespace": "selection",
  
    // Controls the cursor style.
    "editor.cursorStyle": "line",
  
    // The modifier to be used to add multiple cursors with the mouse. The Go to Definition and Open Link mouse gestures will adapt such that they do not conflict with the multicursor modifier. [Read more](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).
    //  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
    //  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
    "editor.multiCursorModifier": "alt",
  
    // Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
    "editor.insertSpaces": true,
  
    // Controls how lines should wrap.
    //  - off: Lines will never wrap.
    //  - on: Lines will wrap at the viewport width.
    //  - wordWrapColumn: Lines will wrap at `editor.wordWrapColumn`.
    //  - bounded: Lines will wrap at the minimum of viewport and `editor.wordWrapColumn`.
    "editor.wordWrap": "off",
  
    // Configure glob patterns for excluding files and folders. For example, the file Explorer decides which files and folders to show or hide based on this setting. Refer to the `search.exclude` setting to define search specific excludes. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
    "files.exclude": {
      "**/.git": true,
      "**/.svn": true,
      "**/.hg": true,
      "**/CVS": true,
      "**/.DS_Store": true,
      "**/Thumbs.db": true
    },
  
    // Configure file associations to languages (e.g. `"*.extension": "html"`). These have precedence over the default associations of the languages installed.
    "files.associations": {},
  
    // Controls whether opened editors show as preview. Preview editors do not keep open and are reused until explicitly set to be kept open (e.g. via double click or editing) and show up with an italic font style.
    "workbench.editor.enablePreview": true
  
  },
  {
    // Controls whether the editor shows CodeLens.
    "diffEditor.codeLens": false,
  
    // When enabled, the diff editor ignores changes in leading or trailing whitespace.
    "diffEditor.ignoreTrimWhitespace": true,
  
    // Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.
    "diffEditor.maxComputationTime": 5000,
  
    // Maximum file size in MB for which to compute diffs. Use 0 for no limit.
    "diffEditor.maxFileSize": 50,
  
    // Controls whether the diff editor shows +/- indicators for added/removed changes.
    "diffEditor.renderIndicators": true,
  
    // Controls whether the diff editor shows the diff side by side or inline.
    "diffEditor.renderSideBySide": true,
  
    // 
    //  - off: Lines will never wrap.
    //  - on: Lines will wrap at the viewport width.
    //  - inherit: Lines will wrap according to the `editor.wordWrap` setting.
    "diffEditor.wordWrap": "inherit",
  
    // Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.
    "editor.acceptSuggestionOnCommitCharacter": true,
  
    // Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.
    //  - on
    //  - smart: Only accept a suggestion with `Enter` when it makes a textual change.
    //  - off
    "editor.acceptSuggestionOnEnter": "on",
  
    // Controls the number of lines in the editor that can be read out by a screen reader at once. When we detect a screen reader we automatically set the default to be 500. Warning: this has a performance implication for numbers larger than the default.
    "editor.accessibilityPageSize": 10,
  
    // Controls whether the editor should run in a mode where it is optimized for screen readers. Setting to on will disable word wrapping.
    //  - auto: The editor will use platform APIs to detect when a Screen Reader is attached.
    //  - on: The editor will be permanently optimized for usage with a Screen Reader. Word wrapping will be disabled.
    //  - off: The editor will never be optimized for usage with a Screen Reader.
    "editor.accessibilitySupport": "auto",
  
    // Controls whether the editor should automatically close brackets after the user adds an opening bracket.
    //  - always
    //  - languageDefined: Use language configurations to determine when to autoclose brackets.
    //  - beforeWhitespace: Autoclose brackets only when the cursor is to the left of whitespace.
    //  - never
    "editor.autoClosingBrackets": "languageDefined",
  
    // Controls whether the editor should remove adjacent closing quotes or brackets when deleting.
    //  - always
    //  - auto: Remove adjacent closing quotes or brackets only if they were automatically inserted.
    //  - never
    "editor.autoClosingDelete": "auto",
  
    // Controls whether the editor should type over closing quotes or brackets.
    //  - always
    //  - auto: Type over closing quotes or brackets only if they were automatically inserted.
    //  - never
    "editor.autoClosingOvertype": "auto",
  
    // Controls whether the editor should automatically close quotes after the user adds an opening quote.
    //  - always
    //  - languageDefined: Use language configurations to determine when to autoclose quotes.
    //  - beforeWhitespace: Autoclose quotes only when the cursor is to the left of whitespace.
    //  - never
    "editor.autoClosingQuotes": "languageDefined",
  
    // Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.
    //  - none: The editor will not insert indentation automatically.
    //  - keep: The editor will keep the current line's indentation.
    //  - brackets: The editor will keep the current line's indentation and honor language defined brackets.
    //  - advanced: The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages.
    //  - full: The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages.
    "editor.autoIndent": "full",
  
    // Controls whether the editor should automatically surround selections when typing quotes or brackets.
    //  - languageDefined: Use language configurations to determine when to automatically surround selections.
    //  - quotes: Surround with quotes but not brackets.
    //  - brackets: Surround with brackets but not quotes.
    //  - never
    "editor.autoSurround": "languageDefined",
  
    // Controls whether bracket pair colorization is enabled or not. Use 'workbench.colorCustomizations' to override the bracket highlight colors.
    "editor.bracketPairColorization.enabled": false,
  
    // Code action kinds to be run on save.
    "editor.codeActionsOnSave": {},
  
    // Controls whether the editor shows CodeLens.
    "editor.codeLens": true,
  
    // Controls the font family for CodeLens.
    "editor.codeLensFontFamily": "",
  
    // Controls the font size in pixels for CodeLens. When set to `0`, the 90% of `editor.fontSize` is used.
    "editor.codeLensFontSize": 0,
  
    // Controls whether the editor should render the inline color decorators and color picker.
    "editor.colorDecorators": true,
  
    // Enable that the selection with the mouse and keys is doing column selection.
    "editor.columnSelection": false,
  
    // Controls if empty lines should be ignored with toggle, add or remove actions for line comments.
    "editor.comments.ignoreEmptyLines": true,
  
    // Controls whether a space character is inserted when commenting.
    "editor.comments.insertSpace": true,
  
    // Controls whether syntax highlighting should be copied into the clipboard.
    "editor.copyWithSyntaxHighlighting": true,
  
    // Control the cursor animation style.
    "editor.cursorBlinking": "blink",
  
    // Controls whether the smooth caret animation should be enabled.
    "editor.cursorSmoothCaretAnimation": false,
  
    // Controls the cursor style.
    "editor.cursorStyle": "line",
  
    // Controls the minimal number of visible leading and trailing lines surrounding the cursor. Known as 'scrollOff' or 'scrollOffset' in some other editors.
    "editor.cursorSurroundingLines": 0,
  
    // Controls when `cursorSurroundingLines` should be enforced.
    //  - default: `cursorSurroundingLines` is enforced only when triggered via the keyboard or API.
    //  - all: `cursorSurroundingLines` is enforced always.
    "editor.cursorSurroundingLinesStyle": "default",
  
    // Controls the width of the cursor when `editor.cursorStyle` is set to `line`.
    "editor.cursorWidth": 0,
  
    // Defines a default formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.
    //  - null: None
    //  - formulahendry.auto-close-tag: Automatically add HTML/XML close tag, same as Visual Studio IDE or Sublime Text
    //  - HookyQR.beautify: Beautify code in place for VS Code
    //  - danielpinto8zz6.c-cpp-compile-run: Compile & Run single c/c++ files easly
    //  - formulahendry.code-runner: Run C, C++, Java, JS, PHP, Python, Perl, Ruby, Go, Lua, Groovy, PowerShell, CMD, BASH, F#, C#, VBScript, TypeScript, CoffeeScript, Scala, Swift, Julia, Crystal, OCaml, R, AppleScript, Elixir, VB.NET, Clojure, Haxe, Obj-C, Rust, Racket, Scheme, AutoHotkey, AutoIt, Kotlin, Dart, Pascal, Haskell, Nim, D, Lisp, Kit, V, SCSS, Sass, CUDA, Less, Fortran, Ring
    //  - ms-vscode.cpptools: C/C++ IntelliSense, debugging, and code browsing.
    //  - vscode.css-language-features: Provides rich language support for CSS, LESS and SCSS files.
    //  - Wscats.eno: 🚀Easy to compile ts, tsx, scss, less, stylus, jade, pug and es6+ on save without using a build task.
    //  - kumar-harsh.graphql-for-vscode: GraphQL syntax highlighting, linting, auto-complete, and more!
    //  - vscode.html-language-features: Provides rich language support for HTML and Handlebar files
    //  - vscode.json-language-features: Provides rich language support for JSON files.
    //  - ms-toolsai.jupyter: Jupyter notebook support, interactive programming and computing that supports Intellisense, debugging and more.
    //  - vscode.markdown-language-features: Provides rich language support for Markdown.
    //  - Angular.ng-template: Editor services for Angular templates
    //  - vscode.php-language-features: Provides rich language support for PHP files.
    //  - esbenp.prettier-vscode: Code formatter using prettier
    //  - ms-python.python: IntelliSense (Pylance), Linting, Debugging (multi-threaded, remote), Jupyter Notebooks, code formatting, refactoring, unit tests, and more.
    //  - ms-vscode.references-view: Reference Search results as separate, stable view in the sidebar
    //  - vscode.search-result: Provides syntax highlighting and language features for tabbed search results.
    //  - vscode.typescript-language-features: Provides rich language support for JavaScript and TypeScript.
    //  - KamasamaK.vscode-cfml: CFML language
    //  - ecmel.vscode-html-css: CSS Intellisense for HTML
    //  - bmewburn.vscode-intelephense-client: PHP code intelligence for Visual Studio Code
    //  - mgmcdermott.vscode-language-babel: VSCode syntax highlighting for today's JavaScript
    //  - ms-python.vscode-pylance: A performant, feature-rich language server for Python in VS Code
    //  - yhpnoraa.beauty: a plugin for beautify & format several web based languages.
    //  - CoenraadS.bracket-pair-colorizer: A customizable extension for colorizing matching brackets
    //  - yamajyn.commandlist: Save and display shell commands like File Explorer
    //  - vscode.configuration-editing: Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.
    //  - AaronYoung.dark-synthwave-vscode: An amalgamation between Lukin & Synthwave '84 color themes to satisfy your neon dreams
    //  - vscode.debug-auto-launch: Helper for auto-attach feature when node-debug extensions are not active.
    //  - vscode.debug-server-ready: Open URI in browser if server under debugging is ready.
    //  - vscode.emmet: Emmet support for VS Code
    //  - dsznajder.es7-react-js-snippets: Simple extensions for React, Redux and Graphql in JS/TS with ES7 syntax
    //  - woodreamz.es7-react-js-snippets: Simple extension for React, Redux in JS with ES7 syntax
    //  - brandonfowler.exe-runner: Run .exe files directly from Visual Studio Code
    //  - vscode.extension-editing: Provides linting capabilities for authoring extensions.
    //  - vscode.git: Git SCM Integration
    //  - vscode.github: GitHub features for VS Code
    //  - vscode.github-authentication: GitHub Authentication Provider
    //  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
    //  - vscode.gulp: Extension to add Gulp capabilities to VSCode.
    //  - helgardrichard.helium-icon-theme: Helium and Material Design Icons for Visual Studio Code
    //  - vscode.image-preview: Provides VS Code's built-in image preview
    //  - vscode.ipynb: Provides basic support for opening and reading Jupyter's .ipynb notebook files
    //  - vscode.jake: Extension to add Jake capabilities to VS Code.
    //  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
    //  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
    //  - ritwickdey.live-sass: Compile Sass or Scss to CSS at realtime with live browser reload.
    //  - ritwickdey.LiveServer: Launch a development local Server with live reload feature for static & dynamic pages
    //  - vscode.markdown-math: Adds math support to Markdown in notebooks.
    //  - PKief.material-icon-theme: Material Design Icons for Visual Studio Code
    //  - vscode.merge-conflict: Highlighting and commands for inline merge conflicts.
    //  - vscode.microsoft-authentication: Microsoft authentication provider
    //  - vscode.npm: Extension to add task support for npm scripts.
    //  - christian-kohler.npm-intellisense: Visual Studio Code plugin that autocompletes npm modules in import statements
    //  - christian-kohler.path-intellisense: Visual Studio Code plugin that autocompletes filenames
    //  - felixfbecker.php-debug: Debug support for PHP with Xdebug
    //  - tht13.python: Python language extension for vscode
    //  - ms-vscode-remote.remote-wsl-recommender: Recommends using the Windows Subsystem for Linux (WSL) and the Remote WSL extension.
    //  - vscode.simple-browser: A very basic built-in webview for displaying web content.
    //  - burkeholland.simple-react-snippets: Dead simple React snippets you will actually use
    //  - RobbOwen.synthwave-vscode: A Synthwave-inspired colour theme to satisfy your neon dreams
    //  - bourhaouta.tailwindshades: Tailwind CSS color palette generator
    //  - Equinusocio.vsc-material-theme: The most epic theme now for Visual Studio Code
    //  - equinusocio.vsc-material-theme-icons: Material Theme Icons, the most epic icons theme for Visual Studio Code and Material Theme.
    //  - vscode-icons-team.vscode-icons: Icons for Visual Studio Code
    //  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
    //  - GitHub.vscode-pull-request-github: Pull Request and Issue Provider for GitHub
    //  - bradlc.vscode-tailwindcss: Intelligent Tailwind CSS tooling for VS Code
    //  - WakaTime.vscode-wakatime: Metrics, insights, and time tracking automatically generated from your programming activity.
    //  - VisualStudioExptTeam.vscodeintellicode: AI-assisted development
    "editor.defaultFormatter": null,
  
    // Controls whether the Go to Definition mouse gesture always opens the peek widget.
    "editor.definitionLinkOpensInPeek": false,
  
    // Controls whether `editor.tabSize#` and `#editor.insertSpaces` will be automatically detected when a file is opened based on the file contents.
    "editor.detectIndentation": true,
  
    // Controls whether the editor should allow moving selections via drag and drop.
    "editor.dragAndDrop": true,
  
    // Controls whether copying without a selection copies the current line.
    "editor.emptySelectionClipboard": true,
  
    // Scrolling speed multiplier when pressing `Alt`.
    "editor.fastScrollSensitivity": 5,
  
    // Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.
    "editor.find.addExtraSpaceOnTop": true,
  
    // Controls the condition for turning on Find in Selection automatically.
    //  - never: Never turn on Find in Selection automatically (default).
    //  - always: Always turn on Find in Selection automatically.
    //  - multiline: Turn on Find in Selection automatically when multiple lines of content are selected.
    "editor.find.autoFindInSelection": "never",
  
    // Controls whether the cursor should jump to find matches while typing.
    "editor.find.cursorMoveOnType": true,
  
    // Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found.
    "editor.find.loop": true,
  
    // Controls whether the search string in the Find Widget is seeded from the editor selection.
    //  - never: Never seed search string from the editor selection.
    //  - always: Always seed search string from the editor selection, including word at cursor position.
    //  - selection: Only seed search string from the editor selection.
    "editor.find.seedSearchStringFromSelection": "always",
  
    // Controls whether the editor has code folding enabled.
    "editor.folding": true,
  
    // Controls whether the editor should highlight folded ranges.
    "editor.foldingHighlight": true,
  
    // Controls whether the editor automatically collapses import ranges.
    "editor.foldingImportsByDefault": false,
  
    // Controls the strategy for computing folding ranges.
    //  - auto: Use a language-specific folding strategy if available, else the indentation-based one.
    //  - indentation: Use the indentation-based folding strategy.
    "editor.foldingStrategy": "auto",
  
    // Controls the font family.
    "editor.fontFamily": "Consolas, 'Courier New', monospace",
  
    // Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures or a string for the value of the CSS 'font-feature-settings' property.
    "editor.fontLigatures": false,
  
    // Controls the font size in pixels.
    "editor.fontSize": 14,
  
    // Controls the font weight. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
    "editor.fontWeight": "normal",
  
    // Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.
    "editor.formatOnPaste": false,
  
    // Format a file on save. A formatter must be available, the file must not be saved after delay, and the editor must not be shutting down.
    "editor.formatOnSave": false,
  
    // Controls if format on save formats the whole file or only modifications. Only applies when `editor.formatOnSave` is enabled.
    //  - file: Format the whole file.
    //  - modifications: Format modifications (requires source control).
    //  - modificationsIfAvailable: Will attempt to format modifications only (requires source control). If source control can't be used, then the whole file will be formatted.
    "editor.formatOnSaveMode": "file",
  
    // Controls whether the editor should automatically format the line after typing.
    "editor.formatOnType": false,
  
    // Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.
    "editor.glyphMargin": true,
  
    // Alternative command id that is being executed when the result of 'Go to Declaration' is the current location.
    "editor.gotoLocation.alternativeDeclarationCommand": "editor.action.goToReferences",
  
    // Alternative command id that is being executed when the result of 'Go to Definition' is the current location.
    "editor.gotoLocation.alternativeDefinitionCommand": "editor.action.goToReferences",
  
    // Alternative command id that is being executed when the result of 'Go to Implementation' is the current location.
    "editor.gotoLocation.alternativeImplementationCommand": "",
  
    // Alternative command id that is being executed when the result of 'Go to Reference' is the current location.
    "editor.gotoLocation.alternativeReferenceCommand": "",
  
    // Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location.
    "editor.gotoLocation.alternativeTypeDefinitionCommand": "editor.action.goToReferences",
  
    // This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead.
    // 
    "editor.gotoLocation.multiple": null,
  
    // Controls the behavior the 'Go to Declaration'-command when multiple target locations exist.
    //  - peek: Show peek view of the results (default)
    //  - gotoAndPeek: Go to the primary result and show a peek view
    //  - goto: Go to the primary result and enable peek-less navigation to others
    "editor.gotoLocation.multipleDeclarations": "peek",
  
    // Controls the behavior the 'Go to Definition'-command when multiple target locations exist.
    //  - peek: Show peek view of the results (default)
    //  - gotoAndPeek: Go to the primary result and show a peek view
    //  - goto: Go to the primary result and enable peek-less navigation to others
    "editor.gotoLocation.multipleDefinitions": "peek",
  
    // Controls the behavior the 'Go to Implementations'-command when multiple target locations exist.
    //  - peek: Show peek view of the results (default)
    //  - gotoAndPeek: Go to the primary result and show a peek view
    //  - goto: Go to the primary result and enable peek-less navigation to others
    "editor.gotoLocation.multipleImplementations": "peek",
  
    // Controls the behavior the 'Go to References'-command when multiple target locations exist.
    //  - peek: Show peek view of the results (default)
    //  - gotoAndPeek: Go to the primary result and show a peek view
    //  - goto: Go to the primary result and enable peek-less navigation to others
    "editor.gotoLocation.multipleReferences": "peek",
  
    // Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist.
    //  - peek: Show peek view of the results (default)
    //  - gotoAndPeek: Go to the primary result and show a peek view
    //  - goto: Go to the primary result and enable peek-less navigation to others
    "editor.gotoLocation.multipleTypeDefinitions": "peek",
  
    // Controls whether bracket pair guides are enabled or not.
    //  - true: Enables bracket pair guides.
    //  - active: Enables bracket pair guides only for the active bracket pair.
    //  - false: Disables bracket pair guides.
    "editor.guides.bracketPairs": false,
  
    // Controls whether horizontal bracket pair guides are enabled or not.
    //  - true: Enables horizontal guides as addition to vertical bracket pair guides.
    //  - active: Enables horizontal guides only for the active bracket pair.
    //  - false: Disables horizontal bracket pair guides.
    "editor.guides.bracketPairsHorizontal": "active",
  
    // Controls whether bracket pair guides are enabled or not.
    "editor.guides.highlightActiveBracketPair": true,
  
    // Controls whether the editor should highlight the active indent guide.
    "editor.guides.highlightActiveIndentation": true,
  
    // Controls whether the editor should render indent guides.
    "editor.guides.indentation": true,
  
    // Controls whether the cursor should be hidden in the overview ruler.
    "editor.hideCursorInOverviewRuler": false,
  
    // Prefer showing hovers above the line, if there's space.
    "editor.hover.above": true,
  
    // Controls the delay in milliseconds after which the hover is shown.
    "editor.hover.delay": 300,
  
    // Controls whether the hover is shown.
    "editor.hover.enabled": true,
  
    // Controls whether the hover should remain visible when mouse is moved over it.
    "editor.hover.sticky": true,
  
    // Enables the inlay hints in the editor.
    "editor.inlayHints.enabled": true,
  
    // Controls font family of inlay hints in the editor. When set to empty, the `editor.fontFamily` is used.
    "editor.inlayHints.fontFamily": "",
  
    // Controls font size of inlay hints in the editor. A default of 90% of `editor.fontSize` is used when the configured value is less than `5` or greater than the editor font size.
    "editor.inlayHints.fontSize": 0,
  
    // Controls whether to automatically show inline suggestions in the editor.
    "editor.inlineSuggest.enabled": true,
  
    // Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
    "editor.insertSpaces": true,
  
    // Defines the bracket symbols that increase or decrease the indentation.
    "editor.language.brackets": false,
  
    // Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.
    "editor.language.colorizedBracketPairs": false,
  
    // Special handling for large files to disable certain memory intensive features.
    "editor.largeFileOptimizations": true,
  
    // Controls the letter spacing in pixels.
    "editor.letterSpacing": 0,
  
    // Enables the code action lightbulb in the editor.
    "editor.lightbulb.enabled": true,
  
    // Controls the line height. 
    //  - Use 0 to automatically compute the line height from the font size.
    //  - Values between 0 and 8 will be used as a multiplier with the font size.
    //  - Values greater than or equal to 8 will be used as effective values.
    "editor.lineHeight": 0,
  
    // Controls the display of line numbers.
    //  - off: Line numbers are not rendered.
    //  - on: Line numbers are rendered as absolute number.
    //  - relative: Line numbers are rendered as distance in lines to cursor position.
    //  - interval: Line numbers are rendered every 10 lines.
    "editor.lineNumbers": "on",
  
    // Controls whether the editor has linked editing enabled. Depending on the language, related symbols, e.g. HTML tags, are updated while editing.
    "editor.linkedEditing": false,
  
    // Controls whether the editor should detect links and make them clickable.
    "editor.links": true,
  
    // Highlight matching brackets.
    "editor.matchBrackets": "always",
  
    // Lines above this length will not be tokenized for performance reasons
    "editor.maxTokenizationLineLength": 20000,
  
    // Controls whether the minimap is shown.
    "editor.minimap.enabled": true,
  
    // Limit the width of the minimap to render at most a certain number of columns.
    "editor.minimap.maxColumn": 120,
  
    // Render the actual characters on a line as opposed to color blocks.
    "editor.minimap.renderCharacters": true,
  
    // Scale of content drawn in the minimap: 1, 2 or 3.
    "editor.minimap.scale": 1,
  
    // Controls when the minimap slider is shown.
    "editor.minimap.showSlider": "mouseover",
  
    // Controls the side where to render the minimap.
    "editor.minimap.side": "right",
  
    // Controls the size of the minimap.
    //  - proportional: The minimap has the same size as the editor contents (and might scroll).
    //  - fill: The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling).
    //  - fit: The minimap will shrink as necessary to never be larger than the editor (no scrolling).
    "editor.minimap.size": "proportional",
  
    // A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.
    "editor.mouseWheelScrollSensitivity": 1,
  
    // Zoom the font of the editor when using mouse wheel and holding `Ctrl`.
    "editor.mouseWheelZoom": false,
  
    // Merge multiple cursors when they are overlapping.
    "editor.multiCursorMergeOverlapping": true,
  
    // The modifier to be used to add multiple cursors with the mouse. The Go to Definition and Open Link mouse gestures will adapt such that they do not conflict with the multicursor modifier. [Read more](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).
    //  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
    //  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
    "editor.multiCursorModifier": "alt",
  
    // Controls pasting when the line count of the pasted text matches the cursor count.
    //  - spread: Each cursor pastes a single line of the text.
    //  - full: Each cursor pastes the full text.
    "editor.multiCursorPaste": "spread",
  
    // Controls whether the editor should highlight semantic symbol occurrences.
    "editor.occurrencesHighlight": true,
  
    // Controls whether a border should be drawn around the overview ruler.
    "editor.overviewRulerBorder": true,
  
    // Controls the amount of space between the bottom edge of the editor and the last line.
    "editor.padding.bottom": 0,
  
    // Controls the amount of space between the top edge of the editor and the first line.
    "editor.padding.top": 0,
  
    // Controls whether the parameter hints menu cycles or closes when reaching the end of the list.
    "editor.parameterHints.cycle": false,
  
    // Enables a pop-up that shows parameter documentation and type information as you type.
    "editor.parameterHints.enabled": true,
  
    // Controls whether to focus the inline editor or the tree in the peek widget.
    //  - tree: Focus the tree when opening peek
    //  - editor: Focus the editor when opening peek
    "editor.peekWidgetDefaultFocus": "tree",
  
    // Controls whether suggestions should automatically show up while typing.
    "editor.quickSuggestions": {
      "other": true,
      "comments": false,
      "strings": false
    },
  
    // Controls the delay in milliseconds after which quick suggestions will show up.
    "editor.quickSuggestionsDelay": 10,
  
    // Enable/disable the ability to preview changes before renaming
    "editor.rename.enablePreview": true,
  
    // Deprecated, use `editor.linkedEditing` instead.
    // Controls whether the editor auto renames on type.
    "editor.renameOnType": false,
  
    // Controls whether the editor should render control characters.
    "editor.renderControlCharacters": true,
  
    // Render last line number when the file ends with a newline.
    "editor.renderFinalNewline": true,
  
    // Controls how the editor should render the current line highlight.
    //  - none
    //  - gutter
    //  - line
    //  - all: Highlights both the gutter and the current line.
    "editor.renderLineHighlight": "line",
  
    // Controls if the editor should render the current line highlight only when the editor is focused.
    "editor.renderLineHighlightOnlyWhenFocus": false,
  
    // Controls how the editor should render whitespace characters.
    //  - none
    //  - boundary: Render whitespace characters except for single spaces between words.
    //  - selection: Render whitespace characters only on selected text.
    //  - trailing: Render only trailing whitespace characters.
    //  - all
    "editor.renderWhitespace": "selection",
  
    // Controls whether selections should have rounded corners.
    "editor.roundedSelection": true,
  
    // Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.
    "editor.rulers": [],
  
    // Controls the visibility of the horizontal scrollbar.
    //  - auto: The horizontal scrollbar will be visible only when necessary.
    //  - visible: The horizontal scrollbar will always be visible.
    //  - hidden: The horizontal scrollbar will always be hidden.
    "editor.scrollbar.horizontal": "auto",
  
    // The height of the horizontal scrollbar.
    "editor.scrollbar.horizontalScrollbarSize": 12,
  
    // Controls whether clicks scroll by page or jump to click position.
    "editor.scrollbar.scrollByPage": false,
  
    // Controls the visibility of the vertical scrollbar.
    //  - auto: The vertical scrollbar will be visible only when necessary.
    //  - visible: The vertical scrollbar will always be visible.
    //  - hidden: The vertical scrollbar will always be hidden.
    "editor.scrollbar.vertical": "auto",
  
    // The width of the vertical scrollbar.
    "editor.scrollbar.verticalScrollbarSize": 14,
  
    // Controls the number of extra characters beyond which the editor will scroll horizontally.
    "editor.scrollBeyondLastColumn": 5,
  
    // Controls whether the editor will scroll beyond the last line.
    "editor.scrollBeyondLastLine": true,
  
    // Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad.
    "editor.scrollPredominantAxis": true,
  
    // Controls whether the editor should highlight matches similar to the selection.
    "editor.selectionHighlight": true,
  
    // Controls whether the semanticHighlighting is shown for the languages that support it.
    //  - true: Semantic highlighting enabled for all color themes.
    //  - false: Semantic highlighting disabled for all color themes.
    //  - configuredByTheme: Semantic highlighting is configured by the current color theme's `semanticHighlighting` setting.
    "editor.semanticHighlighting.enabled": "configuredByTheme",
  
    // Overrides editor semantic token color and styles from the currently selected color theme.
    "editor.semanticTokenColorCustomizations": {},
  
    // Controls strikethrough deprecated variables.
    "editor.showDeprecated": true,
  
    // Controls when the folding controls on the gutter are shown.
    //  - always: Always show the folding controls.
    //  - mouseover: Only show the folding controls when the mouse is over the gutter.
    "editor.showFoldingControls": "mouseover",
  
    // Controls fading out of unused code.
    "editor.showUnused": true,
  
    // Whether leading and trailing whitespace should always be selected.
    "editor.smartSelect.selectLeadingAndTrailingWhitespace": true,
  
    // Controls whether the editor will scroll using an animation.
    "editor.smoothScrolling": false,
  
    // Controls whether snippets are shown with other suggestions and how they are sorted.
    //  - top: Show snippet suggestions on top of other suggestions.
    //  - bottom: Show snippet suggestions below other suggestions.
    //  - inline: Show snippets suggestions with other suggestions.
    //  - none: Do not show snippet suggestions.
    "editor.snippetSuggestions": "inline",
  
    // Keep peek editors open even when double clicking their content or when hitting `Escape`.
    "editor.stablePeek": false,
  
    // Emulate selection behavior of tab characters when using spaces for indentation. Selection will stick to tab stops.
    "editor.stickyTabStops": false,
  
    // This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead.
    // 
    "editor.suggest.filteredTypes": {},
  
    // Controls whether filtering and sorting suggestions accounts for small typos.
    "editor.suggest.filterGraceful": true,
  
    // Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature.
    //  - insert: Insert suggestion without overwriting text right of the cursor.
    //  - replace: Insert suggestion and overwrite text right of the cursor.
    "editor.suggest.insertMode": "insert",
  
    // Controls whether sorting favors words that appear close to the cursor.
    "editor.suggest.localityBonus": false,
  
    // This setting is deprecated. The suggest widget can now be resized.
    // 
    "editor.suggest.maxVisibleSuggestions": 0,
  
    // Controls whether to preview the suggestion outcome in the editor.
    "editor.suggest.preview": false,
  
    // Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `editor.suggestSelection`).
    "editor.suggest.shareSuggestSelections": false,
  
    // When enabled IntelliSense shows `class`-suggestions.
    "editor.suggest.showClasses": true,
  
    // When enabled IntelliSense shows `color`-suggestions.
    "editor.suggest.showColors": true,
  
    // When enabled IntelliSense shows `constant`-suggestions.
    "editor.suggest.showConstants": true,
  
    // When enabled IntelliSense shows `constructor`-suggestions.
    "editor.suggest.showConstructors": true,
  
    // When enabled IntelliSense shows `customcolor`-suggestions.
    "editor.suggest.showCustomcolors": true,
  
    // When enabled IntelliSense shows `deprecated`-suggestions.
    "editor.suggest.showDeprecated": true,
  
    // When enabled IntelliSense shows `enumMember`-suggestions.
    "editor.suggest.showEnumMembers": true,
  
    // When enabled IntelliSense shows `enum`-suggestions.
    "editor.suggest.showEnums": true,
  
    // When enabled IntelliSense shows `event`-suggestions.
    "editor.suggest.showEvents": true,
  
    // When enabled IntelliSense shows `field`-suggestions.
    "editor.suggest.showFields": true,
  
    // When enabled IntelliSense shows `file`-suggestions.
    "editor.suggest.showFiles": true,
  
    // When enabled IntelliSense shows `folder`-suggestions.
    "editor.suggest.showFolders": true,
  
    // When enabled IntelliSense shows `function`-suggestions.
    "editor.suggest.showFunctions": true,
  
    // Controls whether to show or hide icons in suggestions.
    "editor.suggest.showIcons": true,
  
    // Controls whether suggest details show inline with the label or only in the details widget
    "editor.suggest.showInlineDetails": true,
  
    // When enabled IntelliSense shows `interface`-suggestions.
    "editor.suggest.showInterfaces": true,
  
    // When enabled IntelliSense shows `issues`-suggestions.
    "editor.suggest.showIssues": true,
  
    // When enabled IntelliSense shows `keyword`-suggestions.
    "editor.suggest.showKeywords": true,
  
    // When enabled IntelliSense shows `method`-suggestions.
    "editor.suggest.showMethods": true,
  
    // When enabled IntelliSense shows `module`-suggestions.
    "editor.suggest.showModules": true,
  
    // When enabled IntelliSense shows `operator`-suggestions.
    "editor.suggest.showOperators": true,
  
    // When enabled IntelliSense shows `property`-suggestions.
    "editor.suggest.showProperties": true,
  
    // When enabled IntelliSense shows `reference`-suggestions.
    "editor.suggest.showReferences": true,
  
    // When enabled IntelliSense shows `snippet`-suggestions.
    "editor.suggest.showSnippets": true,
  
    // Controls the visibility of the status bar at the bottom of the suggest widget.
    "editor.suggest.showStatusBar": false,
  
    // When enabled IntelliSense shows `struct`-suggestions.
    "editor.suggest.showStructs": true,
  
    // When enabled IntelliSense shows `typeParameter`-suggestions.
    "editor.suggest.showTypeParameters": true,
  
    // When enabled IntelliSense shows `unit`-suggestions.
    "editor.suggest.showUnits": true,
  
    // When enabled IntelliSense shows `user`-suggestions.
    "editor.suggest.showUsers": true,
  
    // When enabled IntelliSense shows `value`-suggestions.
    "editor.suggest.showValues": true,
  
    // When enabled IntelliSense shows `variable`-suggestions.
    "editor.suggest.showVariables": true,
  
    // When enabled IntelliSense shows `text`-suggestions.
    "editor.suggest.showWords": true,
  
    // Controls whether an active snippet prevents quick suggestions.
    "editor.suggest.snippetsPreventQuickSuggestions": true,
  
    // Font size for the suggest widget. When set to `0`, the value of `editor.fontSize` is used.
    "editor.suggestFontSize": 0,
  
    // Line height for the suggest widget. When set to `0`, the value of `editor.lineHeight` is used. The minimum value is 8.
    "editor.suggestLineHeight": 0,
  
    // Controls whether suggestions should automatically show up when typing trigger characters.
    "editor.suggestOnTriggerCharacters": true,
  
    // Controls how suggestions are pre-selected when showing the suggest list.
    //  - first: Always select the first suggestion.
    //  - recentlyUsed: Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently.
    //  - recentlyUsedByPrefix: Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`.
    "editor.suggestSelection": "recentlyUsed",
  
    // Enables tab completions.
    //  - on: Tab complete will insert the best matching suggestion when pressing tab.
    //  - off: Disable tab completions.
    //  - onlySnippets: Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled.
    "editor.tabCompletion": "off",
  
    // The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
    "editor.tabSize": 4,
  
    // Overrides editor syntax colors and font style from the currently selected color theme.
    "editor.tokenColorCustomizations": {},
  
    // Remove trailing auto inserted whitespace.
    "editor.trimAutoWhitespace": true,
  
    // Controls whether clicking on the empty content after a folded line will unfold the line.
    "editor.unfoldOnClickAfterEndOfLine": false,
  
    // Remove unusual line terminators that might cause problems.
    //  - auto: Unusual line terminators are automatically removed.
    //  - off: Unusual line terminators are ignored.
    //  - prompt: Unusual line terminators prompt to be removed.
    "editor.unusualLineTerminators": "prompt",
  
    // Inserting and deleting whitespace follows tab stops.
    "editor.useTabStops": true,
  
    // Controls whether completions should be computed based on words in the document.
    "editor.wordBasedSuggestions": true,
  
    // Controls from which documents word based completions are computed.
    //  - currentDocument: Only suggest words from the active document.
    //  - matchingDocuments: Suggest words from all open documents of the same language.
    //  - allDocuments: Suggest words from all open documents.
    "editor.wordBasedSuggestionsMode": "matchingDocuments",
  
    // Characters that will be used as word separators when doing word related navigations or operations.
    "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",
  
    // Controls how lines should wrap.
    //  - off: Lines will never wrap.
    //  - on: Lines will wrap at the viewport width.
    //  - wordWrapColumn: Lines will wrap at `editor.wordWrapColumn`.
    //  - bounded: Lines will wrap at the minimum of viewport and `editor.wordWrapColumn`.
    "editor.wordWrap": "off",
  
    // Controls the wrapping column of the editor when `editor.wordWrap` is `wordWrapColumn` or `bounded`.
    "editor.wordWrapColumn": 80,
  
    // Controls the indentation of wrapped lines.
    //  - none: No indentation. Wrapped lines begin at column 1.
    //  - same: Wrapped lines get the same indentation as the parent.
    //  - indent: Wrapped lines get +1 indentation toward the parent.
    //  - deepIndent: Wrapped lines get +2 indentation toward the parent.
    "editor.wrappingIndent": "same",
  
    // Controls the algorithm that computes wrapping points.
    //  - simple: Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width.
    //  - advanced: Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases.
    "editor.wrappingStrategy": "simple"
  
  },
  {
    // Controls whether inline actions are always visible in the Source Control view.
    "scm.alwaysShowActions": false,
  
    // Controls whether repositories should always be visible in the SCM view.
    "scm.alwaysShowRepositories": false,
  
    // Controls whether the SCM view should automatically reveal and select files when opening them.
    "scm.autoReveal": true,
  
    // Controls the count badge on the Source Control icon on the Activity Bar.
    //  - all: Show the sum of all Source Control Provider count badges.
    //  - focused: Show the count badge of the focused Source Control Provider.
    //  - off: Disable the Source Control count badge.
    "scm.countBadge": "all",
  
    // Controls the default Source Control repository view mode.
    //  - tree: Show the repository changes as a tree.
    //  - list: Show the repository changes as a list.
    "scm.defaultViewMode": "list",
  
    // Controls diff decorations in the editor.
    //  - all: Show the diff decorations in all available locations.
    //  - gutter: Show the diff decorations only in the editor gutter.
    //  - overview: Show the diff decorations only in the overview ruler.
    //  - minimap: Show the diff decorations only in the minimap.
    //  - none: Do not show the diff decorations.
    "scm.diffDecorations": "all",
  
    // Controls the behavior of Source Control diff gutter decorations.
    //  - diff: Show the inline diff peek view on click.
    //  - none: Do nothing.
    "scm.diffDecorationsGutterAction": "diff",
  
    // Controls the visibility of the Source Control diff decorator in the gutter.
    //  - always: Show the diff decorator in the gutter at all times.
    //  - hover: Show the diff decorator in the gutter only on hover.
    "scm.diffDecorationsGutterVisibility": "always",
  
    // Controls the width(px) of diff decorations in gutter (added & modified).
    "scm.diffDecorationsGutterWidth": 3,
  
    // Controls the font for the input message. Use `default` for the workbench user interface font family, `editor` for the `editor.fontFamily`'s value, or a custom font family.
    "scm.inputFontFamily": "default",
  
    // Controls the font size for the input message in pixels.
    "scm.inputFontSize": 13,
  
    // Controls the count badges on Source Control Provider headers. These headers only appear when there is more than one provider.
    //  - hidden: Hide Source Control Provider count badges.
    //  - auto: Only show count badge for Source Control Provider when non-zero.
    //  - visible: Show Source Control Provider count badges.
    "scm.providerCountBadge": "hidden",
  
    // Controls how many repositories are visible in the Source Control Repositories section. Set to `0` to be able to manually resize the view.
    "scm.repositories.visible": 10,
  
    // Controls whether an action button can be shown in the SCM view.
    "scm.showActionButton": true
  
  },
  {
    // Controls the behavior of clicking an activity bar icon in the workbench.
    //  - toggle: Hide the side bar if the clicked item is already visible.
    //  - focus: Focus side bar if the clicked item is already visible.
    "workbench.activityBar.iconClickBehavior": "toggle",
  
    // Controls the visibility of the activity bar in the workbench.
    "workbench.activityBar.visible": true,
  
    // Overrides colors from the currently selected color theme.
    "workbench.colorCustomizations": {},
  
    // Specifies the color theme used in the workbench.
    "workbench.colorTheme": "Default Dark+",
  
    // Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.
    "workbench.commandPalette.history": 50,
  
    // Controls whether the last typed input to the command palette should be restored when opening it the next time.
    "workbench.commandPalette.preserveInput": false,
  
    // If an editor matching one of the listed types is opened as the first in an editor group and more than one group is open, the group is automatically locked. Locked groups will only be used for opening editors when explicitly chosen by user gesture (e.g. drag and drop), but not by default. Consequently the active editor in a locked group is less likely to be replaced accidentally with a different editor.
    "workbench.editor.autoLockGroups": {
      "workbench.input.interactive": false,
      "interactive": false,
      "workbench.editorinputs.searchEditorInput": false,
      "imagePreview.previewEditor": false,
      "vscode.markdown.preview.editor": false,
      "jsProfileVisualizer.cpuprofile.table": false,
      "terminalEditor": true,
      "default": false,
      "jupyter-notebook": false,
      "workbench.editorinputs.sidebysideEditorInput": false,
      "mainThreadWebview-markdown.preview": false
    },
  
    // Controls if the centered layout should automatically resize to maximum width when more than one group is open. Once only one group is open it will resize back to the original centered width.
    "workbench.editor.centeredLayoutAutoResize": true,
  
    // Controls the behavior of empty editor groups when the last tab in the group is closed. When enabled, empty groups will automatically close. When disabled, empty groups will remain part of the grid.
    "workbench.editor.closeEmptyGroups": true,
  
    // Controls whether editors showing a file that was opened during the session should close automatically when getting deleted or renamed by some other process. Disabling this will keep the editor open  on such an event. Note that deleting from within the application will always close the editor and that editors with unsaved changes will never close to preserve your data.
    "workbench.editor.closeOnFileDelete": false,
  
    // Controls whether editor file decorations should use badges.
    "workbench.editor.decorations.badges": true,
  
    // Controls whether editor file decorations should use colors.
    "workbench.editor.decorations.colors": true,
  
    // Controls whether opened editors show as preview. Preview editors do not keep open and are reused until explicitly set to be kept open (e.g. via double click or editing) and show up with an italic font style.
    "workbench.editor.enablePreview": true,
  
    // Controls whether editors remain in preview when a code navigation is started from them. Preview editors do not keep open and are reused until explicitly set to be kept open (e.g. via double click or editing). This value is ignored when `workbench.editor.enablePreview` is disabled.
    "workbench.editor.enablePreviewFromCodeNavigation": false,
  
    // Controls whether editors opened from Quick Open show as preview. Preview editors do not keep open and are reused until explicitly set to be kept open (e.g. via double click or editing). This value is ignored when `workbench.editor.enablePreview` is disabled.
    "workbench.editor.enablePreviewFromQuickOpen": false,
  
    // Controls whether tabs are closed in most recently used order or from left to right.
    "workbench.editor.focusRecentEditorAfterClose": true,
  
    // Controls whether a top border is drawn on tabs for editors that have unsaved changes. This value is ignored when `workbench.editor.showTabs` is disabled.
    "workbench.editor.highlightModifiedTabs": false,
  
    // Controls the format of the label for an editor.
    //  - default: Show the name of the file. When tabs are enabled and two files have the same name in one group the distinguishing sections of each file's path are added. When tabs are disabled, the path relative to the workspace folder is shown if the editor is active.
    //  - short: Show the name of the file followed by its directory name.
    //  - medium: Show the name of the file followed by its path relative to the workspace folder.
    //  - long: Show the name of the file followed by its absolute path.
    "workbench.editor.labelFormat": "default",
  
    // Controls whether the language in a text editor is automatically detected unless the language has been explicitly set by the language picker. This can also be scoped by language so you can specify which languages you do not want to be switched off of. This is useful for languages like Markdown that often contain other languages that might trick language detection into thinking it's the embedded language and not Markdown.
    "workbench.editor.languageDetection": true,
  
    // Controls if the number of opened editors should be limited or not. When enabled, less recently used editors will close to make space for newly opening editors.
    "workbench.editor.limit.enabled": false,
  
    // Controls if the limit of maximum opened editors should apply per editor group or across all editor groups.
    "workbench.editor.limit.perEditorGroup": false,
  
    // Controls the maximum number of opened editors. Use the `workbench.editor.limit.perEditorGroup` setting to control this limit per editor group or across all groups.
    "workbench.editor.limit.value": 10,
  
    // Navigate between open files using mouse buttons four and five if provided.
    "workbench.editor.mouseBackForwardToNavigate": true,
  
    // Controls where editors open. Select `left` or `right` to open editors to the left or right of the currently active one. Select `first` or `last` to open editors independently from the currently active one.
    "workbench.editor.openPositioning": "right",
  
    // Controls the default direction of editors that are opened side by side (for example, from the Explorer). By default, editors will open on the right hand side of the currently active one. If changed to `down`, the editors will open below the currently active one.
    "workbench.editor.openSideBySideDirection": "right",
  
    // Controls the sizing of pinned editor tabs. Pinned tabs are sorted to the beginning of all opened tabs and typically do not close until unpinned. This value is ignored when `workbench.editor.showTabs` is disabled.
    //  - normal: A pinned tab inherits the look of non pinned tabs.
    //  - compact: A pinned tab will show in a compact form with only icon or first letter of the editor name.
    //  - shrink: A pinned tab shrinks to a compact fixed size showing parts of the editor name.
    "workbench.editor.pinnedTabSizing": "normal",
  
    // Restores the last editor view state (e.g. scroll position) when re-opening editors after they have been closed. Editor view state is stored per editor group and discarded when a group closes. Use the `workbench.editor.sharedViewState` setting to use the last known view state across all editor groups in case no previous view state was found for a editor group.
    "workbench.editor.restoreViewState": true,
  
    // Controls whether an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, e.g. when forcing an editor to open in a specific group or to the side of the currently active group.
    "workbench.editor.revealIfOpen": false,
  
    // Controls whether scrolling over tabs will open them or not. By default tabs will only reveal upon scrolling, but not open. You can press and hold the Shift-key while scrolling to change this behavior for that duration. This value is ignored when `workbench.editor.showTabs` is disabled.
    "workbench.editor.scrollToSwitchTabs": false,
  
    // Preserves the most recent editor view state (e.g. scroll position) across all editor groups and restores that if no specific editor view state is found for the editor group.
    "workbench.editor.sharedViewState": false,
  
    // Controls whether opened editors should show with an icon or not. This requires a file icon theme to be enabled as well.
    "workbench.editor.showIcons": true,
  
    // Controls whether opened editors should show in tabs or not.
    "workbench.editor.showTabs": true,
  
    // Controls the layout for when an editor is split in an editor group to be either vertical or horizontal.
    //  - vertical: Editors are positioned from top to bottom.
    //  - horizontal: Editors are positioned from left to right.
    "workbench.editor.splitInGroupLayout": "horizontal",
  
    // Controls if editor groups can be split from drag and drop operations by dropping an editor or file on the edges of the editor area.
    "workbench.editor.splitOnDragAndDrop": true,
  
    // Controls the sizing of editor groups when splitting them.
    //  - distribute: Splits all the editor groups to equal parts.
    //  - split: Splits the active editor group to equal parts.
    "workbench.editor.splitSizing": "distribute",
  
    // Controls the position of the editor's tabs close buttons, or disables them when set to 'off'. This value is ignored when `workbench.editor.showTabs` is disabled.
    "workbench.editor.tabCloseButton": "right",
  
    // Controls the sizing of editor tabs. This value is ignored when `workbench.editor.showTabs` is disabled.
    //  - fit: Always keep tabs large enough to show the full editor label.
    //  - shrink: Allow tabs to get smaller when the available space is not enough to show all tabs at once.
    "workbench.editor.tabSizing": "fit",
  
    // Controls the height of the scrollbars used for tabs and breadcrumbs in the editor title area.
    //  - default: The default size.
    //  - large: Increases the size, so it can be grabbed more easily with the mouse.
    "workbench.editor.titleScrollbarSizing": "default",
  
    // Controls if the untitled hint should be inline text in the editor or a floating button or hidden.
    "workbench.editor.untitled.hint": "text",
  
    // Controls the format of the label for an untitled editor.
    //  - content: The name of the untitled file is derived from the contents of its first line unless it has an associated file path. It will fallback to the name in case the line is empty or contains no word characters.
    //  - name: The name of the untitled file is not derived from the contents of the file.
    "workbench.editor.untitled.labelFormat": "content",
  
    // Controls whether tabs should be wrapped over multiple lines when exceeding available space or whether a scrollbar should appear instead. This value is ignored when `workbench.editor.showTabs` is disabled.
    "workbench.editor.wrapTabs": false,
  
    // Configure glob patterns to editors (e.g. `"*.hex": "hexEditor.hexEdit"`). These have precedence over the default behavior.
    "workbench.editorAssociations": {},
  
    // Configure the opener to use for external URIs (http, https).
    "workbench.externalUriOpeners": {},
  
    // Controls the delay in milliseconds after which the hover is shown for workbench items (ex. some extension provided tree view items). Already visible items may require a refresh before reflecting this setting change.
    "workbench.hover.delay": 500,
  
    // Specifies the file icon theme used in the workbench or 'null' to not show any file icons.
    //  - null: No file icons
    //  - vs-minimal
    //  - vs-seti
    //  - vscode-great-icons
    //  - eq-material-theme-icons
    //  - eq-material-theme-icons-darker
    //  - eq-material-theme-icons-palenight
    //  - eq-material-theme-icons-ocean
    //  - eq-material-theme-icons-light
    //  - file-icons
    //  - file-icons-colourless
    //  - helium-icon-theme
    //  - material-icon-theme
    //  - vscode-icons
    "workbench.iconTheme": "vs-seti",
  
    // Controls whether keyboard navigation in lists and trees is automatically triggered simply by typing. If set to `false`, keyboard navigation is only triggered when executing the `list.toggleKeyboardNavigation` command, for which you can assign a keyboard shortcut.
    "workbench.list.automaticKeyboardNavigation": true,
  
    // Scrolling speed multiplier when pressing `Alt`.
    "workbench.list.fastScrollSensitivity": 5,
  
    // Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.
    "workbench.list.horizontalScrolling": false,
  
    // Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.
    //  - simple: Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes.
    //  - highlight: Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.
    //  - filter: Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.
    "workbench.list.keyboardNavigation": "highlight",
  
    // A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.
    "workbench.list.mouseWheelScrollSensitivity": 1,
  
    // The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.
    //  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
    //  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
    "workbench.list.multiSelectModifier": "ctrlCmd",
  
    // Controls how to open items in trees and lists using the mouse (if supported). Note that some trees and lists might choose to ignore this setting if it is not applicable.
    "workbench.list.openMode": "singleClick",
  
    // Controls whether lists and trees have smooth scrolling.
    "workbench.list.smoothScrolling": false,
  
    // Controls the default location of the panel (terminal, debug console, output, problems). It can either show at the bottom, right, or left of the workbench.
    "workbench.panel.defaultLocation": "bottom",
  
    // Controls whether the panel opens maximized. It can either always open maximized, never open maximized, or open to the last state it was in before being closed.
    //  - always: Always maximize the panel when opening it.
    //  - never: Never maximize the panel when opening it. The panel will open un-maximized.
    //  - preserve: Open the panel to the state that it was in, before it was closed.
    "workbench.panel.opensMaximized": "preserve",
  
    // Specifies the preferred color theme for dark OS appearance when `window.autoDetectColorScheme` is enabled.
    "workbench.preferredDarkColorTheme": "Default Dark+",
  
    // Specifies the preferred color theme used in high contrast mode when `window.autoDetectHighContrast` is enabled.
    "workbench.preferredHighContrastColorTheme": "Default High Contrast",
  
    // Specifies the preferred color theme for light OS appearance when `window.autoDetectColorScheme` is enabled.
    "workbench.preferredLightColorTheme": "Default Light+",
  
    // Specifies the product icon theme used.
    //  - Default: Default
    //  - fluent-icons
    "workbench.productIconTheme": "Default",
  
    // Controls whether Quick Open should close automatically once it loses focus.
    "workbench.quickOpen.closeOnFocusLost": true,
  
    // Controls whether the last typed input to Quick Open should be restored when opening it the next time.
    "workbench.quickOpen.preserveInput": false,
  
    // Controls the hover feedback delay in milliseconds of the dragging area in between views/editors.
    "workbench.sash.hoverDelay": 300,
  
    // Controls the feedback area size in pixels of the dragging area in between views/editors. Set it to a larger value if you feel it's hard to resize views using the mouse.
    "workbench.sash.size": 4,
  
    // Determines which settings editor to use by default.
    //  - ui: Use the settings UI editor.
    //  - json: Use the JSON file editor.
    "workbench.settings.editor": "ui",
  
    // Controls whether to enable the natural language search mode for settings. The natural language search is provided by a Microsoft online service.
    "workbench.settings.enableNaturalLanguageSearch": true,
  
    // Controls whether opening keybinding settings also opens an editor showing all default keybindings.
    "workbench.settings.openDefaultKeybindings": false,
  
    // Controls whether opening settings also opens an editor showing all default settings.
    "workbench.settings.openDefaultSettings": false,
  
    // Controls the behavior of the settings editor Table of Contents while searching.
    //  - hide: Hide the Table of Contents while searching.
    //  - filter: Filter the Table of Contents to just categories that have matching settings. Clicking a category will filter the results to that category.
    "workbench.settings.settingsSearchTocBehavior": "filter",
  
    // Controls whether to use the split JSON editor when editing settings as JSON.
    "workbench.settings.useSplitJSON": false,
  
    // Controls the location of the sidebar and activity bar. They can either show on the left or right of the workbench.
    "workbench.sideBar.location": "left",
  
    // Controls which editor is shown at startup, if none are restored from the previous session.
    //  - none: Start without an editor.
    //  - welcomePage: Open the Welcome page, with content to aid in getting started with VS Code and extensions.
    //  - readme: Open the README when opening a folder that contains one, fallback to 'welcomePage' otherwise. Note: This is only observed as a global configuration, it will be ignored if set in a workspace or folder configuration.
    //  - newUntitledFile: Open a new untitled file (only applies when opening an empty window).
    //  - welcomePageInEmptyWorkbench: Open the Welcome page when opening an empty workbench.
    "workbench.startupEditor": "welcomePage",
  
    // Controls the visibility of the status bar at the bottom of the workbench.
    "workbench.statusBar.visible": true,
  
    // When enabled, will show the watermark tips when no editor is open.
    "workbench.tips.enabled": true,
  
    // Controls how tree folders are expanded when clicking the folder names. Note that some trees and lists might choose to ignore this setting if it is not applicable.
    "workbench.tree.expandMode": "singleClick",
  
    // Controls tree indentation in pixels.
    "workbench.tree.indent": 8,
  
    // Controls whether the tree should render indent guides.
    "workbench.tree.renderIndentGuides": "onHover",
  
    // Controls the visibility of view header actions. View header actions may either be always visible, or only visible when that view is focused or hovered over.
    "workbench.view.alwaysShowHeaderActions": false
  
  },
  {
    // If set, automatically switch to the preferred color theme based on the OS appearance. If the OS appearance is dark, the theme specified at `workbench.preferredDarkColorTheme#` is used, for light `#workbench.preferredLightColorTheme`.
    "window.autoDetectColorScheme": false,
  
    // Controls whether closing the last editor should also close the window. This setting only applies for windows that do not show folders.
    "window.closeWhenEmpty": false,
  
    // Controls the window title based on the active editor. Variables are substituted based on the context:
    // - `${activeEditorShort}`: the file name (e.g. myFile.txt).
    // - `${activeEditorMedium}`: the path of the file relative to the workspace folder (e.g. myFolder/myFileFolder/myFile.txt).
    // - `${activeEditorLong}`: the full path of the file (e.g. /Users/Development/myFolder/myFileFolder/myFile.txt).
    // - `${activeFolderShort}`: the name of the folder the file is contained in (e.g. myFileFolder).
    // - `${activeFolderMedium}`: the path of the folder the file is contained in, relative to the workspace folder (e.g. myFolder/myFileFolder).
    // - `${activeFolderLong}`: the full path of the folder the file is contained in (e.g. /Users/Development/myFolder/myFileFolder).
    // - `${folderName}`: name of the workspace folder the file is contained in (e.g. myFolder).
    // - `${folderPath}`: file path of the workspace folder the file is contained in (e.g. /Users/Development/myFolder).
    // - `${rootName}`: name of the opened workspace or folder (e.g. myFolder or myWorkspace).
    // - `${rootPath}`: file path of the opened workspace or folder (e.g. /Users/Development/myWorkspace).
    // - `${appName}`: e.g. VS Code.
    // - `${remoteName}`: e.g. SSH
    // - `${dirty}`: an indicator for when the active editor has unsaved changes.
    // - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
    "window.title": "${dirty}${activeEditorShort}${separator}${rootName}${separator}${appName}",
  
    // Separator used by `window.title`.
    "window.titleSeparator": " - ",
  
    // Adjust the zoom level of the window. The original size is 0 and each increment above (e.g. 1) or below (e.g. -1) represents zooming 20% larger or smaller. You can also enter decimals to adjust the zoom level with a finer granularity.
    "window.zoomLevel": 0
  
  },
  {
    // Configure file associations to languages (e.g. `"*.extension": "html"`). These have precedence over the default associations of the languages installed.
    "files.associations": {},
  
    // When enabled, the editor will attempt to guess the character set encoding when opening files. This setting can also be configured per language. Note, this setting is not respected by text search. Only `files.encoding` is respected.
    "files.autoGuessEncoding": false,
  
    // Controls auto save of editors that have unsaved changes. Read more about autosave [here](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save).
    //  - off: An editor with changes is never automatically saved.
    //  - afterDelay: An editor with changes is automatically saved after the configured `files.autoSaveDelay`.
    //  - onFocusChange: An editor with changes is automatically saved when the editor loses focus.
    //  - onWindowChange: An editor with changes is automatically saved when the window loses focus.
    "files.autoSave": "off",
  
    // Controls the delay in milliseconds after which an editor with unsaved changes is saved automatically. Only applies when `files.autoSave` is set to `afterDelay`.
    "files.autoSaveDelay": 1000,
  
    // The default language mode that is assigned to new files. If configured to `${activeEditorLanguage}`, will use the language mode of the currently active text editor if any.
    "files.defaultLanguage": "",
  
    // Moves files/folders to the OS trash (recycle bin on Windows) when deleting. Disabling this will delete files/folders permanently.
    "files.enableTrash": true,
  
    // The default character set encoding to use when reading and writing files. This setting can also be configured per language.
    //  - utf8: UTF-8
    //  - utf8bom: UTF-8 with BOM
    //  - utf16le: UTF-16 LE
    //  - utf16be: UTF-16 BE
    //  - windows1252: Western (Windows 1252)
    //  - iso88591: Western (ISO 8859-1)
    //  - iso88593: Western (ISO 8859-3)
    //  - iso885915: Western (ISO 8859-15)
    //  - macroman: Western (Mac Roman)
    //  - cp437: DOS (CP 437)
    //  - windows1256: Arabic (Windows 1256)
    //  - iso88596: Arabic (ISO 8859-6)
    //  - windows1257: Baltic (Windows 1257)
    //  - iso88594: Baltic (ISO 8859-4)
    //  - iso885914: Celtic (ISO 8859-14)
    //  - windows1250: Central European (Windows 1250)
    //  - iso88592: Central European (ISO 8859-2)
    //  - cp852: Central European (CP 852)
    //  - windows1251: Cyrillic (Windows 1251)
    //  - cp866: Cyrillic (CP 866)
    //  - iso88595: Cyrillic (ISO 8859-5)
    //  - koi8r: Cyrillic (KOI8-R)
    //  - koi8u: Cyrillic (KOI8-U)
    //  - iso885913: Estonian (ISO 8859-13)
    //  - windows1253: Greek (Windows 1253)
    //  - iso88597: Greek (ISO 8859-7)
    //  - windows1255: Hebrew (Windows 1255)
    //  - iso88598: Hebrew (ISO 8859-8)
    //  - iso885910: Nordic (ISO 8859-10)
    //  - iso885916: Romanian (ISO 8859-16)
    //  - windows1254: Turkish (Windows 1254)
    //  - iso88599: Turkish (ISO 8859-9)
    //  - windows1258: Vietnamese (Windows 1258)
    //  - gbk: Simplified Chinese (GBK)
    //  - gb18030: Simplified Chinese (GB18030)
    //  - cp950: Traditional Chinese (Big5)
    //  - big5hkscs: Traditional Chinese (Big5-HKSCS)
    //  - shiftjis: Japanese (Shift JIS)
    //  - eucjp: Japanese (EUC-JP)
    //  - euckr: Korean (EUC-KR)
    //  - windows874: Thai (Windows 874)
    //  - iso885911: Latin/Thai (ISO 8859-11)
    //  - koi8ru: Cyrillic (KOI8-RU)
    //  - koi8t: Tajik (KOI8-T)
    //  - gb2312: Simplified Chinese (GB 2312)
    //  - cp865: Nordic DOS (CP 865)
    //  - cp850: Western European DOS (CP 850)
    "files.encoding": "utf8",
  
    // The default end of line character.
    //  - \n: LF
    //  - \r\n: CRLF
    //  - auto: Uses operating system specific end of line character.
    "files.eol": "auto",
  
    // Configure glob patterns for excluding files and folders. For example, the file Explorer decides which files and folders to show or hide based on this setting. Refer to the `search.exclude` setting to define search specific excludes. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
    "files.exclude": {
      "**/.git": true,
      "**/.svn": true,
      "**/.hg": true,
      "**/CVS": true,
      "**/.DS_Store": true,
      "**/Thumbs.db": true
    },
  
    // When enabled, insert a final new line at the end of the file when saving it.
    "files.insertFinalNewline": false,
  
    // Controls the memory available to VS Code after restart when trying to open large files. Same effect as specifying `--max-memory=NEWSIZE` on the command line.
    "files.maxMemoryForLargeFilesMB": 4096,
  
    // Timeout in milliseconds after which file participants for create, rename, and delete are cancelled. Use `0` to disable participants.
    "files.participants.timeout": 60000,
  
    // Restore the undo stack when a file is reopened.
    "files.restoreUndoStack": true,
  
    // A save conflict can occur when a file is saved to disk that was changed by another program in the meantime. To prevent data loss, the user is asked to compare the changes in the editor with the version on disk. This setting should only be changed if you frequently encounter save conflict errors and may result in data loss if used without caution.
    //  - askUser: Will refuse to save and ask for resolving the save conflict manually.
    //  - overwriteFileOnDisk: Will resolve the save conflict by overwriting the file on disk with the changes in the editor.
    "files.saveConflictResolution": "askUser",
  
    // Enables the simple file dialog. The simple file dialog replaces the system file dialog when enabled.
    "files.simpleDialog.enable": false,
  
    // When enabled, will trim all new lines after the final new line at the end of the file when saving it.
    "files.trimFinalNewlines": false,
  
    // When enabled, will trim trailing whitespace when saving a file.
    "files.trimTrailingWhitespace": false,
  
    // Configure paths or glob patterns to exclude from file watching. Paths that are relative (for example `build/output`) will be resolved to an absolute path using the currently opened workspace. Glob patterns must match on absolute paths (i.e. prefix with `**/` or the full path and suffix with `/**` to match files within a path) to match properly (for example `**/build/output/**` or `/Users/name/workspaces/project/build/output/**`). When you experience the file watcher process consuming a lot of CPU, make sure to exclude large folders that are of less interest (such as build output folders).
    "files.watcherExclude": {
      "**/.git/objects/**": true,
      "**/.git/subtree-cache/**": true,
      "**/node_modules/*/**": true,
      "**/.hg/store/**": true
    },
  
    // Configure extra paths to watch for changes inside the workspace. By default, all workspace folders will be watched recursively, except for folders that are symbolic links. You can explicitly add absolute or relative paths to support watching folders that are symbolic links. Relative paths will be resolved to an absolute path using the currently opened workspace.
    "files.watcherInclude": []
  
  },
  {
    // Controls the font size (in pixels) of the screencast mode keyboard.
    "screencastMode.fontSize": 56,
  
    // Controls how long (in milliseconds) the keyboard overlay is shown in screencast mode.
    "screencastMode.keyboardOverlayTimeout": 800,
  
    // Controls the color in hex (#RGB, #RGBA, #RRGGBB or #RRGGBBAA) of the mouse indicator in screencast mode.
    "screencastMode.mouseIndicatorColor": "#FF0000",
  
    // Controls the size (in pixels) of the mouse indicator in screencast mode.
    "screencastMode.mouseIndicatorSize": 20,
  
    // Only show keyboard shortcuts in screencast mode.
    "screencastMode.onlyKeyboardShortcuts": false,
  
    // Controls the vertical offset of the screencast mode overlay from the bottom as a percentage of the workbench height.
    "screencastMode.verticalOffset": 20
  
  },
  {
    // Controls whether turning on Zen Mode also centers the layout.
    "zenMode.centerLayout": true,
  
    // Controls whether turning on Zen Mode also puts the workbench into full screen mode.
    "zenMode.fullScreen": true,
  
    // Controls whether turning on Zen Mode also hides the activity bar either at the left or right of the workbench.
    "zenMode.hideActivityBar": true,
  
    // Controls whether turning on Zen Mode also hides the editor line numbers.
    "zenMode.hideLineNumbers": true,
  
    // Controls whether turning on Zen Mode also hides the status bar at the bottom of the workbench.
    "zenMode.hideStatusBar": true,
  
    // Controls whether turning on Zen Mode also hides workbench tabs.
    "zenMode.hideTabs": true,
  
    // Controls whether a window should restore to zen mode if it was exited in zen mode.
    "zenMode.restore": true,
  
    // Controls whether notifications are shown while in zen mode. If true, only error notifications will pop out.
    "zenMode.silentNotifications": true
  
  },
  {
    // Controls whether the explorer should automatically reveal and select files when opening them.
    //  - true: Files will be revealed and selected.
    //  - false: Files will not be revealed and selected.
    //  - focusNoScroll: Files will not be scrolled into view, but will still be focused.
    "explorer.autoReveal": true,
  
    // Controls whether the explorer should render folders in a compact form. In such a form, single child folders will be compressed in a combined tree element. Useful for Java package structures, for example.
    "explorer.compactFolders": true,
  
    // Controls whether the explorer should ask for confirmation when deleting a file via the trash.
    "explorer.confirmDelete": true,
  
    // Controls whether the explorer should ask for confirmation to move files and folders via drag and drop.
    "explorer.confirmDragAndDrop": true,
  
    // The path separation character used when copying relative file paths.
    //  - /: Use slash as path separation character.
    //  - \: Use backslash as path separation character.
    //  - auto: Uses operating system specific path separation character.
    "explorer.copyRelativePathSeparator": "auto",
  
    // Controls whether file decorations should use badges.
    "explorer.decorations.badges": true,
  
    // Controls whether file decorations should use colors.
    "explorer.decorations.colors": true,
  
    // Controls whether the explorer should allow to move files and folders via drag and drop. This setting only effects drag and drop from inside the explorer.
    "explorer.enableDragAndDrop": true,
  
    // Controls whether the explorer should expand multi-root workspaces containing only one folder during initilization
    "explorer.expandSingleFolderWorkspaces": true,
  
    // Controls what naming strategy to use when a giving a new name to a duplicated explorer item on paste.
    //  - simple: Appends the word "copy" at the end of the duplicated name potentially followed by a number
    //  - smart: Adds a number at the end of the duplicated name. If some number is already part of the name, tries to increase that number
    "explorer.incrementalNaming": "simple",
  
    // Controls the sorting order of editors in the Open Editors pane.
    //  - editorOrder: Editors are ordered in the same order editor tabs are shown.
    //  - alphabetical: Editors are ordered in alphabetical order inside each editor group.
    "explorer.openEditors.sortOrder": "editorOrder",
  
    // Number of editors shown in the Open Editors pane. Setting this to 0 hides the Open Editors pane.
    "explorer.openEditors.visible": 9,
  
    // Controls the property-based sorting of files and folders in the explorer.
    //  - default: Files and folders are sorted by their names. Folders are displayed before files.
    //  - mixed: Files and folders are sorted by their names. Files are interwoven with folders.
    //  - filesFirst: Files and folders are sorted by their names. Files are displayed before folders.
    //  - type: Files and folders are grouped by extension type then sorted by their names. Folders are displayed before files.
    //  - modified: Files and folders are sorted by last modified date in descending order. Folders are displayed before files.
    "explorer.sortOrder": "default",
  
    // Controls the lexicographic sorting of file and folder names in the Explorer.
    //  - default: Uppercase and lowercase names are mixed together.
    //  - upper: Uppercase names are grouped together before lowercase names.
    //  - lower: Lowercase names are grouped together before uppercase names.
    //  - unicode: Names are sorted in unicode order.
    "explorer.sortOrderLexicographicOptions": "default"
  
  },
  {
    // Controls the positioning of the actionbar on rows in the search view.
    //  - auto: Position the actionbar to the right when the search view is narrow, and immediately after the content when the search view is wide.
    //  - right: Always position the actionbar to the right.
    "search.actionsPosition": "right",
  
    // Controls whether the search results will be collapsed or expanded.
    //  - auto: Files with less than 10 results are expanded. Others are collapsed.
    //  - alwaysCollapse
    //  - alwaysExpand
    "search.collapseResults": "alwaysExpand",
  
    // Configure glob patterns for excluding files and folders in fulltext searches and quick open. Inherits all glob patterns from the `files.exclude` setting. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
    "search.exclude": {
      "**/node_modules": true,
      "**/bower_components": true,
      "**/*.code-search": true
    },
  
    // Controls whether to follow symlinks while searching.
    "search.followSymlinks": true,
  
    // When enabled, search in a local window runs in a separate search process instead of the extension host.
    "search.forceSearchProcess": false,
  
    // This setting is deprecated. You can drag the search icon to a new location instead.
    // Controls whether the search will be shown as a view in the sidebar or as a panel in the panel area for more horizontal space.
    "search.location": "sidebar",
  
    // When enabled, the searchService process will be kept alive instead of being shut down after an hour of inactivity. This will keep the file search cache in memory.
    "search.maintainFileSearchCache": false,
  
    // Controls the maximum number of search results, this can be set to `null` (empty) to return unlimited results.
    "search.maxResults": 20000,
  
    // Controls where new `Search: Find in Files` and `Find in Folder` operations occur: either in the sidebar's search view, or in a search editor
    //  - view: Search in the search view, either in the panel or sidebar.
    //  - reuseEditor: Search in an existing search editor if present, otherwise in a new search editor.
    //  - newEditor: Search in a new search editor.
    "search.mode": "view",
  
    // Controls sorting order of editor history in quick open when filtering.
    //  - default: History entries are sorted by relevance based on the filter value used. More relevant entries appear first.
    //  - recency: History entries are sorted by recency. More recently opened entries appear first.
    "search.quickOpen.history.filterSortOrder": "default",
  
    // Whether to include results from recently opened files in the file results for Quick Open.
    "search.quickOpen.includeHistory": true,
  
    // Whether to include results from a global symbol search in the file results for Quick Open.
    "search.quickOpen.includeSymbols": false,
  
    // The default number of surrounding context lines to use when creating new Search Editors. If using `search.searchEditor.reusePriorSearchConfiguration`, this can be set to `null` (empty) to use the prior Search Editor's configuration.
    "search.searchEditor.defaultNumberOfContextLines": 1,
  
    // Configure effect of double clicking a result in a search editor.
    //  - selectWord: Double clicking selects the word under the cursor.
    //  - goToLocation: Double clicking opens the result in the active editor group.
    //  - openLocationToSide: Double clicking opens the result in the editor group to the side, creating one if it does not yet exist.
    "search.searchEditor.doubleClickBehaviour": "goToLocation",
  
    // When enabled, new Search Editors will reuse the includes, excludes, and flags of the previously opened Search Editor.
    "search.searchEditor.reusePriorSearchConfiguration": false,
  
    // Search all files as you type.
    "search.searchOnType": true,
  
    // When `search.searchOnType` is enabled, controls the timeout in milliseconds between a character being typed and the search starting. Has no effect when `search.searchOnType` is disabled.
    "search.searchOnTypeDebouncePeriod": 300,
  
    // Update the search query to the editor's selected text when focusing the search view. This happens either on click or when triggering the `workbench.views.search.focus` command.
    "search.seedOnFocus": false,
  
    // Enable seeding search from the word nearest the cursor when the active editor has no selection.
    "search.seedWithNearestWord": false,
  
    // Controls whether to show line numbers for search results.
    "search.showLineNumbers": false,
  
    // Search case-insensitively if the pattern is all lowercase, otherwise, search case-sensitively.
    "search.smartCase": false,
  
    // Controls sorting order of search results.
    //  - default: Results are sorted by folder and file names, in alphabetical order.
    //  - fileNames: Results are sorted by file names ignoring folder order, in alphabetical order.
    //  - type: Results are sorted by file extensions, in alphabetical order.
    //  - modified: Results are sorted by file last modified date, in descending order.
    //  - countDescending: Results are sorted by count per file, in descending order.
    //  - countAscending: Results are sorted by count per file, in ascending order.
    "search.sortOrder": "default",
  
    // Controls whether to use global `.gitignore` and `.ignore` files when searching for files. Requires `search.useIgnoreFiles` to be enabled.
    "search.useGlobalIgnoreFiles": false,
  
    // Controls whether to use `.gitignore` and `.ignore` files when searching for files.
    "search.useIgnoreFiles": true,
  
    // Deprecated. PCRE2 will be used automatically when using regex features that are only supported by PCRE2.
    // Whether to use the PCRE2 regex engine in text search. This enables using some advanced regex features like lookahead and backreferences. However, not all PCRE2 features are supported - only features that are also supported by JavaScript.
    "search.usePCRE2": false,
  
    // Controls whether to open Replace Preview when selecting or replacing a match.
    "search.useReplacePreview": true,
  
    // Deprecated. Consider "search.usePCRE2" for advanced regex feature support.
    // This setting is deprecated and now falls back on "search.usePCRE2".
    "search.useRipgrep": true
  
  },
  {
    // Controls when the comments panel should open.
    "comments.openPanel": "openOnSessionStartWithComments"
  
  },
  {
    // Allow setting breakpoints in any file.
    "debug.allowBreakpointsEverywhere": false,
  
    // Controls whether to confirm when the window closes if there are active debug sessions.
    //  - never: Never confirm.
    //  - always: Always confirm if there are debug sessions.
    "debug.confirmOnExit": "never",
  
    // Controls whether suggestions should be accepted on enter in the debug console. enter is also used to evaluate whatever is typed in the debug console.
    "debug.console.acceptSuggestionOnEnter": "off",
  
    // Controls if the debug console should be automatically closed when the debug session ends.
    "debug.console.closeOnEnd": false,
  
    // Controls if the debug console should collapse identical lines and show a number of occurrences with a badge.
    "debug.console.collapseIdenticalLines": true,
  
    // Controls the font family in the debug console.
    "debug.console.fontFamily": "default",
  
    // Controls the font size in pixels in the debug console.
    "debug.console.fontSize": 14,
  
    // Controls if the debug console should suggest previously typed input.
    "debug.console.historySuggestions": true,
  
    // Controls the line height in pixels in the debug console. Use 0 to compute the line height from the font size.
    "debug.console.lineHeight": 0,
  
    // Controls if the lines should wrap in the debug console.
    "debug.console.wordWrap": true,
  
    // Show Source Code in Disassembly View.
    "debug.disassemblyView.showSourceCode": true,
  
    // Controls whether the workbench window should be focused when the debugger breaks.
    "debug.focusWindowOnBreak": true,
  
    // Show variable values inline in editor while debugging.
    //  - true: Always show variable values inline in editor while debugging.
    //  - false: Never show variable values inline in editor while debugging.
    //  - auto: Show variable values inline in editor while debugging when the language supports inline value locations.
    "debug.inlineValues": "auto",
  
    // Controls when the internal debug console should open.
    "debug.internalConsoleOptions": "openOnFirstSessionStart",
  
    // Controls what to do when errors are encountered after running a preLaunchTask.
    //  - debugAnyway: Ignore task errors and start debugging.
    //  - showErrors: Show the Problems view and do not start debugging.
    //  - prompt: Prompt user.
    //  - abort: Cancel debugging.
    "debug.onTaskErrors": "prompt",
  
    // Controls when the debug view should open.
    "debug.openDebug": "openOnDebugBreak",
  
    // Automatically open the explorer view at the end of a debug session.
    "debug.openExplorerOnEnd": false,
  
    // Controls what editors to save before starting a debug session.
    //  - allEditorsInActiveGroup: Save all editors in the active group before starting a debug session.
    //  - nonUntitledEditorsInActiveGroup: Save all editors in the active group except untitled ones before starting a debug session.
    //  - none: Don't save any editors before starting a debug session.
    "debug.saveBeforeStart": "allEditorsInActiveGroup",
  
    // Controls whether breakpoints should be shown in the overview ruler.
    "debug.showBreakpointsInOverviewRuler": false,
  
    // Controls whether inline breakpoints candidate decorations should be shown in the editor while debugging.
    "debug.showInlineBreakpointCandidates": true,
  
    // Controls when the debug status bar should be visible.
    //  - never: Never show debug in status bar
    //  - always: Always show debug in status bar
    //  - onFirstSessionStart: Show debug in status bar only after debug was started for the first time
    "debug.showInStatusBar": "onFirstSessionStart",
  
    // Controls whether the debug sub-sessions are shown in the debug tool bar. When this setting is false the stop command on a sub-session will also stop the parent session.
    "debug.showSubSessionsInToolBar": false,
  
    // Before starting a new debug session in an integrated or external terminal, clear the terminal.
    "debug.terminal.clearBeforeReusing": false,
  
    // Controls the location of the debug toolbar. Either `floating` in all views, `docked` in the debug view, or `hidden`.
    "debug.toolBarLocation": "floating",
  
    // Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces.
    "launch": {
      "configurations": [],
      "compounds": []
    }
  
  },
  {
    // Enable/disable autoclosing of HTML tags.
    "html.autoClosingTags": true,
  
    // Controls the default value for attributes when completion is accepted.
    //  - doublequotes: Attribute value is set to "".
    //  - singlequotes: Attribute value is set to ''.
    //  - empty: Attribute value is not set.
    "html.completion.attributeDefaultValue": "doublequotes",
  
    // A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-html-languageservice/blob/master/docs/customData.md).
    // 
    // VS Code loads custom data on startup to enhance its HTML support for the custom HTML tags, attributes and attribute values you specify in the JSON files.
    // 
    // The file paths are relative to workspace and only workspace folder settings are considered.
    "html.customData": [],
  
    // List of tags, comma separated, where the content shouldn't be reformatted. `null` defaults to the `pre` tag.
    "html.format.contentUnformatted": "pre,code,textarea",
  
    // Enable/disable default HTML formatter.
    "html.format.enable": true,
  
    // End with a newline.
    "html.format.endWithNewline": false,
  
    // List of tags, comma separated, that should have an extra newline before them. `null` defaults to `"head, body, /html"`.
    "html.format.extraLiners": "head, body, /html",
  
    // Format and indent `{{#foo}}` and `{{/foo}}`.
    "html.format.indentHandlebars": false,
  
    // Indent `<head>` and `<body>` sections.
    "html.format.indentInnerHtml": false,
  
    // Maximum number of line breaks to be preserved in one chunk. Use `null` for unlimited.
    "html.format.maxPreserveNewLines": null,
  
    // Controls whether existing line breaks before elements should be preserved. Only works before elements, not inside tags or for text.
    "html.format.preserveNewLines": true,
  
    // Honor django, erb, handlebars and php templating language tags.
    "html.format.templating": false,
  
    // List of tags, comma separated, that shouldn't be reformatted. `null` defaults to all tags listed at https://www.w3.org/TR/html5/dom.html#phrasing-content.
    "html.format.unformatted": "wbr",
  
    // Keep text content together between this string.
    "html.format.unformattedContentDelimiter": "",
  
    // Wrap attributes.
    //  - auto: Wrap attributes only when line length is exceeded.
    //  - force: Wrap each attribute except first.
    //  - force-aligned: Wrap each attribute except first and keep aligned.
    //  - force-expand-multiline: Wrap each attribute.
    //  - aligned-multiple: Wrap when line length is exceeded, align attributes vertically.
    //  - preserve: Preserve wrapping of attributes.
    //  - preserve-aligned: Preserve wrapping of attributes but align.
    "html.format.wrapAttributes": "auto",
  
    // Alignment size when using 'force aligned' and 'aligned multiple' in `html.format.wrapAttributes` or `null` to use the default indent size.
    "html.format.wrapAttributesIndentSize": null,
  
    // Maximum amount of characters per line (0 = disable).
    "html.format.wrapLineLength": 120,
  
    // Show tag and attribute documentation in hover.
    "html.hover.documentation": true,
  
    // Show references to MDN in hover.
    "html.hover.references": true,
  
    // Deprecated in favor of `editor.linkedEditing`
    // Enable/disable mirroring cursor on matching HTML tag.
    "html.mirrorCursorOnMatchingTag": false,
  
    // Controls whether the built-in HTML language support suggests HTML5 tags, properties and values.
    "html.suggest.html5": true,
  
    // Traces the communication between VS Code and the HTML language server.
    "html.trace.server": "off",
  
    // Controls whether the built-in HTML language support validates embedded scripts.
    "html.validate.scripts": true,
  
    // Controls whether the built-in HTML language support validates embedded styles.
    "html.validate.styles": true
  
  },
  {
    // The setting `json.colorDecorators.enable` has been deprecated in favor of `editor.colorDecorators`.
    // Enables or disables color decorators
    "json.colorDecorators.enable": true,
  
    // Enable/disable default JSON formatter
    "json.format.enable": true,
  
    // The maximum number of outline symbols and folding regions computed (limited for performance reasons).
    "json.maxItemsComputed": 5000,
  
    // When enabled, JSON schemas can be fetched from http and https locations.
    "json.schemaDownload.enable": true,
  
    // Associate schemas to JSON files in the current project.
    "json.schemas": [],
  
    // Traces the communication between VS Code and the JSON language server.
    "json.trace.server": "off"
  
  },
  {
    // Controls where links in Markdown files should be opened.
    //  - currentGroup: Open links in the active editor group.
    //  - beside: Open links beside the active editor.
    "markdown.links.openLocation": "currentGroup",
  
    // Sets how line-breaks are rendered in the Markdown preview. Setting it to 'true' creates a <br> for newlines inside paragraphs.
    "markdown.preview.breaks": false,
  
    // Double click in the Markdown preview to switch to the editor.
    "markdown.preview.doubleClickToSwitchToEditor": true,
  
    // Controls the font family used in the Markdown preview.
    "markdown.preview.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', system-ui, 'Ubuntu', 'Droid Sans', sans-serif",
  
    // Controls the font size in pixels used in the Markdown preview.
    "markdown.preview.fontSize": 14,
  
    // Controls the line height used in the Markdown preview. This number is relative to the font size.
    "markdown.preview.lineHeight": 1.6,
  
    // Enable or disable conversion of URL-like text to links in the Markdown preview.
    "markdown.preview.linkify": true,
  
    // Mark the current editor selection in the Markdown preview.
    "markdown.preview.markEditorSelection": true,
  
    // Controls how links to other Markdown files in the Markdown preview should be opened.
    //  - inPreview: Try to open links in the Markdown preview.
    //  - inEditor: Try to open links in the editor.
    "markdown.preview.openMarkdownLinks": "inPreview",
  
    // When a Markdown preview is scrolled, update the view of the editor.
    "markdown.preview.scrollEditorWithPreview": true,
  
    // When a Markdown editor is scrolled, update the view of the preview.
    "markdown.preview.scrollPreviewWithEditor": true,
  
    // Enable or disable some language-neutral replacement and quotes beautification in the Markdown preview.
    "markdown.preview.typographer": false,
  
    // A list of URLs or local paths to CSS style sheets to use from the Markdown preview. Relative paths are interpreted relative to the folder open in the Explorer. If there is no open folder, they are interpreted relative to the location of the Markdown file. All '\' need to be written as '\\'.
    "markdown.styles": [],
  
    // Enable debug logging for the Markdown extension.
    "markdown.trace": "off"
  
  },
  {
    // Controls whether the built-in PHP language suggestions are enabled. The support suggests PHP globals and variables.
    "php.suggest.basic": true,
  
    // Enable/disable built-in PHP validation.
    "php.validate.enable": true,
  
    // Points to the PHP executable.
    "php.validate.executablePath": null,
  
    // Whether the linter is run on save or on type.
    "php.validate.run": "onSave"
  
  },
  {
    // Enable/disable automatic closing of JSX tags.
    "javascript.autoClosingTags": true,
  
    // Enable/disable default JavaScript formatter.
    "javascript.format.enable": true,
  
    // Defines space handling after a comma delimiter.
    "javascript.format.insertSpaceAfterCommaDelimiter": true,
  
    // Defines space handling after the constructor keyword.
    "javascript.format.insertSpaceAfterConstructor": false,
  
    // Defines space handling after function keyword for anonymous functions.
    "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,
  
    // Defines space handling after keywords in a control flow statement.
    "javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,
  
    // Defines space handling after opening and before closing empty braces.
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,
  
    // Defines space handling after opening and before closing JSX expression braces.
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,
  
    // Defines space handling after opening and before closing non-empty braces.
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,
  
    // Defines space handling after opening and before closing non-empty brackets.
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,
  
    // Defines space handling after opening and before closing non-empty parenthesis.
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,
  
    // Defines space handling after opening and before closing template string braces.
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,
  
    // Defines space handling after a semicolon in a for statement.
    "javascript.format.insertSpaceAfterSemicolonInForStatements": true,
  
    // Defines space handling after a binary operator.
    "javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true,
  
    // Defines space handling before function argument parentheses.
    "javascript.format.insertSpaceBeforeFunctionParenthesis": false,
  
    // Defines whether an open brace is put onto a new line for control blocks or not.
    "javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,
  
    // Defines whether an open brace is put onto a new line for functions or not.
    "javascript.format.placeOpenBraceOnNewLineForFunctions": false,
  
    // Defines handling of optional semicolons. Requires using TypeScript 3.7 or newer in the workspace.
    //  - ignore: Don't insert or remove any semicolons.
    //  - insert: Insert semicolons at statement ends.
    //  - remove: Remove unnecessary semicolons.
    "javascript.format.semicolons": "ignore",
  
    // This setting has been deprecated in favor of `js/ts.implicitProjectConfig.checkJs`.
    // Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
    "javascript.implicitProjectConfig.checkJs": false,
  
    // This setting has been deprecated in favor of `js/ts.implicitProjectConfig.experimentalDecorators`.
    // Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
    "javascript.implicitProjectConfig.experimentalDecorators": false,
  
    // Enable/disable inlay hints for member values in enum declarations:
    // ```typescript
    // 
    // enum MyValue {
    // 	A /* = 0 */;
    // 	B /* = 1 */;
    // }
    //  
    // ```
    // Requires using TypeScript 4.4+ in the workspace.
    "javascript.inlayHints.enumMemberValues.enabled": false,
  
    // Enable/disable inlay hints for implicit return types on function signatures:
    // ```typescript
    // 
    // function foo() /* :number */ {
    // 	return Date.now();
    // } 
    //  
    // ```
    // Requires using TypeScript 4.4+ in the workspace.
    "javascript.inlayHints.functionLikeReturnTypes.enabled": false,
  
    // Enable/disable inlay hints for parameter names:
    // ```typescript
    // 
    // parseInt(/* str: */ '123', /* radix: */ 8)
    //  
    // ```
    // Requires using TypeScript 4.4+ in the workspace.
    //  - none: Disable parameter name hints.
    //  - literals: Enable parameter name hints only for literal arguments.
    //  - all: Enable parameter name hints for literal and non-literal arguments.
    "javascript.inlayHints.parameterNames.enabled": "none",
  
    // Suppress parameter name hints on arguments whose text is identical to the parameter name.
    "javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,
  
    // Enable/disable inlay hints for implicit parameter types:
    // ```typescript
    // 
    // el.addEventListener('click', e /* :MouseEvent */ => ...)
    //  
    // ```
    // Requires using TypeScript 4.4+ in the workspace.
    "javascript.inlayHints.parameterTypes.enabled": false,
  
    // Enable/disable inlay hints for implicit types on property declarations:
    // ```typescript
    // 
    // class Foo {
    // 	prop /* :number */ = Date.now();
    // }
    //  
    // ```
    // Requires using TypeScript 4.4+ in the workspace.
    "javascript.inlayHints.propertyDeclarationTypes.enabled": false,
  
    // Enable/disable inlay hints for implicit variable types:
    // ```typescript
    // 
    // const foo /* :number */ = Date.now();
    //  
    // ```
    // Requires using TypeScript 4.4+ in the workspace.
    "javascript.inlayHints.variableTypes.enabled": false,
  
    // Preferred path style for auto imports.
    //  - shortest: Prefers a non-relative import only if one is available that has fewer path segments than a relative import.
    //  - relative: Prefers a relative path to the imported file location.
    //  - non-relative: Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.
    //  - project-relative: Prefers a non-relative import only if the relative import path would leave the package or project directory. Requires using TypeScript 4.2+ in the workspace.
    "javascript.preferences.importModuleSpecifier": "shortest",
  
    // Preferred path ending for auto imports. Requires using TypeScript 4.5+ in the workspace.
    //  - auto: Use project settings to select a default.
    //  - minimal: Shorten `./component/index.js` to `./component`.
    //  - index: Shorten `./component/index.js` to `./component/index`.
    //  - js: Do not shorten path endings; include the `.js` extension.
    "javascript.preferences.importModuleSpecifierEnding": "auto",
  
    // Preferred style for JSX attribute completions.
    //  - auto: Insert `={}` or `=""` after attribute names based on the prop type.
    //  - braces: Insert `={}` after attribute names.
    //  - none: Only insert attribute names.
    "javascript.preferences.jsxAttributeCompletionStyle": "auto",
  
    // Preferred quote style to use for quick fixes: `single` quotes, `double` quotes, or `auto` infer quote type from existing imports.
    "javascript.preferences.quoteStyle": "auto",
  
    // The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'
    // Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
    "javascript.preferences.renameShorthandProperties": true,
  
    // Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
    "javascript.preferences.useAliasesForRenames": true,
  
    // Enable/disable references CodeLens in JavaScript files.
    "javascript.referencesCodeLens.enabled": false,
  
    // Enable/disable references CodeLens on all functions in JavaScript files.
    "javascript.referencesCodeLens.showOnAllFunctions": false,
  
    // Enable/disable auto import suggestions.
    "javascript.suggest.autoImports": true,
  
    // Complete functions with their parameter signature.
    "javascript.suggest.completeFunctionCalls": false,
  
    // Enable/disable suggestion to complete JSDoc comments.
    "javascript.suggest.completeJSDocs": true,
  
    // Enabled/disable autocomplete suggestions.
    "javascript.suggest.enabled": true,
  
    // Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires TS 3.7+ and strict null checks to be enabled.
    "javascript.suggest.includeAutomaticOptionalChainCompletions": true,
  
    // Enable/disable auto-import-style completions on partially-typed import statements. Requires using TypeScript 4.3+ in the workspace.
    "javascript.suggest.includeCompletionsForImportStatements": true,
  
    // Enable/disable snippet completions for class members. Requires using TypeScript 4.5+ in the workspace
    "javascript.suggest.includeCompletionsWithClassMemberSnippets": true,
  
    // Enable/disable generating `@return` annotations for JSDoc templates. Requires using TypeScript 4.2+ in the workspace.
    "javascript.suggest.jsdoc.generateReturns": true,
  
    // Enable/disable including unique names from the file in JavaScript suggestions. Note that name suggestions are always disabled in JavaScript code that is semantically checked using `@ts-check` or `checkJs`.
    "javascript.suggest.names": true,
  
    // Enable/disable suggestions for paths in import statements and require calls.
    "javascript.suggest.paths": true,
  
    // Enable/disable suggestion diagnostics for JavaScript files in the editor.
    "javascript.suggestionActions.enabled": true,
  
    // Enable/disable automatic updating of import paths when you rename or move a file in VS Code.
    //  - prompt: Prompt on each rename.
    //  - always: Always update paths automatically.
    //  - never: Never rename paths and don't prompt.
    "javascript.updateImportsOnFileMove.enabled": "prompt",
  
    // Enable/disable JavaScript validation.
    "javascript.validate.enable": true,
  
    // Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
    "js/ts.implicitProjectConfig.checkJs": false,
  
    // Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
    "js/ts.implicitProjectConfig.experimentalDecorators": false,
  
    // Enable/disable [strict function types](https://www.typescriptlang.org/tsconfig#strictFunctionTypes) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
    "js/ts.implicitProjectConfig.strictFunctionTypes": true,
  
    // Enable/disable [strict null checks](https://www.typescriptlang.org/tsconfig#strictNullChecks) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
    "js/ts.implicitProjectConfig.strictNullChecks": false,
  
    // Enable/disable automatic closing of JSX tags.
    "typescript.autoClosingTags": true,
  
    // Check if npm is installed for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).
    "typescript.check.npmIsInstalled": true,
  
    // Disables [automatic type acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition). Automatic type acquisition fetches `@types` packages from npm to improve IntelliSense for external libraries.
    "typescript.disableAutomaticTypeAcquisition": false,
  
    // Enables prompting of users to use the TypeScript version configured in the workspace for Intellisense.
    "typescript.enablePromptUseWorkspaceTsdk": false,
  
    // Enable/disable default TypeScript formatter.
    "typescript.format.enable": true,
  
    // Defines space handling after a comma delimiter.
    "typescript.format.insertSpaceAfterCommaDelimiter": true,
  
    // Defines space handling after the constructor keyword.
    "typescript.format.insertSpaceAfterConstructor": false,
  
    // Defines space handling after function keyword for anonymous functions.
    "typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,
  
    // Defines space handling after keywords in a control flow statement.
    "typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,
  
    // Defines space handling after opening and before closing empty braces.
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,
  
    // Defines space handling after opening and before closing JSX expression braces.
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,
  
    // Defines space handling after opening and before closing non-empty braces.
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,
  
    // Defines space handling after opening and before closing non-empty brackets.
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,
  
    // Defines space handling after opening and before closing non-empty parenthesis.
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,
  
    // Defines space handling after opening and before closing template string braces.
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,
  
    // Defines space handling after a semicolon in a for statement.
    "typescript.format.insertSpaceAfterSemicolonInForStatements": true,
  
    // Defines space handling after type assertions in TypeScript.
    "typescript.format.insertSpaceAfterTypeAssertion": false,
  
    // Defines space handling after a binary operator.
    "typescript.format.insertSpaceBeforeAndAfterBinaryOperators": true,
  
    // Defines space handling before function argument parentheses.
    "typescript.format.insertSpaceBeforeFunctionParenthesis": false,
  
    // Defines whether an open brace is put onto a new line for control blocks or not.
    "typescript.format.placeOpenBraceOnNewLineForControlBlocks": false,
  
    // Defines whether an open brace is put onto a new line for functions or not.
    "typescript.format.placeOpenBraceOnNewLineForFunctions": false,
  
    // Defines handling of optional semicolons. Requires using TypeScript 3.7 or newer in the workspace.
    //  - ignore: Don't insert or remove any semicolons.
    //  - insert: Insert semicolons at statement ends.
    //  - remove: Remove unnecessary semicolons.
    "typescript.format.semicolons": "ignore",
  
    // Enable/disable implementations CodeLens. This CodeLens shows the implementers of an interface.
    "typescript.implementationsCodeLens.enabled": false,
  
    // Enable/disable inlay hints for member values in enum declarations:
    // ```typescript
    // 
    // enum MyValue {
    // 	A /* = 0 */;
    // 	B /* = 1 */;
    // }
    //  
    // ```
    // Requires using TypeScript 4.4+ in the workspace.
    "typescript.inlayHints.enumMemberValues.enabled": false,
  
    // Enable/disable inlay hints for implicit return types on function signatures:
    // ```typescript
    // 
    // function foo() /* :number */ {
    // 	return Date.now();
    // } 
    //  
    // ```
    // Requires using TypeScript 4.4+ in the workspace.
    "typescript.inlayHints.functionLikeReturnTypes.enabled": false,
  
    // Enable/disable inlay hints for parameter names:
    // ```typescript
    // 
    // parseInt(/* str: */ '123', /* radix: */ 8)
    //  
    // ```
    // Requires using TypeScript 4.4+ in the workspace.
    //  - none: Disable parameter name hints.
    //  - literals: Enable parameter name hints only for literal arguments.
    //  - all: Enable parameter name hints for literal and non-literal arguments.
    "typescript.inlayHints.parameterNames.enabled": "none",
  
    // Suppress parameter name hints on arguments whose text is identical to the parameter name.
    "typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,
  
    // Enable/disable inlay hints for implicit parameter types:
    // ```typescript
    // 
    // el.addEventListener('click', e /* :MouseEvent */ => ...)
    //  
    // ```
    // Requires using TypeScript 4.4+ in the workspace.
    "typescript.inlayHints.parameterTypes.enabled": false,
  
    // Enable/disable inlay hints for implicit types on property declarations:
    // ```typescript
    // 
    // class Foo {
    // 	prop /* :number */ = Date.now();
    // }
    //  
    // ```
    // Requires using TypeScript 4.4+ in the workspace.
    "typescript.inlayHints.propertyDeclarationTypes.enabled": false,
  
    // Enable/disable inlay hints for implicit variable types:
    // ```typescript
    // 
    // const foo /* :number */ = Date.now();
    //  
    // ```
    // Requires using TypeScript 4.4+ in the workspace.
    "typescript.inlayHints.variableTypes.enabled": false,
  
    // Sets the locale used to report JavaScript and TypeScript errors. Defaults to use VS Code's locale.
    "typescript.locale": "",
  
    // Preferred path style for auto imports.
    //  - shortest: Prefers a non-relative import only if one is available that has fewer path segments than a relative import.
    //  - relative: Prefers a relative path to the imported file location.
    //  - non-relative: Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.
    //  - project-relative: Prefers a non-relative import only if the relative import path would leave the package or project directory. Requires using TypeScript 4.2+ in the workspace.
    "typescript.preferences.importModuleSpecifier": "shortest",
  
    // Preferred path ending for auto imports. Requires using TypeScript 4.5+ in the workspace.
    //  - auto: Use project settings to select a default.
    //  - minimal: Shorten `./component/index.js` to `./component`.
    //  - index: Shorten `./component/index.js` to `./component/index`.
    //  - js: Do not shorten path endings; include the `.js` extension.
    "typescript.preferences.importModuleSpecifierEnding": "auto",
  
    // Enable/disable searching `package.json` dependencies for available auto imports.
    //  - auto: Search dependencies based on estimated performance impact.
    //  - on: Always search dependencies.
    //  - off: Never search dependencies.
    "typescript.preferences.includePackageJsonAutoImports": "auto",
  
    // Preferred style for JSX attribute completions.
    //  - auto: Insert `={}` or `=""` after attribute names based on the prop type.
    //  - braces: Insert `={}` after attribute names.
    //  - none: Only insert attribute names.
    "typescript.preferences.jsxAttributeCompletionStyle": "auto",
  
    // Preferred quote style to use for quick fixes: `single` quotes, `double` quotes, or `auto` infer quote type from existing imports.
    "typescript.preferences.quoteStyle": "auto",
  
    // The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'
    // Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
    "typescript.preferences.renameShorthandProperties": true,
  
    // Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
    "typescript.preferences.useAliasesForRenames": true,
  
    // Enable/disable references CodeLens in TypeScript files.
    "typescript.referencesCodeLens.enabled": false,
  
    // Enable/disable references CodeLens on all functions in TypeScript files.
    "typescript.referencesCodeLens.showOnAllFunctions": false,
  
    // Report style checks as warnings.
    "typescript.reportStyleChecksAsWarnings": true,
  
    // Enable/disable auto import suggestions.
    "typescript.suggest.autoImports": true,
  
    // Complete functions with their parameter signature.
    "typescript.suggest.completeFunctionCalls": false,
  
    // Enable/disable suggestion to complete JSDoc comments.
    "typescript.suggest.completeJSDocs": true,
  
    // Enabled/disable autocomplete suggestions.
    "typescript.suggest.enabled": true,
  
    // Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires TS 3.7+ and strict null checks to be enabled.
    "typescript.suggest.includeAutomaticOptionalChainCompletions": true,
  
    // Enable/disable auto-import-style completions on partially-typed import statements. Requires using TypeScript 4.3+ in the workspace.
    "typescript.suggest.includeCompletionsForImportStatements": true,
  
    // Enable/disable snippet completions for class members. Requires using TypeScript 4.5+ in the workspace
    "typescript.suggest.includeCompletionsWithClassMemberSnippets": true,
  
    // Enable/disable snippet completions from TS Server. Requires using TypeScript 4.3+ in the workspace.
    "typescript.suggest.includeCompletionsWithSnippetText": true,
  
    // Enable/disable generating `@return` annotations for JSDoc templates. Requires using TypeScript 4.2+ in the workspace.
    "typescript.suggest.jsdoc.generateReturns": true,
  
    // Enable/disable suggestions for paths in import statements and require calls.
    "typescript.suggest.paths": true,
  
    // Enable/disable suggestion diagnostics for TypeScript files in the editor.
    "typescript.suggestionActions.enabled": true,
  
    // Enabled/disable occasional surveys that help us improve VS Code's JavaScript and TypeScript support.
    "typescript.surveys.enabled": true,
  
    // Controls auto detection of tsc tasks.
    //  - on: Create both build and watch tasks.
    //  - off: Disable this feature.
    //  - build: Only create single run compile tasks.
    //  - watch: Only create compile and watch tasks.
    "typescript.tsc.autoDetect": "on",
  
    // Specifies the folder path to the tsserver and `lib*.d.ts` files under a TypeScript install to use for IntelliSense, for example: `./node_modules/typescript/lib`.
    // 
    // - When specified as a user setting, the TypeScript version from `typescript.tsdk` automatically replaces the built-in TypeScript version.
    // - When specified as a workspace setting, `typescript.tsdk` allows you to switch to use that workspace version of TypeScript for IntelliSense with the `TypeScript: Select TypeScript version` command.
    // 
    // See the [TypeScript documentation](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions) for more detail about managing TypeScript versions.
    "typescript.tsdk": "",
  
    // Enables tracing TS server performance to a directory. These trace files can be used to diagnose TS Server performance issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
    "typescript.tsserver.enableTracing": false,
  
    // (Experimental) Enables project wide error reporting.
    "typescript.tsserver.experimental.enableProjectDiagnostics": false,
  
    // Enables logging of the TS server to a file. This log can be used to diagnose TS Server issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
    "typescript.tsserver.log": "off",
  
    // The maximum amount of memory (in MB) to allocate to the TypeScript server process.
    "typescript.tsserver.maxTsServerMemory": 3072,
  
    // Enables tracing of messages sent to the TS server. This trace can be used to diagnose TS Server issues. The trace may contain file paths, source code, and other potentially sensitive information from your project.
    "typescript.tsserver.trace": "off",
  
    // This setting has been deprecated in favor of `typescript.tsserver.useSyntaxServer`.
    // Enable/disable spawning a separate TypeScript server that can more quickly respond to syntax related operations, such as calculating folding or computing document symbols. Requires using TypeScript 3.4.0 or newer in the workspace.
    "typescript.tsserver.useSeparateSyntaxServer": true,
  
    // Controls if TypeScript launches a dedicated server to more quickly handle syntax related operations, such as computing code folding.
    //  - always: Use a lighter weight syntax server to handle all IntelliSense operations. This syntax server can only provide IntelliSense for opened files.
    //  - never: Don't use a dedicated syntax server. Use a single server to handle all IntelliSense operations.
    //  - auto: Spawn both a full server and a lighter weight server dedicated to syntax operations. The syntax server is used to speed up syntax operations and provide IntelliSense while projects are loading.
    "typescript.tsserver.useSyntaxServer": "auto",
  
    // Configure which watching strategies should be used to keep track of files and directories. Requires using TypeScript 3.8+ in the workspace.
    "typescript.tsserver.watchOptions": {},
  
    // Enable/disable automatic updating of import paths when you rename or move a file in VS Code.
    //  - prompt: Prompt on each rename.
    //  - always: Always update paths automatically.
    //  - never: Never rename paths and don't prompt.
    "typescript.updateImportsOnFileMove.enabled": "prompt",
  
    // Enable/disable TypeScript validation.
    "typescript.validate.enable": true,
  
    // Controls which files are searched by [go to symbol in workspace](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name).
    //  - allOpenProjects: Search all open JavaScript or TypeScript projects for symbols. Requires using TypeScript 3.9 or newer in the workspace.
    //  - currentProject: Only search for symbols in the current JavaScript or TypeScript project.
    "typescript.workspaceSymbols.scope": "allOpenProjects"
  
  },
  {
    // Configures when the error peek view is automatically opened.
    //  - failureAnywhere: Open automatically no matter where the failure is.
    //  - failureInVisibleDocument: Open automatically when a test fails in a visible document.
    //  - never: Never automatically open.
    "testing.automaticallyOpenPeekView": "failureInVisibleDocument",
  
    // Controls whether to automatically open the peek view during auto-run mode.
    "testing.automaticallyOpenPeekViewDuringAutoRun": false,
  
    // How long to wait, in milliseconds, after a test is marked as outdated and starting a new run.
    "testing.autoRun.delay": 1000,
  
    // Controls which tests are automatically run.
    //  - all: Automatically runs all discovered test when auto-run is toggled. Reruns individual tests when they are changed.
    //  - rerun: Reruns individual tests when they are changed. Will not automatically run any tests that have not been already executed.
    "testing.autoRun.mode": "all",
  
    // Controls the action to take when left-clicking on a test decoration in the gutter.
    //  - run: Run the test.
    //  - debug: Debug the test.
    //  - contextMenu: Open the context menu for more options.
    "testing.defaultGutterClickAction": "run",
  
    // Controls whether the running test should be followed in the test explorer view
    "testing.followRunningTest": true,
  
    // Controls whether test decorations are shown in the editor gutter.
    "testing.gutterEnabled": true
  
  },
  {
    // Insert semicolon at end of line when completing CSS properties.
    "css.completion.completePropertyWithSemicolon": true,
  
    // By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
    "css.completion.triggerPropertyValueCompletion": true,
  
    // A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-css-languageservice/blob/master/docs/customData.md).
    // 
    // VS Code loads custom data on startup to enhance its CSS support for the custom CSS properties, at directives, pseudo classes and pseudo elements you specify in the JSON files.
    // 
    // The file paths are relative to workspace and only workspace folder settings are considered.
    "css.customData": [],
  
    // Show tag and attribute documentation in CSS hovers.
    "css.hover.documentation": true,
  
    // Show references to MDN in CSS hovers.
    "css.hover.references": true,
  
    // Invalid number of parameters.
    "css.lint.argumentsInColorFunction": "error",
  
    // Do not use `width` or `height` when using `padding` or `border`.
    "css.lint.boxModel": "ignore",
  
    // When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
    "css.lint.compatibleVendorPrefixes": "ignore",
  
    // Do not use duplicate style definitions.
    "css.lint.duplicateProperties": "ignore",
  
    // Do not use empty rulesets.
    "css.lint.emptyRules": "warning",
  
    // Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
    "css.lint.float": "ignore",
  
    // `@font-face` rule must define `src` and `font-family` properties.
    "css.lint.fontFaceProperties": "warning",
  
    // Hex colors must consist of three or six hex numbers.
    "css.lint.hexColorLength": "error",
  
    // Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
    "css.lint.idSelector": "ignore",
  
    // IE hacks are only necessary when supporting IE7 and older.
    "css.lint.ieHack": "ignore",
  
    // Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
    "css.lint.important": "ignore",
  
    // Import statements do not load in parallel.
    "css.lint.importStatement": "ignore",
  
    // Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
    "css.lint.propertyIgnoredDueToDisplay": "warning",
  
    // The universal selector (`*`) is known to be slow.
    "css.lint.universalSelector": "ignore",
  
    // Unknown at-rule.
    "css.lint.unknownAtRules": "warning",
  
    // Unknown property.
    "css.lint.unknownProperties": "warning",
  
    // Unknown vendor specific property.
    "css.lint.unknownVendorSpecificProperties": "ignore",
  
    // A list of properties that are not validated against the `unknownProperties` rule.
    "css.lint.validProperties": [],
  
    // When using a vendor-specific prefix, also include the standard property.
    "css.lint.vendorPrefix": "warning",
  
    // No unit for zero needed.
    "css.lint.zeroUnits": "ignore",
  
    // Traces the communication between VS Code and the CSS language server.
    "css.trace.server": "off",
  
    // Enables or disables all validations.
    "css.validate": true
  
  },
  {
    // Insert semicolon at end of line when completing CSS properties.
    "less.completion.completePropertyWithSemicolon": true,
  
    // By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
    "less.completion.triggerPropertyValueCompletion": true,
  
    // Show tag and attribute documentation in LESS hovers.
    "less.hover.documentation": true,
  
    // Show references to MDN in LESS hovers.
    "less.hover.references": true,
  
    // Invalid number of parameters.
    "less.lint.argumentsInColorFunction": "error",
  
    // Do not use `width` or `height` when using `padding` or `border`.
    "less.lint.boxModel": "ignore",
  
    // When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
    "less.lint.compatibleVendorPrefixes": "ignore",
  
    // Do not use duplicate style definitions.
    "less.lint.duplicateProperties": "ignore",
  
    // Do not use empty rulesets.
    "less.lint.emptyRules": "warning",
  
    // Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
    "less.lint.float": "ignore",
  
    // `@font-face` rule must define `src` and `font-family` properties.
    "less.lint.fontFaceProperties": "warning",
  
    // Hex colors must consist of three or six hex numbers.
    "less.lint.hexColorLength": "error",
  
    // Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
    "less.lint.idSelector": "ignore",
  
    // IE hacks are only necessary when supporting IE7 and older.
    "less.lint.ieHack": "ignore",
  
    // Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
    "less.lint.important": "ignore",
  
    // Import statements do not load in parallel.
    "less.lint.importStatement": "ignore",
  
    // Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
    "less.lint.propertyIgnoredDueToDisplay": "warning",
  
    // The universal selector (`*`) is known to be slow.
    "less.lint.universalSelector": "ignore",
  
    // Unknown at-rule.
    "less.lint.unknownAtRules": "warning",
  
    // Unknown property.
    "less.lint.unknownProperties": "warning",
  
    // Unknown vendor specific property.
    "less.lint.unknownVendorSpecificProperties": "ignore",
  
    // A list of properties that are not validated against the `unknownProperties` rule.
    "less.lint.validProperties": [],
  
    // When using a vendor-specific prefix, also include the standard property.
    "less.lint.vendorPrefix": "warning",
  
    // No unit for zero needed.
    "less.lint.zeroUnits": "ignore",
  
    // Enables or disables all validations.
    "less.validate": true
  
  },
  {
    // Insert semicolon at end of line when completing CSS properties.
    "scss.completion.completePropertyWithSemicolon": true,
  
    // By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
    "scss.completion.triggerPropertyValueCompletion": true,
  
    // Show tag and attribute documentation in SCSS hovers.
    "scss.hover.documentation": true,
  
    // Show references to MDN in SCSS hovers.
    "scss.hover.references": true,
  
    // Invalid number of parameters.
    "scss.lint.argumentsInColorFunction": "error",
  
    // Do not use `width` or `height` when using `padding` or `border`.
    "scss.lint.boxModel": "ignore",
  
    // When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
    "scss.lint.compatibleVendorPrefixes": "ignore",
  
    // Do not use duplicate style definitions.
    "scss.lint.duplicateProperties": "ignore",
  
    // Do not use empty rulesets.
    "scss.lint.emptyRules": "warning",
  
    // Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
    "scss.lint.float": "ignore",
  
    // `@font-face` rule must define `src` and `font-family` properties.
    "scss.lint.fontFaceProperties": "warning",
  
    // Hex colors must consist of three or six hex numbers.
    "scss.lint.hexColorLength": "error",
  
    // Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
    "scss.lint.idSelector": "ignore",
  
    // IE hacks are only necessary when supporting IE7 and older.
    "scss.lint.ieHack": "ignore",
  
    // Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
    "scss.lint.important": "ignore",
  
    // Import statements do not load in parallel.
    "scss.lint.importStatement": "ignore",
  
    // Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
    "scss.lint.propertyIgnoredDueToDisplay": "warning",
  
    // The universal selector (`*`) is known to be slow.
    "scss.lint.universalSelector": "ignore",
  
    // Unknown at-rule.
    "scss.lint.unknownAtRules": "warning",
  
    // Unknown property.
    "scss.lint.unknownProperties": "warning",
  
    // Unknown vendor specific property.
    "scss.lint.unknownVendorSpecificProperties": "ignore",
  
    // A list of properties that are not validated against the `unknownProperties` rule.
    "scss.lint.validProperties": [],
  
    // When using a vendor-specific prefix, also include the standard property.
    "scss.lint.vendorPrefix": "warning",
  
    // No unit for zero needed.
    "scss.lint.zeroUnits": "ignore",
  
    // Enables or disables all validations.
    "scss.validate": true
  
  },
  {
    // When enabled, editors with extension details will be automatically closed upon navigating away from the Extensions View.
    "extensions.closeExtensionDetailsOnViewChange": false,
  
    // When enabled, the notifications for extension recommendations will not be shown.
    "extensions.ignoreRecommendations": false,
  
    // This setting is deprecated. Use extensions.ignoreRecommendations setting to control recommendation notifications. Use Extensions view's visibility actions to hide Recommended view by default.
    // 
    "extensions.showRecommendationsOnlyOnDemand": false,
  
    // Override the virtual workspaces support of an extension.
    "extensions.supportVirtualWorkspaces": {
      "pub.name": false
    },
  
    // Enable web worker extension host.
    //  - true: The Web Worker Extension Host will always be launched.
    //  - false: The Web Worker Extension Host will never be launched.
    //  - auto: The Web Worker Extension Host will be launched when a web extension needs it.
    "extensions.webWorker": "auto"
  
  },
  {
    // Enable/disable the ability of smart scrolling in the output view. Smart scrolling allows you to lock scrolling automatically when you click in the output view and unlocks when you click in the last line.
    "output.smartScroll.enabled": true
  
  },
  {
    // When enabled notebook breadcrumbs contain code cells.
    "notebook.breadcrumbs.showCodeCells": true,
  
    // Controls where the focus indicator is rendered, either along the cell borders or on the left gutter
    "notebook.cellFocusIndicator": "gutter",
  
    // Where the cell toolbar should be shown, or whether it should be hidden.
    "notebook.cellToolbarLocation": {
      "default": "right"
    },
  
    // Whether the cell toolbar should appear on hover or click.
    "notebook.cellToolbarVisibility": "click",
  
    // Control whether the notebook editor should be rendered in a compact form. For example, when turned on, it will decrease the left margin width.
    "notebook.compactView": true,
  
    // Control whether outputs action should be rendered in the output toolbar.
    "notebook.consolidatedOutputButton": true,
  
    // Control whether extra actions are shown in a dropdown next to the run button.
    "notebook.consolidatedRunButton": false,
  
    // Whether to use the enhanced text diff editor for notebook.
    "notebook.diff.enablePreview": true,
  
    // Hide Metadata Differences
    "notebook.diff.ignoreMetadata": false,
  
    // Hide Outputs Differences
    "notebook.diff.ignoreOutputs": false,
  
    // Priority list for output mime types
    "notebook.displayOrder": [],
  
    // Control whether the notebook editor should allow moving cells through drag and drop.
    "notebook.dragAndDropEnabled": true,
  
    // Settings for code editors used in notebooks. This can be used to customize most editor.* settings.
    "notebook.editorOptionsCustomizations": {},
  
    // Control whether to render a global toolbar inside the notebook editor.
    "notebook.globalToolbar": true,
  
    // Control whether the actions on the notebook toolbar should render label or not.
    "notebook.globalToolbarShowLabel": true,
  
    // Control where the insert cell actions should appear.
    //  - betweenCells: A toolbar that appears on hover between cells.
    //  - notebookToolbar: The toolbar at the top of the notebook editor.
    //  - both: Both toolbars.
    //  - hidden: The insert actions don't appear anywhere.
    "notebook.insertToolbarLocation": "both",
  
    // Controls the display of line numbers in the cell editor.
    "notebook.lineNumbers": "off",
  
    // When enabled cursor can navigate to the next/previous cell when the current cursor in the cell editor is at the first/last line.
    "notebook.navigation.allowNavigateToSurroundingCells": true,
  
    // When enabled notebook outline shows code cells.
    "notebook.outline.showCodeCells": false,
  
    // Control how many lines of text in a text output is rendered.
    "notebook.output.textLineLimit": 30,
  
    // Whether the cell status bar should be shown.
    //  - hidden: The cell Status bar is always hidden.
    //  - visible: The cell Status bar is always visible.
    //  - visibleAfterExecute: The cell Status bar is hidden until the cell has executed. Then it becomes visible to show the execution status.
    "notebook.showCellStatusBar": "visible",
  
    // Controls when the Markdown header folding arrow is shown.
    //  - always: The folding controls are always visible.
    //  - mouseover: The folding controls are visible only on mouseover.
    "notebook.showFoldingControls": "mouseover",
  
    // Whether to use separate undo/redo stack for each cell.
    "notebook.undoRedoPerCell": true
  
  },
  {
    // Customizes what kind of terminal to launch.
    //  - integrated: Use VS Code's integrated terminal.
    //  - external: Use the configured external terminal.
    "terminal.explorerKind": "integrated"
  
  },
  {
    // Whether or not to allow chord keybindings in the terminal. Note that when this is true and the keystroke results in a chord it will bypass `terminal.integrated.commandsToSkipShell`, setting this to false is particularly useful when you want ctrl+k to go to your shell (not VS Code).
    "terminal.integrated.allowChords": true,
  
    // Whether to allow menubar mnemonics (eg. alt+f) to trigger the open the menubar. Note that this will cause all alt keystrokes to skip the shell when true. This does nothing on macOS.
    "terminal.integrated.allowMnemonics": false,
  
    // If enabled, alt/option + click will reposition the prompt cursor to underneath the mouse when `editor.multiCursorModifier` is set to `'alt'` (the default value). This may not work reliably depending on your shell.
    "terminal.integrated.altClickMovesCursor": true,
  
    // A path that when set will override `terminal.integrated.shell.linux` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.
    "terminal.integrated.automationShell.linux": null,
  
    // A path that when set will override `terminal.integrated.shell.osx` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.
    "terminal.integrated.automationShell.osx": null,
  
    // A path that when set will override `terminal.integrated.shell.windows` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.
    "terminal.integrated.automationShell.windows": null,
  
    // The number of milliseconds to show the bell within a terminal tab when triggered.
    "terminal.integrated.bellDuration": 1000,
  
    // A set of command IDs whose keybindings will not be sent to the shell but instead always be handled by VS Code. This allows keybindings that would normally be consumed by the shell to act instead the same as when the terminal is not focused, for example `Ctrl+P` to launch Quick Open.
    // 
    // &nbsp;
    // 
    // Many commands are skipped by default. To override a default and pass that command's keybinding to the shell instead, add the command prefixed with the `-` character. For example add `-workbench.action.quickOpen` to allow `Ctrl+P` to reach the shell.
    // 
    // &nbsp;
    // 
    // The following list of default skipped commands is truncated when viewed in Settings Editor. To see the full list, [open the default settings JSON](command:workbench.action.openRawDefaultSettings 'Open Default Settings (JSON)') and search for the first command from the list below.
    // 
    // &nbsp;
    // 
    // Default Skipped Commands:
    // 
    // - editor.action.toggleTabFocusMode
    // - notifications.hideList
    // - notifications.hideToasts
    // - workbench.action.debug.continue
    // - workbench.action.debug.pause
    // - workbench.action.debug.restart
    // - workbench.action.debug.run
    // - workbench.action.debug.start
    // - workbench.action.debug.stepInto
    // - workbench.action.debug.stepOut
    // - workbench.action.debug.stepOver
    // - workbench.action.debug.stop
    // - workbench.action.firstEditorInGroup
    // - workbench.action.focusActiveEditorGroup
    // - workbench.action.focusEighthEditorGroup
    // - workbench.action.focusFifthEditorGroup
    // - workbench.action.focusFirstEditorGroup
    // - workbench.action.focusFourthEditorGroup
    // - workbench.action.focusLastEditorGroup
    // - workbench.action.focusNextPart
    // - workbench.action.focusPreviousPart
    // - workbench.action.focusSecondEditorGroup
    // - workbench.action.focusSeventhEditorGroup
    // - workbench.action.focusSixthEditorGroup
    // - workbench.action.focusThirdEditorGroup
    // - workbench.action.lastEditorInGroup
    // - workbench.action.navigateDown
    // - workbench.action.navigateLeft
    // - workbench.action.navigateRight
    // - workbench.action.navigateUp
    // - workbench.action.nextEditor
    // - workbench.action.nextEditorInGroup
    // - workbench.action.nextPanelView
    // - workbench.action.nextSideBarView
    // - workbench.action.openNextRecentlyUsedEditor
    // - workbench.action.openNextRecentlyUsedEditorInGroup
    // - workbench.action.openPreviousRecentlyUsedEditor
    // - workbench.action.openPreviousRecentlyUsedEditorInGroup
    // - workbench.action.previousEditor
    // - workbench.action.previousEditorInGroup
    // - workbench.action.previousPanelView
    // - workbench.action.previousSideBarView
    // - workbench.action.quickOpen
    // - workbench.action.quickOpenLeastRecentlyUsedEditor
    // - workbench.action.quickOpenLeastRecentlyUsedEditorInGroup
    // - workbench.action.quickOpenPreviousEditor
    // - workbench.action.quickOpenPreviousRecentlyUsedEditor
    // - workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup
    // - workbench.action.quickOpenView
    // - workbench.action.showCommands
    // - workbench.action.tasks.build
    // - workbench.action.tasks.reRunTask
    // - workbench.action.tasks.restartTask
    // - workbench.action.tasks.runTask
    // - workbench.action.tasks.showLog
    // - workbench.action.tasks.showTasks
    // - workbench.action.tasks.terminate
    // - workbench.action.tasks.test
    // - workbench.action.terminal.clear
    // - workbench.action.terminal.clearSelection
    // - workbench.action.terminal.copySelection
    // - workbench.action.terminal.deleteToLineStart
    // - workbench.action.terminal.deleteWordLeft
    // - workbench.action.terminal.deleteWordRight
    // - workbench.action.terminal.findNext
    // - workbench.action.terminal.findPrevious
    // - workbench.action.terminal.focus
    // - workbench.action.terminal.focusAtIndex1
    // - workbench.action.terminal.focusAtIndex2
    // - workbench.action.terminal.focusAtIndex3
    // - workbench.action.terminal.focusAtIndex4
    // - workbench.action.terminal.focusAtIndex5
    // - workbench.action.terminal.focusAtIndex6
    // - workbench.action.terminal.focusAtIndex7
    // - workbench.action.terminal.focusAtIndex8
    // - workbench.action.terminal.focusAtIndex9
    // - workbench.action.terminal.focusFind
    // - workbench.action.terminal.focusNext
    // - workbench.action.terminal.focusNextPane
    // - workbench.action.terminal.focusPrevious
    // - workbench.action.terminal.focusPreviousPane
    // - workbench.action.terminal.hideFind
    // - workbench.action.terminal.kill
    // - workbench.action.terminal.killEditor
    // - workbench.action.terminal.moveToEditor
    // - workbench.action.terminal.moveToLineEnd
    // - workbench.action.terminal.moveToLineStart
    // - workbench.action.terminal.moveToTerminalPanel
    // - workbench.action.terminal.navigationModeExit
    // - workbench.action.terminal.navigationModeFocusNext
    // - workbench.action.terminal.navigationModeFocusPrevious
    // - workbench.action.terminal.new
    // - workbench.action.terminal.newInActiveWorkspace
    // - workbench.action.terminal.paste
    // - workbench.action.terminal.pasteSelection
    // - workbench.action.terminal.resizePaneDown
    // - workbench.action.terminal.resizePaneLeft
    // - workbench.action.terminal.resizePaneRight
    // - workbench.action.terminal.resizePaneUp
    // - workbench.action.terminal.runActiveFile
    // - workbench.action.terminal.runSelectedText
    // - workbench.action.terminal.scrollDown
    // - workbench.action.terminal.scrollDownPage
    // - workbench.action.terminal.scrollToBottom
    // - workbench.action.terminal.scrollToNextCommand
    // - workbench.action.terminal.scrollToPreviousCommand
    // - workbench.action.terminal.scrollToTop
    // - workbench.action.terminal.scrollUp
    // - workbench.action.terminal.scrollUpPage
    // - workbench.action.terminal.selectAll
    // - workbench.action.terminal.selectToNextCommand
    // - workbench.action.terminal.selectToNextLine
    // - workbench.action.terminal.selectToPreviousCommand
    // - workbench.action.terminal.selectToPreviousLine
    // - workbench.action.terminal.sendSequence
    // - workbench.action.terminal.sizeToContentWidth
    // - workbench.action.terminal.split
    // - workbench.action.terminal.splitInActiveWorkspace
    // - workbench.action.terminal.toggleFindCaseSensitive
    // - workbench.action.terminal.toggleFindRegex
    // - workbench.action.terminal.toggleFindWholeWord
    // - workbench.action.terminal.toggleTerminal
    // - workbench.action.toggleFullScreen
    // - workbench.action.toggleMaximizedPanel
    // - workbench.action.togglePanel
    "terminal.integrated.commandsToSkipShell": [],
  
    // Controls whether to confirm when the window closes if there are active terminal sessions.
    //  - never: Never confirm.
    //  - always: Always confirm if there are terminals.
    //  - hasChildProcesses: Confirm if there are any terminals that have child processes.
    "terminal.integrated.confirmOnExit": "never",
  
    // Controls whether to confirm killing terminals when they have child processes. When set to editor, terminals in the editor area will be marked as changed when they have child processes. Note that child process detection may not work well for shells like Git Bash which don't run their processes as child processes of the shell.
    //  - never: Never confirm.
    //  - editor: Confirm if the terminal is in the editor.
    //  - panel: Confirm if the terminal is in the panel.
    //  - always: Confirm if the terminal is either in the editor or panel.
    "terminal.integrated.confirmOnKill": "editor",
  
    // Controls whether text selected in the terminal will be copied to the clipboard.
    "terminal.integrated.copyOnSelection": false,
  
    // Controls whether the terminal cursor blinks.
    "terminal.integrated.cursorBlinking": false,
  
    // Controls the style of terminal cursor.
    "terminal.integrated.cursorStyle": "block",
  
    // Controls the width of the cursor when `terminal.integrated.cursorStyle` is set to `line`.
    "terminal.integrated.cursorWidth": 1,
  
    // Whether to draw custom glyphs for block element and box drawing characters instead of using the font, which typically yields better rendering with continuous lines. Note that this doesn't work with the DOM renderer
    "terminal.integrated.customGlyphs": true,
  
    // An explicit start path where the terminal will be launched, this is used as the current working directory (cwd) for the shell process. This may be particularly useful in workspace settings if the root directory is not a convenient cwd.
    "terminal.integrated.cwd": "",
  
    // Controls where newly created terminals will appear.
    //  - editor: Create terminals in the editor
    //  - view: Create terminals in the terminal view
    "terminal.integrated.defaultLocation": "view",
  
    // The default profile used on Linux. This setting will currently be ignored if either `terminal.integrated.shell.linux` or `terminal.integrated.shellArgs.linux` are set.
    "terminal.integrated.defaultProfile.linux": null,
  
    // The default profile used on macOS. This setting will currently be ignored if either `terminal.integrated.shell.osx` or `terminal.integrated.shellArgs.osx` are set.
    "terminal.integrated.defaultProfile.osx": null,
  
    // The default profile used on Windows. This setting will currently be ignored if either `terminal.integrated.shell.windows` or `terminal.integrated.shellArgs.windows` are set.
    //  - PowerShell: $(terminal-powershell) PowerShell
    // - path: C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe
    //  - Command Prompt: $(terminal-cmd) Command Prompt
    // - path: C:\WINDOWS\System32\cmd.exe
    // - args: []
    //  - Git Bash: $(terminal) Git Bash
    // - path: C:\Program Files\Git\bin\bash.exe
    // - args: ['--login']
    //  - JavaScript Debug Terminal: $($(debug)) JavaScript Debug Terminal
    // - extensionIdenfifier: ms-vscode.js-debug
    "terminal.integrated.defaultProfile.windows": null,
  
    // Controls whether to detect and set the `$LANG` environment variable to a UTF-8 compliant option since VS Code's terminal only supports UTF-8 encoded data coming from the shell.
    //  - auto: Set the `$LANG` environment variable if the existing variable does not exist or it does not end in `'.UTF-8'`.
    //  - off: Do not set the `$LANG` environment variable.
    //  - on: Always set the `$LANG` environment variable.
    "terminal.integrated.detectLocale": "auto",
  
    // Controls whether bold text in the terminal will always use the "bright" ANSI color variant.
    "terminal.integrated.drawBoldTextInBrightColors": true,
  
    // Controls whether the terminal bell is enabled, this shows up as a visual bell next to the terminal's name.
    "terminal.integrated.enableBell": false,
  
    // Whether to enable file links in the terminal. Links can be slow when working on a network drive in particular because each file link is verified against the file system. Changing this will take effect only in new terminals.
    "terminal.integrated.enableFileLinks": true,
  
    // Persist terminal sessions for the workspace across window reloads.
    "terminal.integrated.enablePersistentSessions": true,
  
    // Object with environment variables that will be added to the VS Code process to be used by the terminal on Linux. Set to `null` to delete the environment variable.
    "terminal.integrated.env.linux": {},
  
    // Object with environment variables that will be added to the VS Code process to be used by the terminal on macOS. Set to `null` to delete the environment variable.
    "terminal.integrated.env.osx": {},
  
    // Object with environment variables that will be added to the VS Code process to be used by the terminal on Windows. Set to `null` to delete the environment variable.
    "terminal.integrated.env.windows": {},
  
    // Whether to display the environment changes indicator on each terminal which explains whether extensions have made, or want to make changes to the terminal's environment.
    //  - off: Disable the indicator.
    //  - on: Enable the indicator.
    //  - warnonly: Only show the warning indicator when a terminal's environment is 'stale', not the information indicator that shows a terminal has had its environment modified by an extension.
    "terminal.integrated.environmentChangesIndicator": "warnonly",
  
    // Whether to relaunch terminals automatically if extension want to contribute to their environment and have not been interacted with yet.
    "terminal.integrated.environmentChangesRelaunch": true,
  
    // An experimental setting that aims to improve link detection in the terminal by improving when links are detected and by enabling shared link detection with the editor. Currently this only supports web links.
    "terminal.integrated.experimentalLinkProvider": true,
  
    // Scrolling speed multiplier when pressing `Alt`.
    "terminal.integrated.fastScrollSensitivity": 5,
  
    // Controls the font family of the terminal, this defaults to `editor.fontFamily`'s value.
    "terminal.integrated.fontFamily": "",
  
    // Controls the font size in pixels of the terminal.
    "terminal.integrated.fontSize": 14,
  
    // The font weight to use within the terminal for non-bold text. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
    "terminal.integrated.fontWeight": "normal",
  
    // The font weight to use within the terminal for bold text. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
    "terminal.integrated.fontWeightBold": "bold",
  
    // Controls whether the terminal will leverage the GPU to do its rendering.
    //  - auto: Let VS Code detect which renderer will give the best experience.
    //  - on: Enable GPU acceleration within the terminal.
    //  - off: Disable GPU acceleration within the terminal.
    //  - canvas: Use the fallback canvas renderer within the terminal. This uses a 2d context instead of webgl and may be better on some systems.
    "terminal.integrated.gpuAcceleration": "auto",
  
    // Configurable to provide a custom setting to ignore processes
    "terminal.integrated.ignoreProcessNames": [
      "starship",
      "oh-my-posh",
      "bash",
      "zsh"
    ],
  
    // Controls the letter spacing of the terminal, this is an integer value which represents the amount of additional pixels to add between characters.
    "terminal.integrated.letterSpacing": 0,
  
    // Controls the line height of the terminal, this number is multiplied by the terminal font size to get the actual line-height in pixels.
    "terminal.integrated.lineHeight": 1,
  
    // Experimental: local echo will be disabled when any of these program names are found in the terminal title.
    "terminal.integrated.localEchoExcludePrograms": [
      "vim",
      "vi",
      "nano",
      "tmux"
    ],
  
    // Experimental: length of network delay, in milliseconds, where local edits will be echoed on the terminal without waiting for server acknowledgement. If '0', local echo will always be on, and if '-1' it will be disabled.
    "terminal.integrated.localEchoLatencyThreshold": 30,
  
    // Experimental: terminal style of locally echoed text; either a font style or an RGB color.
    "terminal.integrated.localEchoStyle": "dim",
  
    // Controls whether to force selection when using Option+click on macOS. This will force a regular (line) selection and disallow the use of column selection mode. This enables copying and pasting using the regular terminal selection, for example, when mouse mode is enabled in tmux.
    "terminal.integrated.macOptionClickForcesSelection": false,
  
    // Controls whether to treat the option key as the meta key in the terminal on macOS.
    "terminal.integrated.macOptionIsMeta": false,
  
    // When set the foreground color of each cell will change to try meet the contrast ratio specified. Example values:
    // 
    // - 1: The default, do nothing.
    // - 4.5: [WCAG AA compliance (minimum)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html).
    // - 7: [WCAG AAA compliance (enhanced)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html).
    // - 21: White on black or black on white.
    "terminal.integrated.minimumContrastRatio": 1,
  
    // A multiplier to be used on the `deltaY` of mouse wheel scroll events.
    "terminal.integrated.mouseWheelScrollSensitivity": 1,
  
    // When the terminal process must be shutdown (eg. on window or application close), this determines when the previous terminal session contents should be restored and processes be recreated when the workspace is next opened. Restoring of the process current working directory depends on whether it is supported by the shell.
    //  - onExit: Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu).
    //  - onExitAndWindowClose: Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), or when the window is closed.
    //  - never: Never restore the terminal buffers or recreate the process.
    "terminal.integrated.persistentSessionReviveProcess": "onExit",
  
    // The Linux profiles to present when creating a new terminal via the terminal dropdown. Set the `path` property manually with an optional `args`.
    // 
    // Set an existing profile to `null` to hide the profile from the list, for example: `"bash": null`.
    "terminal.integrated.profiles.linux": {
      "bash": {
        "path": "bash",
        "icon": "terminal-bash"
      },
      "zsh": {
        "path": "zsh"
      },
      "fish": {
        "path": "fish"
      },
      "tmux": {
        "path": "tmux",
        "icon": "terminal-tmux"
      },
      "pwsh": {
        "path": "pwsh",
        "icon": "terminal-powershell"
      }
    },
  
    // The macOS profiles to present when creating a new terminal via the terminal dropdown. Set the `path` property manually with an optional `args`.
    // 
    // Set an existing profile to `null` to hide the profile from the list, for example: `"bash": null`.
    "terminal.integrated.profiles.osx": {
      "bash": {
        "path": "bash",
        "args": [
          "-l"
        ],
        "icon": "terminal-bash"
      },
      "zsh": {
        "path": "zsh",
        "args": [
          "-l"
        ]
      },
      "fish": {
        "path": "fish",
        "args": [
          "-l"
        ]
      },
      "tmux": {
        "path": "tmux",
        "icon": "terminal-tmux"
      },
      "pwsh": {
        "path": "pwsh",
        "icon": "terminal-powershell"
      }
    },
  
    // The Windows profiles to present when creating a new terminal via the terminal dropdown. Use the `source` property to automatically detect the shell's location. Or set the `path` property manually with an optional `args`.
    // 
    // Set an existing profile to `null` to hide the profile from the list, for example: `"Ubuntu-20.04 (WSL)": null`.
    "terminal.integrated.profiles.windows": {
      "PowerShell": {
        "source": "PowerShell",
        "icon": "terminal-powershell"
      },
      "Command Prompt": {
        "path": [
          "${env:windir}\\Sysnative\\cmd.exe",
          "${env:windir}\\System32\\cmd.exe"
        ],
        "args": [],
        "icon": "terminal-cmd"
      },
      "Git Bash": {
        "source": "Git Bash"
      }
    },
  
    // Controls how terminal reacts to right click.
    //  - default: Show the context menu.
    //  - copyPaste: Copy when there is a selection, otherwise paste.
    //  - paste: Paste on right click.
    //  - selectWord: Select the word under the cursor and show the context menu.
    "terminal.integrated.rightClickBehavior": "copyPaste",
  
    // Controls the maximum amount of lines the terminal keeps in its buffer.
    "terminal.integrated.scrollback": 1000,
  
    // Dispatches most keybindings to the terminal instead of the workbench, overriding `terminal.integrated.commandsToSkipShell`, which can be used alternatively for fine tuning.
    "terminal.integrated.sendKeybindingsToShell": false,
  
    // This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.linux#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.linux`. This will currently take priority over the new profiles settings but that will change in the future.
    // The path of the shell that the terminal uses on Linux. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
    "terminal.integrated.shell.linux": null,
  
    // This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.osx#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.osx`. This will currently take priority over the new profiles settings but that will change in the future.
    // The path of the shell that the terminal uses on macOS. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
    "terminal.integrated.shell.osx": null,
  
    // This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.windows#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.windows`. This will currently take priority over the new profiles settings but that will change in the future.
    // The path of the shell that the terminal uses on Windows. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
    "terminal.integrated.shell.windows": null,
  
    // This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.linux#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.linux`. This will currently take priority over the new profiles settings but that will change in the future.
    // The command line arguments to use when on the Linux terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
    "terminal.integrated.shellArgs.linux": [],
  
    // This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.osx#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.osx`. This will currently take priority over the new profiles settings but that will change in the future.
    // The command line arguments to use when on the macOS terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
    "terminal.integrated.shellArgs.osx": [
      "-l"
    ],
  
    // This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.windows#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.windows`. This will currently take priority over the new profiles settings but that will change in the future.
    // The command line arguments to use when on the Windows terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
    "terminal.integrated.shellArgs.windows": [],
  
    // Controls whether to show the alert "The terminal process terminated with exit code" when exit code is non-zero.
    "terminal.integrated.showExitAlert": true,
  
    // Controls the working directory a split terminal starts with.
    //  - workspaceRoot: A new split terminal will use the workspace root as the working directory. In a multi-root workspace a choice for which root folder to use is offered.
    //  - initial: A new split terminal will use the working directory that the parent terminal started with.
    //  - inherited: On macOS and Linux, a new split terminal will use the working directory of the parent terminal. On Windows, this behaves the same as initial.
    "terminal.integrated.splitCwd": "inherited",
  
    // Controls the terminal description, which appears to the right of the title. Variables are substituted based on the context:
    // - `${cwd}`: the terminal's current working directory
    // - `${cwdFolder}`: the terminal's current working directory, displayed for multi-root workspaces or in a single root workspace when the value differs from the initial working directory. This will not be displayed for Windows.
    // - `${workspaceFolder}`: the workspace in which the terminal was launched
    // - `${local}`: indicates a local terminal in a remote workspace
    // - `${process}`: the name of the terminal process
    // - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
    // - `${sequence}`: the name provided to xterm.js by the process
    // - `${task}`: indicates this terminal is associated with a task
    "terminal.integrated.tabs.description": "${task}${separator}${local}${separator}${cwdFolder}",
  
    // Controls whether terminal tab statuses support animation (eg. in progress tasks).
    "terminal.integrated.tabs.enableAnimation": true,
  
    // Controls whether terminal tabs display as a list to the side of the terminal. When this is disabled a dropdown will display instead.
    "terminal.integrated.tabs.enabled": true,
  
    // Controls whether focusing the terminal of a tab happens on double or single click.
    //  - singleClick: Focus the terminal when clicking a terminal tab
    //  - doubleClick: Focus the terminal when double clicking a terminal tab
    "terminal.integrated.tabs.focusMode": "doubleClick",
  
    // Controls whether the terminal tabs view will hide under certain conditions.
    //  - never: Never hide the terminal tabs view
    //  - singleTerminal: Hide the terminal tabs view when there is only a single terminal opened
    //  - singleGroup: Hide the terminal tabs view when there is only a single terminal group opened
    "terminal.integrated.tabs.hideCondition": "singleTerminal",
  
    // Controls the location of the terminal tabs, either to the left or right of the actual terminal(s).
    //  - left: Show the terminal tabs view to the left of the terminal
    //  - right: Show the terminal tabs view to the right of the terminal
    "terminal.integrated.tabs.location": "right",
  
    // Separator used by `terminal.integrated.title` and `terminal.integrated.description`.
    "terminal.integrated.tabs.separator": " - ",
  
    // Controls whether terminal split and kill buttons are displays next to the new terminal button.
    //  - always: Always show the actions
    //  - singleTerminal: Show the actions when it is the only terminal opened
    //  - singleTerminalOrNarrow: Show the actions when it is the only terminal opened or when the tabs view is in its narrow textless state
    //  - never: Never show the actions
    "terminal.integrated.tabs.showActions": "singleTerminalOrNarrow",
  
    // Shows the active terminal information in the view, this is particularly useful when the title within the tabs aren't visible.
    //  - always: Always show the active terminal
    //  - singleTerminal: Show the active terminal when it is the only terminal opened
    //  - singleTerminalOrNarrow: Show the active terminal when it is the only terminal opened or when the tabs view is in its narrow textless state
    //  - never: Never show the active terminal
    "terminal.integrated.tabs.showActiveTerminal": "singleTerminalOrNarrow",
  
    // Controls the terminal title. Variables are substituted based on the context:
    // - `${cwd}`: the terminal's current working directory
    // - `${cwdFolder}`: the terminal's current working directory, displayed for multi-root workspaces or in a single root workspace when the value differs from the initial working directory. This will not be displayed for Windows.
    // - `${workspaceFolder}`: the workspace in which the terminal was launched
    // - `${local}`: indicates a local terminal in a remote workspace
    // - `${process}`: the name of the terminal process
    // - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
    // - `${sequence}`: the name provided to xterm.js by the process
    // - `${task}`: indicates this terminal is associated with a task
    "terminal.integrated.tabs.title": "${process}",
  
    // Controls what version of unicode to use when evaluating the width of characters in the terminal. If you experience emoji or other wide characters not taking up the right amount of space or backspace either deleting too much or too little then you may want to try tweaking this setting.
    //  - 6: Version 6 of unicode, this is an older version which should work better on older systems.
    //  - 11: Version 11 of unicode, this version provides better support on modern systems that use modern versions of unicode.
    "terminal.integrated.unicodeVersion": "11",
  
    // Controls whether or not WSL distros are shown in the terminal dropdown
    "terminal.integrated.useWslProfiles": true,
  
    // Whether to use ConPTY for Windows terminal process communication (requires Windows 10 build number 18309+). Winpty will be used if this is false.
    "terminal.integrated.windowsEnableConpty": true,
  
    // A string containing all characters to be considered word separators by the double click to select word feature.
    "terminal.integrated.wordSeparators": " ()[]{}',\"`─‘’"
  
  },
  {
    // Controls enablement of `provideTasks` for all task provider extension. If the Tasks: Run Task command is slow, disabling auto detect for task providers may help. Individual extensions may also provide settings that disable auto detection.
    "task.autoDetect": "on",
  
    // Configures whether to show the problem matcher prompt when running a task. Set to `true` to never prompt, or use a dictionary of task types to turn off prompting only for specific task types.
    "task.problemMatchers.neverPrompt": false,
  
    // Controls whether to show the task detail for tasks that have a detail in task quick picks, such as Run Task.
    "task.quickOpen.detail": true,
  
    // Controls the number of recent items tracked in task quick open dialog.
    "task.quickOpen.history": 30,
  
    // Causes the Tasks: Run Task command to use the slower "show all" behavior instead of the faster two level picker where tasks are grouped by provider.
    "task.quickOpen.showAll": false,
  
    // Controls whether the task quick pick is skipped when there is only one task to pick from.
    "task.quickOpen.skip": false,
  
    // Save all dirty editors before running a task.
    //  - always: Always saves all editors before running.
    //  - never: Never saves editors before running.
    //  - prompt: Prompts whether to save editors before running.
    "task.saveBeforeRun": "always",
  
    // Configures whether a warning is shown when a provider is slow
    "task.slowProviderWarning": true
  
  },
  {
    // Controls whether Problems view should automatically reveal files when opening them.
    "problems.autoReveal": true,
  
    // Show Errors & Warnings on files and folder.
    "problems.decorations.enabled": true,
  
    // When enabled shows the current problem in the status bar.
    "problems.showCurrentInStatus": false
  
  },
  {
    // Enable/disable navigation breadcrumbs.
    "breadcrumbs.enabled": true,
  
    // Controls whether and how file paths are shown in the breadcrumbs view.
    //  - on: Show the file path in the breadcrumbs view.
    //  - off: Do not show the file path in the breadcrumbs view.
    //  - last: Only show the last element of the file path in the breadcrumbs view.
    "breadcrumbs.filePath": "on",
  
    // Render breadcrumb items with icons.
    "breadcrumbs.icons": true,
  
    // When enabled breadcrumbs show `array`-symbols.
    "breadcrumbs.showArrays": true,
  
    // When enabled breadcrumbs show `boolean`-symbols.
    "breadcrumbs.showBooleans": true,
  
    // When enabled breadcrumbs show `class`-symbols.
    "breadcrumbs.showClasses": true,
  
    // When enabled breadcrumbs show `constant`-symbols.
    "breadcrumbs.showConstants": true,
  
    // When enabled breadcrumbs show `constructor`-symbols.
    "breadcrumbs.showConstructors": true,
  
    // When enabled breadcrumbs show `enumMember`-symbols.
    "breadcrumbs.showEnumMembers": true,
  
    // When enabled breadcrumbs show `enum`-symbols.
    "breadcrumbs.showEnums": true,
  
    // When enabled breadcrumbs show `event`-symbols.
    "breadcrumbs.showEvents": true,
  
    // When enabled breadcrumbs show `field`-symbols.
    "breadcrumbs.showFields": true,
  
    // When enabled breadcrumbs show `file`-symbols.
    "breadcrumbs.showFiles": true,
  
    // When enabled breadcrumbs show `function`-symbols.
    "breadcrumbs.showFunctions": true,
  
    // When enabled breadcrumbs show `interface`-symbols.
    "breadcrumbs.showInterfaces": true,
  
    // When enabled breadcrumbs show `key`-symbols.
    "breadcrumbs.showKeys": true,
  
    // When enabled breadcrumbs show `method`-symbols.
    "breadcrumbs.showMethods": true,
  
    // When enabled breadcrumbs show `module`-symbols.
    "breadcrumbs.showModules": true,
  
    // When enabled breadcrumbs show `namespace`-symbols.
    "breadcrumbs.showNamespaces": true,
  
    // When enabled breadcrumbs show `null`-symbols.
    "breadcrumbs.showNull": true,
  
    // When enabled breadcrumbs show `number`-symbols.
    "breadcrumbs.showNumbers": true,
  
    // When enabled breadcrumbs show `object`-symbols.
    "breadcrumbs.showObjects": true,
  
    // When enabled breadcrumbs show `operator`-symbols.
    "breadcrumbs.showOperators": true,
  
    // When enabled breadcrumbs show `package`-symbols.
    "breadcrumbs.showPackages": true,
  
    // When enabled breadcrumbs show `property`-symbols.
    "breadcrumbs.showProperties": true,
  
    // When enabled breadcrumbs show `string`-symbols.
    "breadcrumbs.showStrings": true,
  
    // When enabled breadcrumbs show `struct`-symbols.
    "breadcrumbs.showStructs": true,
  
    // When enabled breadcrumbs show `typeParameter`-symbols.
    "breadcrumbs.showTypeParameters": true,
  
    // When enabled breadcrumbs show `variable`-symbols.
    "breadcrumbs.showVariables": true,
  
    // Controls whether and how symbols are shown in the breadcrumbs view.
    //  - on: Show all symbols in the breadcrumbs view.
    //  - off: Do not show symbols in the breadcrumbs view.
    //  - last: Only show the current symbol in the breadcrumbs view.
    "breadcrumbs.symbolPath": "on",
  
    // Controls how symbols are sorted in the breadcrumbs outline view.
    //  - position: Show symbol outline in file position order.
    //  - name: Show symbol outline in alphabetical order.
    //  - type: Show symbol outline in symbol type order.
    "breadcrumbs.symbolSortOrder": "position"
  
  },
  {
    // If this setting is false, no telemetry will be sent regardless of the new setting's value. Deprecated due to being combined into the `telemetry.telemetryLevel` setting.
    // Enable crash reports to be collected. This helps us improve stability. 
    // This option requires restart to take effect.
    "telemetry.enableCrashReporter": true
  
  },
  {
    // Render Outline Elements with Icons.
    "outline.icons": true,
  
    // Use badges for Errors & Warnings.
    "outline.problems.badges": true,
  
    // Use colors for Errors & Warnings.
    "outline.problems.colors": true,
  
    // Show Errors & Warnings on Outline Elements.
    "outline.problems.enabled": true,
  
    // When enabled outline shows `array`-symbols.
    "outline.showArrays": true,
  
    // When enabled outline shows `boolean`-symbols.
    "outline.showBooleans": true,
  
    // When enabled outline shows `class`-symbols.
    "outline.showClasses": true,
  
    // When enabled outline shows `constant`-symbols.
    "outline.showConstants": true,
  
    // When enabled outline shows `constructor`-symbols.
    "outline.showConstructors": true,
  
    // When enabled outline shows `enumMember`-symbols.
    "outline.showEnumMembers": true,
  
    // When enabled outline shows `enum`-symbols.
    "outline.showEnums": true,
  
    // When enabled outline shows `event`-symbols.
    "outline.showEvents": true,
  
    // When enabled outline shows `field`-symbols.
    "outline.showFields": true,
  
    // When enabled outline shows `file`-symbols.
    "outline.showFiles": true,
  
    // When enabled outline shows `function`-symbols.
    "outline.showFunctions": true,
  
    // When enabled outline shows `interface`-symbols.
    "outline.showInterfaces": true,
  
    // When enabled outline shows `key`-symbols.
    "outline.showKeys": true,
  
    // When enabled outline shows `method`-symbols.
    "outline.showMethods": true,
  
    // When enabled outline shows `module`-symbols.
    "outline.showModules": true,
  
    // When enabled outline shows `namespace`-symbols.
    "outline.showNamespaces": true,
  
    // When enabled outline shows `null`-symbols.
    "outline.showNull": true,
  
    // When enabled outline shows `number`-symbols.
    "outline.showNumbers": true,
  
    // When enabled outline shows `object`-symbols.
    "outline.showObjects": true,
  
    // When enabled outline shows `operator`-symbols.
    "outline.showOperators": true,
  
    // When enabled outline shows `package`-symbols.
    "outline.showPackages": true,
  
    // When enabled outline shows `property`-symbols.
    "outline.showProperties": true,
  
    // When enabled outline shows `string`-symbols.
    "outline.showStrings": true,
  
    // When enabled outline shows `struct`-symbols.
    "outline.showStructs": true,
  
    // When enabled outline shows `typeParameter`-symbols.
    "outline.showTypeParameters": true,
  
    // When enabled outline shows `variable`-symbols.
    "outline.showVariables": true
  
  },
  {
    // An array of Timeline sources that should be excluded from the Timeline view.
    "timeline.excludeSources": null,
  
    // Experimental. Controls whether the Timeline view will load the next page of items when you scroll to the end of the list.
    "timeline.pageOnScroll": false,
  
    // The number of items to show in the Timeline view by default and when loading more items. Setting to `null` (the default) will automatically choose a page size based on the visible area of the Timeline view.
    "timeline.pageSize": null
  
  },
  {
    // Configure settings to be overridden for [c] language.
    "[c]":  {
      "editor.wordBasedSuggestions": false,
      "editor.suggest.insertMode": "replace",
      "editor.semanticHighlighting.enabled": true
    },
  
    // Configure settings to be overridden for [cfml] language.
    "[cfml]":  {
      "editor.suggest.snippetsPreventQuickSuggestions": false
    },
  
    // Configure settings to be overridden for [cpp] language.
    "[cpp]":  {
      "editor.wordBasedSuggestions": false,
      "editor.suggest.insertMode": "replace",
      "editor.semanticHighlighting.enabled": true
    },
  
    // Configure settings to be overridden for [css] language.
    "[css]":  {
      "editor.suggest.insertMode": "replace"
    },
  
    // Configure settings to be overridden for [cuda-cpp] language.
    "[cuda-cpp]":  {
      "editor.wordBasedSuggestions": false,
      "editor.suggest.insertMode": "replace",
      "editor.semanticHighlighting.enabled": true
    },
  
    // Configure settings to be overridden for [dockercompose] language.
    "[dockercompose]":  {
      "editor.insertSpaces": true,
      "editor.tabSize": 2,
      "editor.autoIndent": "advanced"
    },
  
    // Configure settings to be overridden for [dockerfile] language.
    "[dockerfile]":  {
      "editor.quickSuggestions": {
          "strings": true
      }
    },
  
    // Configure settings to be overridden for [git-commit] language.
    "[git-commit]":  {
      "editor.rulers": [
          72
      ],
      "workbench.editor.restoreViewState": false
    },
  
    // Configure settings to be overridden for [git-rebase] language.
    "[git-rebase]":  {
      "workbench.editor.restoreViewState": false
    },
  
    // Configure settings to be overridden for [go] language.
    "[go]":  {
      "editor.insertSpaces": false
    },
  
    // Configure settings to be overridden for [handlebars] language.
    "[handlebars]":  {
      "editor.suggest.insertMode": "replace"
    },
  
    // Configure settings to be overridden for [html] language.
    "[html]":  {
      "editor.suggest.insertMode": "replace"
    },
  
    // Configure settings to be overridden for [javascript] language.
    "[javascript]":  {
      "editor.maxTokenizationLineLength": 2500
    },
  
    // Configure settings to be overridden for [json] language.
    "[json]":  {
      "editor.quickSuggestions": {
          "strings": true
      },
      "editor.suggest.insertMode": "replace"
    },
  
    // Configure settings to be overridden for [jsonc] language.
    "[jsonc]":  {
      "editor.quickSuggestions": {
          "strings": true
      },
      "editor.suggest.insertMode": "replace"
    },
  
    // Configure settings to be overridden for [less] language.
    "[less]":  {
      "editor.suggest.insertMode": "replace"
    },
  
    // Configure settings to be overridden for [Log] language.
    "[Log]":  {
      "editor.wordWrap": "off"
    },
  
    // Configure settings to be overridden for [makefile] language.
    "[makefile]":  {
      "editor.insertSpaces": false
    },
  
    // Configure settings to be overridden for [markdown] language.
    "[markdown]":  {
      "editor.wordWrap": "on",
      "editor.quickSuggestions": false
    },
  
    // Configure settings to be overridden for [python] language.
    "[python]":  {
      "editor.wordBasedSuggestions": false
    },
  
    // Configure settings to be overridden for [scss] language.
    "[scss]":  {
      "editor.suggest.insertMode": "replace"
    },
  
    // Configure settings to be overridden for [search-result] language.
    "[search-result]":  {
      "editor.lineNumbers": "off"
    },
  
    // Configure settings to be overridden for [shellscript] language.
    "[shellscript]":  {
      "files.eol": "\n"
    },
  
    // Configure settings to be overridden for [yaml] language.
    "[yaml]":  {
      "editor.insertSpaces": true,
      "editor.tabSize": 2,
      "editor.autoIndent": "advanced"
    }
  
  },
  {
    // When enabled, new running processes are detected and ports that they listen on are automatically forwarded. Disabling this setting will not prevent all ports from being forwarded. Even when disabled, extensions will still be able to cause ports to be forwarded, and opening some URLs will still cause ports to forwarded.
    "remote.autoForwardPorts": true,
  
    // Sets the source from which ports are automatically forwarded when `remote.autoForwardPorts` is true. On Windows and Mac remotes, the `process` option has no effect and `output` will be used. Requires a reload to take effect.
    //  - process: Ports will be automatically forwarded when discovered by watching for processes that are started and include a port.
    //  - output: Ports will be automatically forwarded when discovered by reading terminal and debug output. Not all processes that use ports will print to the integrated terminal or debug console, so some ports will be missed. Ports forwarded based on output will not be "un-forwarded" until reload or until the port is closed by the user in the Ports view.
    "remote.autoForwardPortsSource": "process",
  
    // When enabled extensions are downloaded locally and installed on remote.
    "remote.downloadExtensionsLocally": false,
  
    // Override the kind of an extension. `ui` extensions are installed and run on the local machine while `workspace` extensions are run on the remote. By overriding an extension's default kind using this setting, you specify if that extension should be installed and enabled locally or remotely.
    "remote.extensionKind": {
      "pub.name": [
        "ui"
      ]
    },
  
    // Specifies the local host name that will be used for port forwarding.
    "remote.localPortHost": "localhost",
  
    // Set default properties that are applied to all ports that don't get properties from the setting `remote.portsAttributes`. For example:
    // 
    // ```
    // {
    //   "onAutoForward": "ignore"
    // }
    // ```
    "remote.otherPortsAttributes": {},
  
    // Set properties that are applied when a specific port number is forwarded. For example:
    // 
    // ```
    // "3000": {
    //   "label": "Application"
    // },
    // "40000-55000": {
    //   "onAutoForward": "ignore"
    // },
    // ".+\\/server.js": {
    //  "onAutoForward": "openPreview"
    // }
    // ```
    "remote.portsAttributes": {
      "443": {
        "protocol": "https"
      },
      "8443": {
        "protocol": "https"
      }
    },
  
    // Restores the ports you forwarded in a workspace.
    "remote.restoreForwardedPorts": true
  
  },
  {
    // An array of languages where Emmet abbreviations should not be expanded.
    "emmet.excludeLanguages": [
      "markdown"
    ],
  
    // An array of paths, where each path can contain Emmet syntaxProfiles and/or snippet files.
    // In case of conflicts, the profiles/snippets of later paths will override those of earlier paths.
    // See https://code.visualstudio.com/docs/editor/emmet for more information and an example snippet file.
    "emmet.extensionsPath": [],
  
    // Enable Emmet abbreviations in languages that are not supported by default. Add a mapping here between the language and Emmet supported language.
    //  For example: `{"vue-html": "html", "javascript": "javascriptreact"}`
    "emmet.includeLanguages": {},
  
    // When set to `false`, the whole file is parsed to determine if current position is valid for expanding Emmet abbreviations. When set to `true`, only the content around the current position in CSS/SCSS/Less files is parsed.
    "emmet.optimizeStylesheetParsing": true,
  
    // Preferences used to modify behavior of some actions and resolvers of Emmet.
    "emmet.preferences": {},
  
    // Shows possible Emmet abbreviations as suggestions. Not applicable in stylesheets or when emmet.showExpandedAbbreviation is set to `"never"`.
    "emmet.showAbbreviationSuggestions": true,
  
    // Shows expanded Emmet abbreviations as suggestions.
    // The option `"inMarkupAndStylesheetFilesOnly"` applies to html, haml, jade, slim, xml, xsl, css, scss, sass, less and stylus.
    // The option `"always"` applies to all parts of the file regardless of markup/css.
    "emmet.showExpandedAbbreviation": "always",
  
    // If `true`, then Emmet suggestions will show up as snippets allowing you to order them as per `editor.snippetSuggestions` setting.
    "emmet.showSuggestionsAsSnippets": false,
  
    // Define profile for specified syntax or use your own profile with specific rules.
    "emmet.syntaxProfiles": {},
  
    // When enabled, Emmet abbreviations are expanded when pressing TAB.
    "emmet.triggerExpansionOnTab": false,
  
    // Variables to be used in Emmet snippets.
    "emmet.variables": {}
  
  },
  {
    // Controls whether force push (with or without lease) is enabled.
    "git.allowForcePush": false,
  
    // Controls whether commits without running pre-commit and commit-msg hooks are allowed.
    "git.allowNoVerifyCommit": false,
  
    // Always show the Staged Changes resource group.
    "git.alwaysShowStagedChangesResourceGroup": false,
  
    // Controls the signoff flag for all commits.
    "git.alwaysSignOff": false,
  
    // When set to true, commits will automatically be fetched from the default remote of the current Git repository. Setting to `all` will fetch from all remotes.
    "git.autofetch": false,
  
    // Duration in seconds between each automatic git fetch, when `git.autofetch` is enabled.
    "git.autofetchPeriod": 180,
  
    // Whether auto refreshing is enabled.
    "git.autorefresh": true,
  
    // Configures when repositories should be automatically detected.
    //  - true: Scan for both subfolders of the current opened folder and parent folders of open files.
    //  - false: Disable automatic repository scanning.
    //  - subFolders: Scan for subfolders of the currently opened folder.
    //  - openEditors: Scan for parent folders of open files.
    "git.autoRepositoryDetection": true,
  
    // Stash any changes before pulling and restore them after successful pull.
    "git.autoStash": false,
  
    // Controls the sort order for branches.
    "git.branchSortOrder": "committerdate",
  
    // A regular expression to validate new branch names.
    "git.branchValidationRegex": "",
  
    // The character to replace whitespace in new branch names.
    "git.branchWhitespaceChar": "-",
  
    // Controls what type of git refs are listed when running `Checkout to...`.
    //  - local: Local branches
    //  - tags: Tags
    //  - remote: Remote branches
    "git.checkoutType": [
      "local",
      "remote",
      "tags"
    ],
  
    // Always confirm the creation of empty commits for the 'Git: Commit Empty' command.
    "git.confirmEmptyCommits": true,
  
    // Controls whether to ask for confirmation before force-pushing.
    "git.confirmForcePush": true,
  
    // Controls whether to ask for confirmation before committing without verification.
    "git.confirmNoVerifyCommit": true,
  
    // Confirm before synchronizing git repositories.
    "git.confirmSync": true,
  
    // Controls the Git count badge.
    //  - all: Count all changes.
    //  - tracked: Count only tracked changes.
    //  - off: Turn off counter.
    "git.countBadge": "all",
  
    // Controls whether Git contributes colors and badges to the Explorer and the Open Editors view.
    "git.decorations.enabled": true,
  
    // Controls whether to automatically detect git submodules.
    "git.detectSubmodules": true,
  
    // Controls the limit of git submodules detected.
    "git.detectSubmodulesLimit": 10,
  
    // Enables commit signing with GPG or X.509.
    "git.enableCommitSigning": false,
  
    // Whether git is enabled.
    "git.enabled": true,
  
    // Commit all changes when there are no staged changes.
    "git.enableSmartCommit": false,
  
    // Controls whether the Git Sync command appears in the status bar.
    "git.enableStatusBarSync": true,
  
    // When enabled, fetch all branches when pulling. Otherwise, fetch just the current one.
    "git.fetchOnPull": false,
  
    // Follow push all tags when running the sync command.
    "git.followTagsWhenSync": false,
  
    // This setting is now deprecated, please use `github.gitAuthentication` instead.
    // 
    "git.githubAuthentication": null,
  
    // List of git repositories to ignore.
    "git.ignoredRepositories": [],
  
    // Ignores the legacy Git warning.
    "git.ignoreLegacyWarning": false,
  
    // Ignores the warning when there are too many changes in a repository.
    "git.ignoreLimitWarning": false,
  
    // Ignores the warning when Git is missing.
    "git.ignoreMissingGitWarning": false,
  
    // Ignores the warning when it looks like the branch might have been rebased when pulling.
    "git.ignoreRebaseWarning": false,
  
    // Ignore modifications to submodules in the file tree.
    "git.ignoreSubmodules": false,
  
    // Ignores the warning when Git 2.25 - 2.26 is installed on Windows.
    "git.ignoreWindowsGit27Warning": false,
  
    // Controls when to show commit message input validation.
    "git.inputValidation": "warn",
  
    // Controls the commit message length threshold for showing a warning.
    "git.inputValidationLength": 72,
  
    // Controls the commit message subject length threshold for showing a warning. Unset it to inherit the value of `config.inputValidationLength`.
    "git.inputValidationSubjectLength": 50,
  
    // Controls whether to open a repository automatically after cloning.
    //  - always: Always open in current window.
    //  - alwaysNewWindow: Always open in a new window.
    //  - whenNoFolderOpen: Only open in current window when no folder is opened.
    //  - prompt: Always prompt for action.
    "git.openAfterClone": "prompt",
  
    // Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened.
    "git.openDiffOnClick": true,
  
    // Runs a git command after a successful commit.
    //  - none: Don't run any command after a commit.
    //  - push: Run 'Git Push' after a successful commit.
    //  - sync: Run 'Git Sync' after a successful commit.
    "git.postCommitCommand": "none",
  
    // Controls whether Git should check for unsaved files before committing.
    //  - always: Check for any unsaved files.
    //  - staged: Check only for unsaved staged files.
    //  - never: Disable this check.
    "git.promptToSaveFilesBeforeCommit": "always",
  
    // Controls whether Git should check for unsaved files before stashing changes.
    //  - always: Check for any unsaved files.
    //  - staged: Check only for unsaved staged files.
    //  - never: Disable this check.
    "git.promptToSaveFilesBeforeStash": "always",
  
    // Prune when fetching.
    "git.pruneOnFetch": false,
  
    // Fetch all tags when pulling.
    "git.pullTags": true,
  
    // Force git to use rebase when running the sync command.
    "git.rebaseWhenSync": false,
  
    // Controls whether to require explicit Git user configuration or allow Git to guess if missing.
    "git.requireGitUserConfig": true,
  
    // List of paths to search for git repositories in.
    "git.scanRepositories": [],
  
    // Controls whether to show the commit input in the Git source control panel.
    "git.showCommitInput": true,
  
    // Controls whether to show an inline Open File action in the Git changes view.
    "git.showInlineOpenFileAction": true,
  
    // Controls whether git actions should show progress.
    "git.showProgress": true,
  
    // Controls whether to show a notification when a push is successful.
    "git.showPushSuccessNotification": false,
  
    // Controls whether to show an action button to sync or publish, if there are unpublished commits.
    //  - always: Always shows the action button, if there are unpublished commits.
    //  - whenEmpty: Only shows the action button if there are no other changes and there are unpublished commits.
    //  - never: Never shows the action button.
    "git.showUnpublishedCommitsButton": "whenEmpty",
  
    // Control which changes are automatically staged by Smart Commit.
    //  - all: Automatically stage all changes.
    //  - tracked: Automatically stage tracked changes only.
    "git.smartCommitChanges": "all",
  
    // Controls how to limit the number of changes that can be parsed from Git status command. Can be set to 0 for no limit.
    "git.statusLimit": 10000,
  
    // Suggests to enable smart commit (commit all changes when there are no staged changes).
    "git.suggestSmartCommit": true,
  
    // Controls whether a notification comes up when running the Sync action, which allows the user to cancel the operation.
    "git.supportCancellation": false,
  
    // Controls whether to enable VS Code to be the authentication handler for git processes spawned in the integrated terminal. Note: terminals need to be restarted to pick up a change in this setting.
    "git.terminalAuthentication": true,
  
    // Controls which date to use for items in the Timeline view.
    //  - committed: Use the committed date
    //  - authored: Use the authored date
    "git.timeline.date": "committed",
  
    // Controls whether to show the commit author in the Timeline view.
    "git.timeline.showAuthor": true,
  
    // Controls how untracked changes behave.
    //  - mixed: All changes, tracked and untracked, appear together and behave equally.
    //  - separate: Untracked changes appear separately in the Source Control view. They are also excluded from several actions.
    //  - hidden: Untracked changes are hidden and excluded from several actions.
    "git.untrackedChanges": "mixed",
  
    // Controls whether to use the message from the commit input box as the default stash message.
    "git.useCommitInputAsStashMessage": false,
  
    // Controls whether force pushing uses the safer force-with-lease variant.
    "git.useForcePushWithLease": true
  
  },
  {
    // Controls whether to enable automatic GitHub authentication for git commands within VS Code.
    "github.gitAuthentication": true
  
  },
  {
    // URI of your GitHub Enterprise Instance
    "github-enterprise.uri": ""
  
  },
  {
    // Enable/disable rendering math in the built-in Markdown preview.
    "markdown.math.enabled": true
  
  },
  {
    // Whether to automatically navigate to the next merge conflict after resolving a merge conflict.
    "merge-conflict.autoNavigateNextConflict.enabled": false,
  
    // Create a CodeLens for merge conflict blocks within editor.
    "merge-conflict.codeLens.enabled": true,
  
    // Create decorators for merge conflict blocks within editor.
    "merge-conflict.decorators.enabled": true,
  
    // Controls where the diff view should be opened when comparing changes in merge conflicts.
    //  - Current: Open the diff view in the current editor group.
    //  - Beside: Open the diff view next to the current editor group.
    //  - Below: Open the diff view below the current editor group.
    "merge-conflict.diffViewPosition": "Current"
  
  },
  {
    // Configures which processes to automatically attach and debug when `debug.node.autoAttach` is on. A Node process launched with the `--inspect` flag will always be attached to, regardless of this setting.
    //  - always: Auto attach to every Node.js process launched in the terminal.
    //  - smart: Auto attach when running scripts that aren't in a node_modules folder.
    //  - onlyWithFlag: Only auto attach when the `--inspect` is given.
    //  - disabled: Auto attach is disabled and not shown in status bar.
    "debug.javascript.autoAttachFilter": "disabled",
  
    // Configures glob patterns for determining when to attach in "smart" `debug.javascript.autoAttachFilter` mode. `$KNOWN_TOOLS$` is replaced with a list of names of common test and code runners. [Read more on the VS Code docs](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-smart-patterns).
    "debug.javascript.autoAttachSmartPattern": [
      "${workspaceFolder}/**",
      "!**/node_modules/**",
      "**/$KNOWN_TOOLS$/**"
    ],
  
    // Configures whether property getters will be expanded automatically. If this is false, the getter will appear as `get propertyName` and will only be evaluated when you click on it.
    "debug.javascript.autoExpandGetters": false,
  
    // When debugging a remote web app, configures whether to automatically tunnel the remote server to your local machine.
    "debug.javascript.automaticallyTunnelRemoteServer": true,
  
    // Whether to stop when conditional breakpoints throw an error.
    "debug.javascript.breakOnConditionalError": false,
  
    // Where a "Run" and "Debug" code lens should be shown in your npm scripts. It may be on "all", scripts, on "top" of the script section, or "never".
    "debug.javascript.codelens.npmScripts": "top",
  
    // Options used when debugging open links clicked from inside the JavaScript Debug Terminal. Can be set to "off" to disable this behavior, or "always" to enable debugging in all terminals.
    "debug.javascript.debugByLinkOptions": "on",
  
    // The default `runtimeExecutable` used for launch configurations, if unspecified. This can be used to config custom paths to Node.js or browser installations.
    "debug.javascript.defaultRuntimeExecutable": {
      "pwa-node": "node"
    },
  
    // Default options used when debugging a process through the `Debug: Attach to Node.js Process` command
    "debug.javascript.pickAndAttachOptions": {},
  
    // Request options to use when loading resources, such as source maps, in the debugger. You may need to configure this if your sourcemaps require authentication or use a self-signed certificate, for instance. Options are used to create a request using the [`got`](https://github.com/sindresorhus/got) library.
    // 
    // A common case to disable certificate verification can be done by passing `{ "https": { "rejectUnauthorized": false } }`.
    "debug.javascript.resourceRequestOptions": {},
  
    // Whether to suggest pretty printing JavaScript code that looks minified when you step into it.
    "debug.javascript.suggestPrettyPrinting": true,
  
    // Default launch options for the JavaScript debug terminal and npm scripts.
    "debug.javascript.terminalOptions": {},
  
    // Configures whether sourcemapped file where the original file can't be read will automatically be unmapped. If this is false (default), a prompt is shown.
    "debug.javascript.unmapMissingSources": false
  
  },
  {
    // Controls whether 'Peek References' or 'Find References' is invoked when selecting code lens references
    //  - peek: Show references in peek editor.
    //  - view: Show references in separate view.
    "references.preferredLocation": "peek"
  
  },
  {
    // Controls whether npm scripts should be automatically detected.
    "npm.autoDetect": "on",
  
    // Enable running npm scripts contained in a folder from the Explorer context menu.
    "npm.enableRunFromFolder": false,
  
    // The NPM Script Explorer is now available in 'Views' menu in the Explorer in all folders.
    // Enable an explorer view for npm scripts when there is no top-level 'package.json' file.
    "npm.enableScriptExplorer": false,
  
    // Configure glob patterns for folders that should be excluded from automatic script detection.
    "npm.exclude": "",
  
    // Fetch data from https://registry.npmjs.org and https://registry.bower.io to provide auto-completion and information on hover features on npm dependencies.
    "npm.fetchOnlinePackageInfo": true,
  
    // The package manager used to run scripts.
    //  - auto: Auto-detect which package manager to use for running scripts based on lock files and installed package managers.
    //  - npm: Use npm as the package manager for running scripts.
    //  - yarn: Use yarn as the package manager for running scripts.
    //  - pnpm: Use pnpm as the package manager for running scripts.
    "npm.packageManager": "auto",
  
    // Run npm commands with the `--silent` option.
    "npm.runSilent": false,
  
    // The default click action used in the npm scripts explorer: `open` or `run`, the default is `open`.
    "npm.scriptExplorerAction": "open"
  
  },
  {
    // Enable/disable the floating indicator that shows when focused in the simple browser.
    "simpleBrowser.focusLockIndicator.enabled": true
  
  },
  {
    // Set the brightness value for the glow effect. 0.0 is fully transparent and 1.0 is fully bright
    "darkSynthwave84.brightness": 0.45,
  
    // Disable the glow effect, but show Dark SynthWave '84 editor chrome updates
    "darkSynthwave84.disableGlow": false
  
  },
  {
    // Prompt to enable the [strictTemplates](https://angular.io/guide/angular-compiler-options#stricttemplates) flag in [angularCompilerOptions](https://angular.io/guide/angular-compiler-options). Note that strict mode is only available when using Ivy.
    "angular.enable-strict-mode-prompt": true,
  
    // Enables logging of the Angular server to a file. This log can be used to diagnose Angular Server issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
    "angular.log": "off",
  
    // Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires TS 3.7+, strict null checks to be enabled and the `legacy View Engine` option to be disabled.
    "angular.suggest.includeAutomaticOptionalChainCompletions": true,
  
    // Enable/disable snippet completions from Angular language server. Requires using TypeScript 4.3+ in the workspace and the `legacy View Engine` option to be disabled.
    "angular.suggest.includeCompletionsWithSnippetText": true,
  
    // Traces the communication between VS Code and the Angular language server.
    "angular.trace.server": "off",
  
    // Use legacy View Engine language service.
    "angular.view-engine": false
  
  },
  {
    // Resolves `ArrayAccess` and `Traversable` implementations that are unioned with a typed array to generic syntax. eg `ArrayAccessOrTraversable|ElementType[]` => `ArrayAccessOrTraversable<mixed, ElementType>`.
    "intelephense.compatibility.correctForArrayAccessArrayAndTraversableArrayUnionTypes": true,
  
    // Resolves `BaseClass|static` union types to `static` instead of `BaseClass`.
    "intelephense.compatibility.correctForBaseClassStaticUnionTypes": true,
  
    // Global namespace constants and functions will be fully qualified (prefixed with a backslash).
    "intelephense.completion.fullyQualifyGlobalConstantsAndFunctions": false,
  
    // Use declarations will be automatically inserted for namespaced classes, traits, interfaces, functions, and constants.
    "intelephense.completion.insertUseDeclaration": true,
  
    // The maximum number of completion items returned per request.
    "intelephense.completion.maxItems": 100,
  
    // Method and function completions will include parentheses and trigger parameter hints.
    "intelephense.completion.triggerParameterHints": true,
  
    // Enables argument count diagnostics.
    "intelephense.diagnostics.argumentCount": true,
  
    // Enables deprecated diagnostics.
    "intelephense.diagnostics.deprecated": true,
  
    // Enables duplicate symbol diagnostics.
    "intelephense.diagnostics.duplicateSymbols": true,
  
    // Enables diagnostics in embedded languages.
    "intelephense.diagnostics.embeddedLanguages": true,
  
    // Enables diagnostics.
    "intelephense.diagnostics.enable": true,
  
    // Enables reporting of problems associated with method and class implementations. For example, unimplemented methods or method signature incompatibilities.
    "intelephense.diagnostics.implementationErrors": true,
  
    // Enables reporting of various language constraint errors.
    "intelephense.diagnostics.languageConstraints": true,
  
    // Controls when diagnostics are run.
    //  - onType: Diagnostics will run as changes are made to the document.
    //  - onSave: Diagnostics will run when the document is saved.
    "intelephense.diagnostics.run": "onType",
  
    // Enables diagnostics on type compatibility of arguments, property assignments, and return statements where types have been declared.
    "intelephense.diagnostics.typeErrors": true,
  
    // Enables undefined class constant diagnostics.
    "intelephense.diagnostics.undefinedClassConstants": true,
  
    // Enables undefined constant diagnostics.
    "intelephense.diagnostics.undefinedConstants": true,
  
    // Enables undefined function diagnostics.
    "intelephense.diagnostics.undefinedFunctions": true,
  
    // Enables undefined method diagnostics.
    "intelephense.diagnostics.undefinedMethods": true,
  
    // Enables undefined static property diagnostics.
    "intelephense.diagnostics.undefinedProperties": true,
  
    // DEPRECATED. Use the setting for each symbol category.
    "intelephense.diagnostics.undefinedSymbols": true,
  
    // Enables undefined class, interface and trait diagnostics.
    "intelephense.diagnostics.undefinedTypes": true,
  
    // Enables undefined variable diagnostics.
    "intelephense.diagnostics.undefinedVariables": true,
  
    // Enables unexpected token diagnostics.
    "intelephense.diagnostics.unexpectedTokens": true,
  
    // Enables unused variable, private member, and import diagnostics.
    "intelephense.diagnostics.unusedSymbols": true,
  
    // The directory of the entry point to the application (directory of index.php). Can be absolute or relative to the workspace folder. Used for resolving script inclusion and path suggestions.
    "intelephense.environment.documentRoot": "",
  
    // The include paths (as individual path items) as defined in the include_path ini setting or paths to external libraries. Can be absolute or relative to the workspace folder. Used for resolving script inclusion and/or adding external symbols to folder.
    "intelephense.environment.includePaths": [],
  
    // A semver compatible string that represents the target PHP version. Used for providing version appropriate suggestions and diagnostics. PHP 5.3.0 and greater supported.
    "intelephense.environment.phpVersion": "8.0.0",
  
    // When enabled '<?' will be parsed as a PHP open tag. Defaults to true.
    "intelephense.environment.shortOpenTag": true,
  
    // Configure glob patterns to make files available for language server features. Inherits from files.associations.
    "intelephense.files.associations": [
      "*.php",
      "*.phtml"
    ],
  
    // Configure glob patterns to exclude certain files and folders from all language server features. Inherits from files.exclude.
    "intelephense.files.exclude": [
      "**/.git/**",
      "**/.svn/**",
      "**/.hg/**",
      "**/CVS/**",
      "**/.DS_Store/**",
      "**/node_modules/**",
      "**/bower_components/**",
      "**/vendor/**/{Tests,tests}/**",
      "**/.history/**",
      "**/vendor/**/vendor/**"
    ],
  
    // Maximum file size in bytes.
    "intelephense.files.maxSize": 1000000,
  
    // Controls formatting style of braces
    //  - psr12: PHP-FIG PSR-2 and PSR-12 style. A mix of Allman and K&R
    //  - allman: Allman. Opening brace on the next line.
    //  - k&r: K&R (1TBS). Opening brace on the same line.
    "intelephense.format.braces": "psr12",
  
    // Enables formatting.
    "intelephense.format.enable": true,
  
    // Maximum memory (in MB) that the server should use. On some systems this may only have effect when runtime has been set. Minimum 256.
    "intelephense.maxMemory": 0,
  
    // An object that describes the format of generated class/interface/trait phpdoc. The following snippet variables are available: SYMBOL_NAME; SYMBOL_KIND; SYMBOL_TYPE; SYMBOL_NAMESPACE.
    "intelephense.phpdoc.classTemplate": {
      "summary": "$1",
      "tags": [
        "@package ${1:$SYMBOL_NAMESPACE}"
      ]
    },
  
    // An object that describes the format of generated function/method phpdoc. The following snippet variables are available: SYMBOL_NAME; SYMBOL_KIND; SYMBOL_TYPE; SYMBOL_NAMESPACE.
    "intelephense.phpdoc.functionTemplate": {
      "summary": "$1",
      "tags": [
        "@param ${1:$SYMBOL_TYPE} $SYMBOL_NAME $2",
        "@return ${1:$SYMBOL_TYPE} $2",
        "@throws ${1:$SYMBOL_TYPE} $2"
      ]
    },
  
    // An object that describes the format of generated property phpdoc. The following snippet variables are available: SYMBOL_NAME; SYMBOL_KIND; SYMBOL_TYPE; SYMBOL_NAMESPACE.
    "intelephense.phpdoc.propertyTemplate": {
      "summary": "$1",
      "tags": [
        "@var ${1:$SYMBOL_TYPE}"
      ]
    },
  
    // Adds `@return void` to auto generated phpdoc for definitions that do not return a value.
    "intelephense.phpdoc.returnVoid": true,
  
    // 
    //  - snippet: Auto generated phpdoc is returned in snippet format. Templates are partially resolved by evaluating phpdoc specific variables only.
    //  - text: Auto generated phpdoc is returned as plain text. Templates are resolved completely by the server.
    "intelephense.phpdoc.textFormat": "snippet",
  
    // Fully qualified names will be used for types when true. When false short type names will be used and imported where appropriate. Overrides intelephense.completion.insertUseDeclaration.
    "intelephense.phpdoc.useFullyQualifiedNames": false,
  
    // Glob patterns matching files and folders that should be excluded from references search.
    "intelephense.references.exclude": [
      "**/vendor/**"
    ],
  
    // Glob patterns matching files and folders that should be excluded when renaming symbols. Rename operation will fail if the symbol definition is found in the excluded files/folders.
    "intelephense.rename.exclude": [
      "**/vendor/**"
    ],
  
    // Controls the scope of a namespace rename operation.
    //  - single: Only symbols defined in the current file are affected. For example, this makes a rename of a namespace the equivalent of a single move class operation.
    //  - all: All symbols that share this namespace, not necessarily defined in the current file will be affected. For example it would move all classes that share this namespace to the new namespace.
    "intelephense.rename.namespaceMode": "single",
  
    // Configure stub files for built in symbols and common extensions. The default setting includes PHP core and all bundled extensions.
    "intelephense.stubs": [
      "apache",
      "bcmath",
      "bz2",
      "calendar",
      "com_dotnet",
      "Core",
      "ctype",
      "curl",
      "date",
      "dba",
      "dom",
      "enchant",
      "exif",
      "FFI",
      "fileinfo",
      "filter",
      "fpm",
      "ftp",
      "gd",
      "gettext",
      "gmp",
      "hash",
      "iconv",
      "imap",
      "intl",
      "json",
      "ldap",
      "libxml",
      "mbstring",
      "meta",
      "mysqli",
      "oci8",
      "odbc",
      "openssl",
      "pcntl",
      "pcre",
      "PDO",
      "pdo_ibm",
      "pdo_mysql",
      "pdo_pgsql",
      "pdo_sqlite",
      "pgsql",
      "Phar",
      "posix",
      "pspell",
      "readline",
      "Reflection",
      "session",
      "shmop",
      "SimpleXML",
      "snmp",
      "soap",
      "sockets",
      "sodium",
      "SPL",
      "sqlite3",
      "standard",
      "superglobals",
      "sysvmsg",
      "sysvsem",
      "sysvshm",
      "tidy",
      "tokenizer",
      "xml",
      "xmlreader",
      "xmlrpc",
      "xmlwriter",
      "xsl",
      "Zend OPcache",
      "zip",
      "zlib"
    ],
  
    // Anonymous usage and crash data will be sent to Azure Application Insights. Inherits from telemetry.enableTelemetry.
    "intelephense.telemetry.enabled": null,
  
    // Traces the communication between VSCode and the intelephense language server.
    "intelephense.trace.server": "off"
  
  },
  {
    // The HTML attributes for which to provide class completions, hover previews, linting etc.
    "tailwindCSS.classAttributes": [
      "class",
      "className",
      "ngClass"
    ],
  
    // Controls whether the editor should render inline color decorators for Tailwind CSS classes and helper functions.
    "tailwindCSS.colorDecorators": true,
  
    // Enable class name completions when using Emmet-style syntax, for example `div.bg-red-500.uppercase`
    "tailwindCSS.emmetCompletions": false,
  
    // 
    "tailwindCSS.experimental.classRegex": [],
  
    // Enable features in languages that are not supported by default. Add a mapping here between the new language and an already supported language.
    //  E.g.: `{"plaintext": "html"}`
    "tailwindCSS.includeLanguages": {},
  
    // Enable the Node.js inspector agent for the language server and listen on the specified port.
    "tailwindCSS.inspectPort": null,
  
    // Class names on the same HTML element which apply the same CSS property or properties
    "tailwindCSS.lint.cssConflict": "warning",
  
    // Unsupported use of the [`@apply` directive](https://tailwindcss.com/docs/functions-and-directives/#apply)
    "tailwindCSS.lint.invalidApply": "error",
  
    // Unknown or invalid path used with the [`theme` helper](https://tailwindcss.com/docs/functions-and-directives/#theme)
    "tailwindCSS.lint.invalidConfigPath": "error",
  
    // Unknown screen name used with the [`@screen` directive](https://tailwindcss.com/docs/functions-and-directives/#screen)
    "tailwindCSS.lint.invalidScreen": "error",
  
    // Unknown value used with the [`@tailwind` directive](https://tailwindcss.com/docs/functions-and-directives/#tailwind)
    "tailwindCSS.lint.invalidTailwindDirective": "error",
  
    // Unknown variant name used with the [`@variants` directive](https://tailwindcss.com/docs/functions-and-directives/#variants)
    "tailwindCSS.lint.invalidVariant": "error",
  
    // Class variants not in the recommended order (applies in [JIT mode](https://tailwindcss.com/docs/just-in-time-mode) only)
    "tailwindCSS.lint.recommendedVariantOrder": "warning",
  
    // Root font size in pixels. Used to convert `rem` CSS values to their `px` equivalents. See `tailwindCSS.showPixelEquivalents`.
    "tailwindCSS.rootFontSize": 16,
  
    // Show `px` equivalents for `rem` CSS values.
    "tailwindCSS.showPixelEquivalents": true,
  
    // Enable linting. Rules can be configured individually using the `tailwindcss.lint.*` settings
    "tailwindCSS.validate": true
  
  },
  {
    // For import command. The declaration type used for require()
    "npm-intellisense.importDeclarationType": "const",
  
    // For import command. Use import statements instead of require()
    "npm-intellisense.importES6": true,
  
    // For import command. The linebreak used after the snippet
    "npm-intellisense.importLinebreak": ";\r\n",
  
    // For import command. The type of quotes to use in the snippet
    "npm-intellisense.importQuotes": "'",
  
    // (experimental) Enables path intellisense in subfolders of modules
    "npm-intellisense.packageSubfoldersIntellisense": false,
  
    // Look for package.json inside nearest directory instead of workspace root
    "npm-intellisense.recursivePackageJsonLookup": true,
  
    // Scans devDependencies as well
    "npm-intellisense.scanDevDependencies": false,
  
    // shows build in node modules like 'path' of 'fs'
    "npm-intellisense.showBuildInLibs": false
  
  },
  {
    // Sets an absolute path to the current workspace
    "path-intellisense.absolutePathToWorkspace": true,
  
    // Automatically adds slash after directory
    "path-intellisense.autoSlashAfterDirectory": false,
  
    // Adds the file extension to a import statements
    "path-intellisense.extensionOnImport": false,
  
    // Ignores tsconfig file for mappings
    "path-intellisense.ignoreTsConfigBaseUrl": false,
  
    // Mappings for paths
    "path-intellisense.mappings": {},
  
    // Show hidden files
    "path-intellisense.showHiddenFiles": false
  
  },
  {
    // CSS for the active scope. Use {color} to match the bracket color. The string types listed at https://code.visualstudio.com/docs/extensionAPI/vscode-api#DecorationRenderOptions can be used
    "bracketPairColorizer.activeScopeCSS": [
      "borderStyle : solid",
      "borderWidth : 1px",
      "borderColor : {color}; opacity: 0.5"
    ],
  
    // Should different brackets share a color group (Consecutive), or use their own color group (Independent)
    "bracketPairColorizer.colorMode": "Consecutive",
  
    // Define paired characters and their shared color group
    "bracketPairColorizer.consecutivePairColors": [
      "()",
      "[]",
      "{}",
      [
        "Gold",
        "Orchid",
        "LightSkyBlue"
      ],
      "Red"
    ],
  
    // Don't colorize files of these languages
    "bracketPairColorizer.excludedLanguages": [],
  
    // Should opening brackets iterate the color cycle even if they are not nested
    "bracketPairColorizer.forceIterationColorCycle": false,
  
    // Ensure that an opening brackets color does not match a previous brackets color
    "bracketPairColorizer.forceUniqueOpeningColor": false,
  
    // Should the active scope brackets always be highlighted? Recommended to disable editor.matchBrackets if using this feature.
    "bracketPairColorizer.highlightActiveScope": false,
  
    // Define paired characters and their color groups
    "bracketPairColorizer.independentPairColors": [
      [
        "()",
        [
          "Gold",
          "Orchid",
          "LightSkyBlue"
        ],
        "Red"
      ],
      [
        "[]",
        [
          "Gold",
          "Orchid",
          "LightSkyBlue"
        ],
        "Red"
      ],
      [
        "{}",
        [
          "Gold",
          "Orchid",
          "LightSkyBlue"
        ],
        "Red"
      ]
    ],
  
    // Show active bracket scope in ruler?
    "bracketPairColorizer.rulerPosition": "Center",
  
    // CSS for the scope line. Use {color} to match the bracket color. The string types listed at https://code.visualstudio.com/docs/extensionAPI/vscode-api#DecorationRenderOptions can be used
    "bracketPairColorizer.scopeLineCSS": [
      "borderStyle : solid",
      "borderWidth : 1px",
      "borderColor : {color}; opacity: 0.5"
    ],
  
    // True: Scope Line will start from the ending bracket position. False: Scope Line will always be at column 0
    "bracketPairColorizer.scopeLineRelativePosition": true,
  
    // Show active bracket scope in gutter?
    "bracketPairColorizer.showBracketsInGutter": false,
  
    // Show active bracket scope in ruler?
    "bracketPairColorizer.showBracketsInRuler": false,
  
    // Show a horizontal line to create a block around the active bracket scope?
    "bracketPairColorizer.showHorizontalScopeLine": true,
  
    // Show a vertical line on the left side of the editor representing the active bracket scope?
    "bracketPairColorizer.showVerticalScopeLine": true,
  
    // How long the user should idle for, before the document is colorized. Set to 0 to disable
    "bracketPairColorizer.timeOut": 200
  
  },
  {
    // The C compiler path (e.g: /usr/bin/gcc or C:\MinGW\bin\gcc.exe)
    "c-cpp-compile-run.c-compiler": "gcc",
  
    // The C flags: e.g. -Wall. default: -Wall -Wextra
    "c-cpp-compile-run.c-flags": "-Wall -Wextra",
  
    // The Cpp compiler path (e.g: /usr/bin/g++ or C:\MinGW\bin\g++.exe)
    "c-cpp-compile-run.cpp-compiler": "g++",
  
    // The Cpp flags: e.g. -Wall. default: -Wall -Wextra
    "c-cpp-compile-run.cpp-flags": "-Wall -Wextra",
  
    // Where output file should be located
    "c-cpp-compile-run.output-location": "",
  
    // Whether should run in an external terminal
    "c-cpp-compile-run.run-args": "",
  
    // Whether should run in an external terminal
    "c-cpp-compile-run.run-in-external-terminal": false,
  
    // Whether should save the file before compiling
    "c-cpp-compile-run.save-before-compile": true,
  
    // Whether should show notifications
    "c-cpp-compile-run.should-show-notifications": true
  
  },
  {
    // List of local or remote style sheets for suggestions.
    "css.styleSheets": []
  
  },
  {
    // Current accent color selected
    "materialTheme.accent": "Blue"
  
  },
  {
    // Include parentheses around a sole arrow function parameter
    "prettier.arrowParens": "always",
  
    // Controls the printing of spaces inside object literals
    "prettier.bracketSpacing": true,
  
    // Path to the prettier configuration file
    "prettier.configPath": "",
  
    // This feature is no longer supported. Instead, configure VS Code [default formatters](https://github.com/prettier/prettier-vscode#default-formatter) or use .prettierignore.
    // A list of languages IDs to disable this extension on
    "prettier.disableLanguages": [],
  
    // A list of [glob patterns](https://code.visualstudio.com/api/references/vscode-api#GlobPattern) to register Prettier formatter
    "prettier.documentSelectors": [],
  
    // Control whether Prettier formats quoted code embedded in the file.
    "prettier.embeddedLanguageFormatting": "auto",
  
    // Controls whether prettier is enabled or not.
    "prettier.enable": true,
  
    // Enable debug logs for troubleshooting.
    "prettier.enableDebugLogs": false,
  
    // Specify the end of line used by prettier
    "prettier.endOfLine": "lf",
  
    // Specify the global whitespace sensitivity for HTML files.
    //  Valid options:
    // - `css` - Respect the default value of CSS display property.
    // - `strict` - Whitespaces are considered sensitive.
    // - `ignore` - Whitespaces are considered insensitive.
    "prettier.htmlWhitespaceSensitivity": "css",
  
    // Path to a .prettierignore file
    "prettier.ignorePath": ".prettierignore",
  
    // Prettier can insert a special @format marker at the top of files specifying that the file has been formatted with prettier. This works well when used in tandem with the `--require-pragma` option. If there is already a docblock at the top of the file then this option will add a newline to it with the @format marker.
    "prettier.insertPragma": false,
  
    // If true, puts the `>` of a multi-line jsx element at the end of the last line instead of being alone on the next line
    "prettier.jsxBracketSameLine": false,
  
    // Use single quotes instead of double quotes in JSX
    "prettier.jsxSingleQuote": false,
  
    // Package manager is now automatically detected by VS Code. This setting is no longer used.
    // The package manager you use to install node modules.
    "prettier.packageManager": "npm",
  
    // Path to the prettier module
    "prettier.prettierPath": "",
  
    // Fit code within this line limit
    "prettier.printWidth": 80,
  
    // (Markdown) wrap prose over multiple lines
    "prettier.proseWrap": "preserve",
  
    // Change when properties in objects are quoted
    "prettier.quoteProps": "as-needed",
  
    // Require a prettier configuration file to format. See [documentation for valid configuration files](https://prettier.io/docs/en/configuration.html).
    // 
    // > _Note, untitled files will still be formatted using the VS Code prettier settings even when this setting is set._
    "prettier.requireConfig": false,
  
    // Prettier can restrict itself to only format files that contain a special comment, called a pragma, at the top of the file. This is very useful when gradually transitioning large, unformatted codebases to prettier.
    "prettier.requirePragma": false,
  
    // When enabled, this extension will attempt to use global npm or yarn modules if local modules cannot be resolved.
    // > _This setting can have a negative performance impact, particularly on Windows when you have attached network drives. Only enable this if you must use global modules._
    "prettier.resolveGlobalModules": false,
  
    // Whether to add a semicolon at the end of every line
    "prettier.semi": true,
  
    // If true, will use single instead of double quotes
    "prettier.singleQuote": false,
  
    // Number of spaces it should use per tab
    "prettier.tabWidth": 2,
  
    // Controls the printing of trailing commas wherever possible. Valid options:
    // - `none` - No trailing commas
    // - `es5` - Trailing commas where valid in ES5 (objects, arrays, etc)
    // - `all` - Trailing commas wherever possible (function arguments)
    "prettier.trailingComma": "es5",
  
    // Whether or not to take `.editorconfig` into account when parsing configuration. See the [prettier.resolveConfig](https://prettier.io/docs/en/api.html) docs for details.
    "prettier.useEditorConfig": true,
  
    // Indent lines with tabs
    "prettier.useTabs": false,
  
    // Whether or not to indent the code inside `<script>` and `<style>` tags in Vue files. Some people (like the creator of Vue) don’t indent to save an indentation level, but this might break code folding in your editor.
    "prettier.vueIndentScriptAndStyle": false,
  
    // If true, this extension will process files in node_modules
    "prettier.withNodeModules": false
  
  },
  {
    // The path to a PHP executable.
    "php.debug.executablePath": null,
  
    // A unique key that allows the proxy to match requests to your editor. Only used when proxy configuration includes replacement.
    "php.debug.ideKey": "vsc"
  
  },
  {
    // Set the languages that the extension will be activated.  e.g. ["html","xml","php"]. Use ["*"] to activate for all languages.
    "auto-close-tag.activationOnLanguage": [
      "xml",
      "php",
      "blade",
      "ejs",
      "jinja",
      "javascript",
      "javascriptreact",
      "typescript",
      "typescriptreact",
      "plaintext",
      "markdown",
      "vue",
      "liquid",
      "erb",
      "lang-cfml",
      "cfml",
      "HTML (EEx)",
      "HTML (Eex)",
      "plist"
    ],
  
    // Set the languages where the extension will be disabled.  e.g. ["html","xml","php"].
    "auto-close-tag.disableOnLanguage": [],
  
    // Whether to close self-closing tag automatically
    "auto-close-tag.enableAutoCloseSelfClosingTag": true,
  
    // Whether to insert close tag automatically
    "auto-close-tag.enableAutoCloseTag": true,
  
    // Set the tag list that would not be auto closed.
    "auto-close-tag.excludedTags": [
      "area",
      "base",
      "br",
      "col",
      "command",
      "embed",
      "hr",
      "img",
      "input",
      "keygen",
      "link",
      "meta",
      "param",
      "source",
      "track",
      "wbr"
    ],
  
    // Enable both Visual Studio and Sublime Text mode
    "auto-close-tag.fullMode": false,
  
    // Insert a space before the forward slash in a self-closing tag.
    "auto-close-tag.insertSpaceBeforeSelfClosingTag": false,
  
    // Auto close tag when </ is typed, same as Sublime Text 3
    "auto-close-tag.SublimeText3Mode": false
  
  },
  {
    // Whether to clear previous output before each run.
    "code-runner.clearPreviousOutput": false,
  
    // Set the custom command to run.
    "code-runner.customCommand": "echo Hello",
  
    // Set the working directory.
    "code-runner.cwd": "",
  
    // Set the default language to run.
    "code-runner.defaultLanguage": "",
  
    // Whether to enable AppInsights to track user telemetry data.
    "code-runner.enableAppInsights": true,
  
    // Set the executor of each language.
    "code-runner.executorMap": {
      "javascript": "node",
      "java": "cd $dir && javac $fileName && java $fileNameWithoutExt",
      "c": "cd $dir && gcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
      "cpp": "cd $dir && g++ $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
      "objective-c": "cd $dir && gcc -framework Cocoa $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
      "php": "php",
      "python": "python -u",
      "perl": "perl",
      "perl6": "perl6",
      "ruby": "ruby",
      "go": "go run",
      "lua": "lua",
      "groovy": "groovy",
      "powershell": "powershell -ExecutionPolicy ByPass -File",
      "bat": "cmd /c",
      "shellscript": "bash",
      "fsharp": "fsi",
      "csharp": "scriptcs",
      "vbscript": "cscript //Nologo",
      "typescript": "ts-node",
      "coffeescript": "coffee",
      "scala": "scala",
      "swift": "swift",
      "julia": "julia",
      "crystal": "crystal",
      "ocaml": "ocaml",
      "r": "Rscript",
      "applescript": "osascript",
      "clojure": "lein exec",
      "haxe": "haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",
      "rust": "cd $dir && rustc $fileName && $dir$fileNameWithoutExt",
      "racket": "racket",
      "scheme": "csi -script",
      "ahk": "autohotkey",
      "autoit": "autoit3",
      "dart": "dart",
      "pascal": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
      "d": "cd $dir && dmd $fileName && $dir$fileNameWithoutExt",
      "haskell": "runhaskell",
      "nim": "nim compile --verbosity:0 --hints:off --run",
      "lisp": "sbcl --script",
      "kit": "kitc --run",
      "v": "v run",
      "sass": "sass --style expanded",
      "scss": "scss --style expanded",
      "less": "cd $dir && lessc $fileName $fileNameWithoutExt.css",
      "FortranFreeForm": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
      "fortran-modern": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
      "fortran_fixed-form": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
      "fortran": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt"
    },
  
    // Set the executor of each file extension.
    "code-runner.executorMapByFileExtension": {
      ".vb": "cd $dir && vbc /nologo $fileName && $dir$fileNameWithoutExt",
      ".vbs": "cscript //Nologo",
      ".scala": "scala",
      ".jl": "julia",
      ".cr": "crystal",
      ".ml": "ocaml",
      ".exs": "elixir",
      ".hx": "haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",
      ".rkt": "racket",
      ".scm": "csi -script",
      ".ahk": "autohotkey",
      ".au3": "autoit3",
      ".kt": "cd $dir && kotlinc $fileName -include-runtime -d $fileNameWithoutExt.jar && java -jar $fileNameWithoutExt.jar",
      ".kts": "kotlinc -script",
      ".dart": "dart",
      ".pas": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
      ".pp": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
      ".d": "cd $dir && dmd $fileName && $dir$fileNameWithoutExt",
      ".hs": "runhaskell",
      ".nim": "nim compile --verbosity:0 --hints:off --run",
      ".csproj": "dotnet run --project",
      ".fsproj": "dotnet run --project",
      ".lisp": "sbcl --script",
      ".kit": "kitc --run",
      ".v": "v run",
      ".vsh": "v run",
      ".sass": "sass --style expanded",
      ".cu": "cd $dir && nvcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
      ".ring": "ring"
    },
  
    // Set the executor by glob.
    "code-runner.executorMapByGlob": {
      "pom.xml": "cd $dir && mvn clean package"
    },
  
    // Whether to use the directory of the file to be executed as the working directory.
    "code-runner.fileDirectoryAsCwd": false,
  
    // Whether to ignore selection to always run entire file.
    "code-runner.ignoreSelection": false,
  
    // Set the mapping of languageId to file extension.
    "code-runner.languageIdToFileExtensionMap": {
      "bat": ".bat",
      "powershell": ".ps1",
      "typescript": ".ts"
    },
  
    // Whether to preserve focus on code editor after code run is triggered.
    "code-runner.preserveFocus": true,
  
    // Whether to respect Shebang to run code.
    "code-runner.respectShebang": true,
  
    // Whether to run code in Integrated Terminal.
    "code-runner.runInTerminal": false,
  
    // Whether to save all files before running.
    "code-runner.saveAllFilesBeforeRun": false,
  
    // Whether to save the current file before running.
    "code-runner.saveFileBeforeRun": false,
  
    // Whether to show extra execution message like [Running] ... and [Done] ...
    "code-runner.showExecutionMessage": true,
  
    // Whether to show 'Run Code' command in editor context menu.
    "code-runner.showRunCommandInEditorContextMenu": true,
  
    // Whether to show 'Run Code' command in explorer context menu.
    "code-runner.showRunCommandInExplorerContextMenu": true,
  
    // Whether to show 'Run Code' icon in editor title menu.
    "code-runner.showRunIconInEditorTitleMenu": true,
  
    // Whether to show 'Stop code run' icon in the editor title menu when code is running.
    "code-runner.showStopIconInEditorTitleMenu": true,
  
    // Temporary file name used in running selected code snippet. When it is set as empty, the file name will be random.
    "code-runner.temporaryFileName": "tempCodeRunnerFile",
  
    // For Windows system, replaces the Windows style drive letter in the command with a Unix style root when using a custom shell as the terminal, like Bash or Cgywin. Example: Setting this to '/mnt/' will replace 'C:\path' with '/mnt/c/path'
    "code-runner.terminalRoot": ""
  
  },
  {
    // Assigns the issue you're working on to you. Only applies when the issue you're working on is in a repo you currently have open.
    "githubIssues.assignWhenWorking": true,
  
    // Controls whether an issue number (ex. #1234) or a full url (ex. https://github.com/owner/name/issues/1234) is inserted when the Create Issue code action is run.
    "githubIssues.createInsertFormat": "number",
  
    // Strings that will cause the 'Create issue from comment' code action to show.
    "githubIssues.createIssueTriggers": [
      "TODO",
      "todo",
      "BUG",
      "FIXME",
      "ISSUE",
      "HACK"
    ],
  
    // Languages that the '#' character should not be used to trigger issue completion suggestions.
    "githubIssues.ignoreCompletionTrigger": [
      "python",
      "makefile"
    ],
  
    // An array of milestones titles to never show issues from.
    "githubIssues.ignoreMilestones": [],
  
    // Languages that the '@' character should not be used to trigger user completion suggestions.
    "githubIssues.ignoreUserCompletionTrigger": [
      "python"
    ],
  
    // Advanced settings for the name of the branch that is created when you start working on an issue. 
    // - `${user}` will be replace with the currently logged in username 
    // - `${issueNumber}` will be replaced with the current issue number 
    // - `${sanitizedIssueTitle}` will be replaced with the issue title, with all spaces and unsupported characters removed
    "githubIssues.issueBranchTitle": "${user}/issue${issueNumber}",
  
    // Sets the format of issue completions in the SCM inputbox. 
    // - `${user}` will be replace with the currently logged in username 
    // - `${issueNumber}` will be replaced with the current issue number 
    // - `${issueNumberLabel}` will be replaced with a label formatted as #number or owner/repository#number, depending on whether the issue is in the current repository
    "githubIssues.issueCompletionFormatScm": "${issueTitle} ${issueNumberLabel}",
  
    // Controls whether completion suggestions are shown for issues.
    "githubIssues.issueCompletions.enabled": true,
  
    // Specifies what queries should be used in the GitHub issues tree using [GitHub search syntax](https://help.github.com/en/articles/understanding-the-search-syntax) with variables. The first query listed will be expanded in the Issues view. The "default" query includes issues assigned to you by Milestone. If you want to preserve these, make sure they are still in the array when you modify the setting.
    "githubIssues.queries": [
      {
        "label": "My Issues",
        "query": "default"
      },
      {
        "label": "Created Issues",
        "query": "author:${user} state:open repo:${owner}/${repository} sort:created-desc"
      }
    ],
  
    // Determines whether a branch should be checked out when working on an issue. To configure the name of the branch, set `githubIssues.issueBranchTitle`.
    //  - on: A branch will always be checked out when you start working on an issue. If the branch doesn't exist, it will be created.
    //  - off: A branch will not be created when you start working on an issue. If you have worked on an issue before and a branch was created for it, that same branch will be checked out.
    //  - prompt: A prompt will show for setting the name of the branch that will be created and checked out.
    "githubIssues.useBranchForIssues": "on",
  
    // Controls whether completion suggestions are shown for users.
    "githubIssues.userCompletions.enabled": true,
  
    // This setting is replaced by the better named setting githubIssues.issueBranchTitle and may be removed in the future.
    // Advanced settings for the name of the branch that is created when you start working on an issue. ${user} will be replace with the currently logged in username and ${issueNumber} will be replaced with the current issue number. You can also use ${sanitizedIssueTitle}.
    "githubIssues.workingIssueBranch": "",
  
    // Sets the format of the commit message that is set in the SCM inputbox when you **Start Working on an Issue**. Defaults to `${issueTitle} 
    // Fixes #${issueNumber}`
    "githubIssues.workingIssueFormatScm": "${issueTitle} \nFixes ${issueNumberLabel}",
  
    // Controls whether comments are expanded when a document with comments is opened.
    //  - expandUnresolved: All unresolved comments will be expanded.
    //  - collapseAll: All comments will be collapsed
    "githubPullRequests.commentExpandState": "expandUnresolved",
  
    // When true, the option to delete the local branch will be selected by default when deleting a branch from a pull request.
    "githubPullRequests.defaultDeletionMethod.selectLocalBranch": true,
  
    // When true, the option to delete the remote will be selected by default when deleting a branch from a pull request.
    "githubPullRequests.defaultDeletionMethod.selectRemote": true,
  
    // The method to use when merging pull requests.
    "githubPullRequests.defaultMergeMethod": "merge",
  
    // The layout to use when displaying changed files list.
    "githubPullRequests.fileListLayout": "tree",
  
    // Whether to enter focused mode when a pull request is checked out. This hides the issues and pull requests tree views.
    "githubPullRequests.focusedMode": true,
  
    // The setting `githubPullRequests.includeRemotes` has been deprecated. Use `githubPullRequests.remotes` to configure what remotes are shown.
    // By default we only support remotes created by users. If you want to see pull requests from remotes this extension created for pull requests, change this setting to 'all'.
    "githubPullRequests.includeRemotes": "default",
  
    // Logging for GitHub Pull Request extension. The log is emitted to the output channel named as GitHub Pull Request.
    "githubPullRequests.logLevel": "info",
  
    // The pull request description now uses the same defaults as GitHub, and can be edited before create.
    // The description used when creating pull requests.
    //  - template: Use a pull request template, or use the commit description if no templates were found
    //  - commit: Use the latest commit message
    //  - custom: Specify a custom description
    //  - ask: Ask which of the above methods to use
    "githubPullRequests.pullRequestDescription": "template",
  
    // The pull request title now uses the same defaults as GitHub, and can be edited before create.
    // The title used when creating pull requests.
    //  - commit: Use the latest commit message
    //  - branch: Use the branch name
    //  - custom: Specify a custom title
    //  - ask: Ask which of the above methods to use
    "githubPullRequests.pullRequestTitle": "ask",
  
    // Specifies what queries should be used in the GitHub Pull Requests tree. Each query object has a `label` that will be shown in the tree and a search `query` using [GitHub search syntax](https://help.github.com/en/articles/understanding-the-search-syntax). The variable `${user}` can be used to specify the logged in user within a search. By default these queries define the categories "Waiting For My Review", "Assigned To Me" and "Created By Me". If you want to preserve these, make sure they are still in the array when you modify the setting.
    "githubPullRequests.queries": [
      {
        "label": "Waiting For My Review",
        "query": "is:open review-requested:${user}"
      },
      {
        "label": "Assigned To Me",
        "query": "is:open assignee:${user}"
      },
      {
        "label": "Created By Me",
        "query": "is:open author:${user}"
      }
    ],
  
    // List of remotes, by name, to fetch pull requests from.
    "githubPullRequests.remotes": [
      "origin",
      "upstream"
    ],
  
    // This setting is deprecated. Views can now be dragged to any location.
    // When true, show GitHub Pull Requests within the SCM viewlet. Otherwise show a separate view container for them.
    "githubPullRequests.showInSCM": false,
  
    // Default handler for terminal links.
    //  - github: Create the pull request on GitHub
    //  - vscode: Create the pull request in VS Code
    //  - ask: Ask which method to use
    "githubPullRequests.terminalLinksHandler": "ask"
  
  },
  {
    // Select an icon pack that enables specific icons.
    //  - angular: Icons for Angular.
    //  - angular_ngrx: Icons for Angular and ngrx.
    //  - react: Icons for React.
    //  - react_redux: Icons for React and Redux.
    //  - vue: Icons for Vue.
    //  - vue_vuex: Icons for Vue and Vuex.
    //  - nest: Icons for NestJS.
    //  - none: No icon pack enabled.
    "helium-icon-theme.activeIconPack": "angular",
  
    // Set custom file icon associations.
    "helium-icon-theme.files.associations": {},
  
    // Set custom folder icon associations.
    "helium-icon-theme.folders.associations": {},
  
    // Change the color of the folder icons.
    "helium-icon-theme.folders.color": "#90a4ae",
  
    // Set the type for the folder icons.
    //  - specific: Select specific folder icons.
    //  - classic: Select classic folder icons.
    //  - none: No folder icons.
    "helium-icon-theme.folders.theme": "specific",
  
    // Hide explorer arrows before folder.
    "helium-icon-theme.hidesExplorerArrows": false,
  
    // Set custom language icon associations.
    "helium-icon-theme.languages.associations": {},
  
    // Change the opacity of the icons.
    "helium-icon-theme.opacity": 1,
  
    // Change the saturation of the icons.
    "helium-icon-theme.saturation": 1,
  
    // Show restart notification.
    "helium-icon-theme.showReloadMessage": true,
  
    // Show the update message after each update.
    "helium-icon-theme.showUpdateMessage": false,
  
    // Show the welcome message after first installation.
    "helium-icon-theme.showWelcomeMessage": true
  
  },
  {
    // A path to a file, or an object containing the configuration options for js-beautify. If the .jsbeautifyrc file exists in project root, it overrides this configuration.
    "beautify.config": null,
  
    // List of paths to ignore when using VS Code format command, including format on save. Uses glob pattern matching.
    "beautify.ignore": [],
  
    // Link file types to the beautifier type
    "beautify.language": {
      "js": {
        "type": [
          "javascript",
          "json",
          "jsonc"
        ],
        "filename": [
          ".jshintrc",
          ".jsbeautifyrc"
        ]
      },
      "css": [
        "css",
        "less",
        "scss"
      ],
      "html": [
        "htm",
        "html"
      ]
    }
  
  },
  {
    // Auto-configuration target for auto-closing tags.
    "cfml.autoCloseTags.configurationTarget": "Global",
  
    // Whether to enable auto-closing tags for CFML. This uses the third-party extension `auto-close-tag`. This is only checked and set on startup.
    "cfml.autoCloseTags.enable": true,
  
    // Physical path to the data directory of CFDocs.
    "cfml.cfDocs.localPath": null,
  
    // Indicates the source location type to be used for CFDocs. Remote is GitHub repo. Local is based on cfml.cfDocs.localPath.
    //  - remote: Retrieve resources remotely from GitHub.
    //  - local: Retrieve resources locally using cfml.cfDocs.localPath.
    "cfml.cfDocs.source": "remote",
  
    // Whether providing definitions is enabled.
    "cfml.definition.enable": true,
  
    // Whether to search for matching functions throughout the workspace when a reliable match cannot be determined.
    "cfml.definition.userFunctions.search.enable": false,
  
    // Extra tags you wish to include in every DocBlock
    "cfml.docBlock.extra": [],
  
    // Whether there should be a gap between the hint and other tags in a docblock
    "cfml.docBlock.gap": true,
  
    // Name of the CFML engine against which to filter.
    "cfml.engine.name": "",
  
    // Version of the CFML engine against which to filter. SemVer format is preferred.
    "cfml.engine.version": "",
  
    // The source of the global definitions.
    "cfml.globalDefinitions.source": "cfdocs",
  
    // Whether hover is enabled for CSS entities.
    "cfml.hover.css.enable": true,
  
    // Whether hover is enabled for CFML entities.
    "cfml.hover.enable": true,
  
    // Whether hover is enabled for HTML entities.
    "cfml.hover.html.enable": true,
  
    // Whether to index all components in workspace. This is done on each startup and is required for multiple features to work properly.
    "cfml.indexComponents.enable": true,
  
    // Represents CFML mappings from logicalPath to directoryPath.
    "cfml.mappings": [],
  
    // Whether signature help is enabled.
    "cfml.signature.enable": true,
  
    // Whether CSS properties and values are part of completion help.
    "cfml.suggest.css.enable": true,
  
    // Whether completion help is enabled.
    "cfml.suggest.enable": true,
  
    // Whether global functions are part of completion help.
    "cfml.suggest.globalFunctions.enable": true,
  
    // What case should be used for the first letter of global function suggestions.
    //  - unchanged: Leaves the name unchanged from source
    //  - lower: Lowercases the first letter
    //  - upper: Uppercases the first letter
    "cfml.suggest.globalFunctions.firstLetterCase": "default",
  
    // Whether to populate the default value for an attribute if it has one.
    "cfml.suggest.globalTags.attributes.defaultValue": false,
  
    // Which quote type to use when completing attribute suggestion.
    //  - none: Adds no quotes for attribute value
    //  - double: Adds two double quotes for attribute value
    //  - single: Adds two single quotes for attribute value
    "cfml.suggest.globalTags.attributes.quoteType": "double",
  
    // Whether global tags are part of completion help.
    "cfml.suggest.globalTags.enable": true,
  
    // A custom set of attributes to include for given tags when suggestion is selected. This setting overrides the set type.
    "cfml.suggest.globalTags.includeAttributes.custom": {},
  
    // What set of attributes to include when global tag suggestion is selected
    //  - none: Adds no attributes on completion of global tags
    //  - required: Adds required attributes on completion of global tags
    //  - all: Adds all attributes on completion of global tags
    "cfml.suggest.globalTags.includeAttributes.setType": "none",
  
    // Which quote type to use when completing attribute suggestion.
    //  - none: Adds no quotes for attribute value
    //  - double: Adds two double quotes for attribute value
    //  - single: Adds two single quotes for attribute value
    "cfml.suggest.htmlTags.attributes.quoteType": "double",
  
    // Whether HTML tags are part of completion help.
    "cfml.suggest.htmlTags.enable": true,
  
    // Whether snippets are part of completion help.
    "cfml.suggest.snippets.enable": true,
  
    // Set of snippet keys you would like excluded from suggestions.
    "cfml.suggest.snippets.exclude": []
  
  },
  {
    // log level.
    "graphqlForVSCode.loglevel": "info",
  
    // A path used for resolving the @playlyfe/gql module. (default: workspaceFolder)
    "graphqlForVSCode.nodePath": ".",
  
    // The location of the node binary to run gql-language-server under. (default: uses vscode bundled node)
    "graphqlForVSCode.runtime": null,
  
    // Traces the communication between VSCode and the gql language server.
    "graphqlForVSCode.trace.server": "off"
  
  },
  {
    // List of paths to libraries and the like that need to be imported by auto complete engine. E.g. when using Google App SDK, the paths are not in system path, hence need to be added into this list.
    "python.autoComplete.extraPaths": [],
  
    // Path to Python, you can use a custom version of Python by modifying this setting to include the full path. This default setting is used as a fallback if no interpreter is selected for the workspace. The extension will also not set nor change the value of this setting, it will only read from it.
    "python.defaultInterpreterPath": "python",
  
    // Whether to check if Python is installed (also warn when using the macOS-installed Python).
    "python.disableInstallationCheck": false,
  
    // Absolute path to a file containing environment variable definitions.
    "python.envFile": "${workspaceFolder}/.env",
  
    // Arguments passed in. Each argument is a separate item in the array.
    "python.formatting.autopep8Args": [],
  
    // Path to autopep8, you can use a custom version of autopep8 by modifying this setting to include the full path.
    "python.formatting.autopep8Path": "autopep8",
  
    // Arguments passed in. Each argument is a separate item in the array.
    "python.formatting.blackArgs": [],
  
    // Path to Black, you can use a custom version of Black by modifying this setting to include the full path.
    "python.formatting.blackPath": "black",
  
    // Provider for formatting. Possible options include 'autopep8', 'black', and 'yapf'.
    "python.formatting.provider": "autopep8",
  
    // Arguments passed in. Each argument is a separate item in the array.
    "python.formatting.yapfArgs": [],
  
    // Path to yapf, you can use a custom version of yapf by modifying this setting to include the full path.
    "python.formatting.yapfPath": "yapf",
  
    // Whether to install Python modules globally when not using an environment.
    "python.globalModuleInstallation": false,
  
    // Defines type of the language server.
    //  - Default: Automatically select a language server: Pylance if installed and available, otherwise fallback to Jedi.
    //  - Jedi: Use Jedi behind the Language Server Protocol (LSP) as a language server.
    //  - Pylance: Use Pylance as a language server.
    //  - None: Disable language server capabilities.
    "python.languageServer": "Default",
  
    // Arguments passed in. Each argument is a separate item in the array.
    "python.linting.banditArgs": [],
  
    // Whether to lint Python files using bandit.
    "python.linting.banditEnabled": false,
  
    // Path to bandit, you can use a custom version of bandit by modifying this setting to include the full path.
    "python.linting.banditPath": "bandit",
  
    // Optional working directory for linters.
    "python.linting.cwd": null,
  
    // Whether to lint Python files.
    "python.linting.enabled": true,
  
    // Arguments passed in. Each argument is a separate item in the array.
    "python.linting.flake8Args": [],
  
    // Severity of Flake8 message type 'E'.
    "python.linting.flake8CategorySeverity.E": "Error",
  
    // Severity of Flake8 message type 'F'.
    "python.linting.flake8CategorySeverity.F": "Error",
  
    // Severity of Flake8 message type 'W'.
    "python.linting.flake8CategorySeverity.W": "Warning",
  
    // Whether to lint Python files using flake8
    "python.linting.flake8Enabled": false,
  
    // Path to flake8, you can use a custom version of flake8 by modifying this setting to include the full path.
    "python.linting.flake8Path": "flake8",
  
    // Patterns used to exclude files or folders from being linted.
    "python.linting.ignorePatterns": [
      "**/site-packages/**/*.py",
      ".vscode/*.py"
    ],
  
    // Whether to lint Python files when saved.
    "python.linting.lintOnSave": true,
  
    // Controls the maximum number of problems produced by the server.
    "python.linting.maxNumberOfProblems": 100,
  
    // Arguments passed in. Each argument is a separate item in the array.
    "python.linting.mypyArgs": [
      "--follow-imports=silent",
      "--ignore-missing-imports",
      "--show-column-numbers",
      "--no-pretty"
    ],
  
    // Severity of Mypy message type 'Error'.
    "python.linting.mypyCategorySeverity.error": "Error",
  
    // Severity of Mypy message type 'Note'.
    "python.linting.mypyCategorySeverity.note": "Information",
  
    // Whether to lint Python files using mypy.
    "python.linting.mypyEnabled": false,
  
    // Path to mypy, you can use a custom version of mypy by modifying this setting to include the full path.
    "python.linting.mypyPath": "mypy",
  
    // Arguments passed in. Each argument is a separate item in the array.
    "python.linting.prospectorArgs": [],
  
    // Whether to lint Python files using prospector.
    "python.linting.prospectorEnabled": false,
  
    // Path to Prospector, you can use a custom version of prospector by modifying this setting to include the full path.
    "python.linting.prospectorPath": "prospector",
  
    // Arguments passed in. Each argument is a separate item in the array.
    "python.linting.pycodestyleArgs": [],
  
    // Severity of pycodestyle message type 'E'.
    "python.linting.pycodestyleCategorySeverity.E": "Error",
  
    // Severity of pycodestyle message type 'W'.
    "python.linting.pycodestyleCategorySeverity.W": "Warning",
  
    // Whether to lint Python files using pycodestyle
    "python.linting.pycodestyleEnabled": false,
  
    // Path to pycodestyle, you can use a custom version of pycodestyle by modifying this setting to include the full path.
    "python.linting.pycodestylePath": "pycodestyle",
  
    // Arguments passed in. Each argument is a separate item in the array.
    "python.linting.pydocstyleArgs": [],
  
    // Whether to lint Python files using pydocstyle
    "python.linting.pydocstyleEnabled": false,
  
    // Path to pydocstyle, you can use a custom version of pydocstyle by modifying this setting to include the full path.
    "python.linting.pydocstylePath": "pydocstyle",
  
    // Arguments passed in. Each argument is a separate item in the array.
    "python.linting.pylamaArgs": [],
  
    // Whether to lint Python files using pylama.
    "python.linting.pylamaEnabled": false,
  
    // Path to pylama, you can use a custom version of pylama by modifying this setting to include the full path.
    "python.linting.pylamaPath": "pylama",
  
    // Arguments passed in. Each argument is a separate item in the array.
    "python.linting.pylintArgs": [],
  
    // Severity of Pylint message type 'Convention/C'.
    "python.linting.pylintCategorySeverity.convention": "Information",
  
    // Severity of Pylint message type 'Error/E'.
    "python.linting.pylintCategorySeverity.error": "Error",
  
    // Severity of Pylint message type 'Fatal/F'.
    "python.linting.pylintCategorySeverity.fatal": "Error",
  
    // Severity of Pylint message type 'Refactor/R'.
    "python.linting.pylintCategorySeverity.refactor": "Hint",
  
    // Severity of Pylint message type 'Warning/W'.
    "python.linting.pylintCategorySeverity.warning": "Warning",
  
    // Whether to lint Python files using pylint.
    "python.linting.pylintEnabled": false,
  
    // Path to Pylint, you can use a custom version of pylint by modifying this setting to include the full path.
    "python.linting.pylintPath": "pylint",
  
    // Path to the pipenv executable to use for activation.
    "python.pipenvPath": "pipenv",
  
    // Path to the poetry executable.
    "python.poetryPath": "poetry",
  
    // (DEPRECATED: Note this setting is not used when in pythonDeprecatePythonPath experiment) Path to Python, you can use a custom version of Python by modifying this setting to include the full path.
    "python.pythonPath": "python",
  
    // Arguments passed in. Each argument is a separate item in the array.
    "python.sortImports.args": [],
  
    // Path to isort script, default using inner version
    "python.sortImports.path": "",
  
    // Activate Python Environment in the current Terminal on load of the Extension.
    "python.terminal.activateEnvInCurrentTerminal": false,
  
    // Activate Python Environment in Terminal created using the Extension.
    "python.terminal.activateEnvironment": true,
  
    // When executing a file in the terminal, whether to use execute in the file's directory, instead of the current open folder.
    "python.terminal.executeInFileDir": false,
  
    // Python launch arguments to use when executing a file in the terminal.
    "python.terminal.launchArgs": [],
  
    // Enable auto run test discovery when saving a test file.
    "python.testing.autoTestDiscoverOnSaveEnabled": true,
  
    // Optional working directory for tests.
    "python.testing.cwd": null,
  
    // Port number used for debugging of tests.
    "python.testing.debugPort": 3000,
  
    // Prompt to configure a test framework if potential tests directories are discovered.
    "python.testing.promptToConfigure": true,
  
    // Arguments passed in. Each argument is a separate item in the array.
    "python.testing.pytestArgs": [],
  
    // Enable testing using pytest.
    "python.testing.pytestEnabled": false,
  
    // Path to pytest (pytest), you can use a custom version of pytest by modifying this setting to include the full path.
    "python.testing.pytestPath": "pytest",
  
    // Arguments passed in. Each argument is a separate item in the array.
    "python.testing.unittestArgs": [
      "-v",
      "-s",
      ".",
      "-p",
      "*test*.py"
    ],
  
    // Enable testing using unittest.
    "python.testing.unittestEnabled": false
  
  },
  {
    // Offer auto-import completions.
    "python.analysis.autoImportCompletions": true,
  
    // Automatically add common search paths like 'src'.
    "python.analysis.autoSearchPaths": true,
  
    // Add parentheses to function completions.
    "python.analysis.completeFunctionParens": false,
  
    // Analysis mode for diagnostics.
    //  - openFilesOnly: Analyzes and reports errors on only open files.
    //  - workspace: Analyzes and reports errors on all files in the workspace.
    "python.analysis.diagnosticMode": "openFilesOnly",
  
    // Allows a user to override the severity levels for individual diagnostics.
    "python.analysis.diagnosticSeverityOverrides": {},
  
    // Additional import search resolution paths
    "python.analysis.extraPaths": [],
  
    // Specifies the level of logging for the Output panel
    "python.analysis.logLevel": "Information",
  
    // Path to directory containing custom type stub files.
    "python.analysis.stubPath": "typings",
  
    // Defines the default rule set for type checking.
    //  - off: Surfaces diagnostics for invalid syntax, unresolved imports, undefined variables.
    //  - basic: All "off" rules + basic type checking rules.
    //  - strict: All "off" rules + all type checking rules.
    "python.analysis.typeCheckingMode": "off",
  
    // Paths to look for typeshed modules.
    "python.analysis.typeshedPaths": [],
  
    // Use library implementations to extract type information when type stub is not present.
    "python.analysis.useLibraryCodeForTypes": true
  
  },
  {
    // After running a cell, add a 'Goto' code lens on the cell. Note, disabling all code lenses disables this code lens as well.
    "jupyter.addGotoCodeLenses": true,
  
    // This setting is deprecated and will be removed in the next release.
    // Allows a user to import a jupyter notebook into a python file anytime one is opened.
    "jupyter.allowImportFromNotebook": true,
  
    // This setting is deprecated and will be removed in the next release.
    // Allow the inputting of python code directly into the Interactive window
    "jupyter.allowInput": true,
  
    // This setting is deprecated as Live Share support for the interactive window no longer exists in the Jupyter extension.
    // Allow the Interactive window to be shared during a Live Share session
    "jupyter.allowLiveShare": true,
  
    // Allow for connecting the Interactive window to a https Jupyter server that does not have valid certificates. This can be a security risk, so only use for known and trusted servers.
    "jupyter.allowUnauthorizedRemoteConnection": false,
  
    // Automatically scroll the interactive window to show the output of the last statement executed. If false, the interactive window will only automatically scroll if the bottom of the prior cell is visible.
    "jupyter.alwaysScrollOnNewCell": false,
  
    // When importing or exporting a Jupyter Notebook add a directory change command to allow relative path loading to work.
    "jupyter.changeDirOnImportExport": false,
  
    // Set of commands to put as code lens above a cell.
    "jupyter.codeLenses": "jupyter.runcell,  jupyter.runallcellsabove, jupyter.debugcell",
  
    // Regular expression used to identify code cells. All code until the next match is considered part of this cell.
    "jupyter.codeRegularExpression": "^(#\\s*%%|#\\s*\\<codecell\\>|#\\s*In\\[\\d*?\\]|#\\s*In\\[ \\])",
  
    // Collapse cell input code by default.
    "jupyter.collapseCellInputCodeByDefault": true,
  
    // This setting is deprecated and will be removed in an upcoming release.
    // Whether or not to use the theme's peek color as the background for the input box.
    "jupyter.colorizeInputBox": true,
  
    // Set of debug commands to put as code lens above a cell while debugging.
    "jupyter.debugCodeLenses": "jupyter.debugcontinue, jupyter.debugstop, jupyter.debugstepover",
  
    // When debugging, debug just my code.
    "jupyter.debugJustMyCode": true,
  
    // Path to debugpy bits for debugging cells.
    "jupyter.debugpyDistPath": "",
  
    // Draw a highlight behind the currently active cell.
    "jupyter.decorateCells": true,
  
    // Cell marker used for delineating a cell in a python file.
    "jupyter.defaultCellMarker": "# %%",
  
    // When true, disables Jupyter from being automatically started for you. You must instead run a cell to start Jupyter.
    "jupyter.disableJupyterAutoStart": false,
  
    // Enables moving to the next cell when clicking on a 'Run Cell' code lens.
    "jupyter.enableAutoMoveToNextCell": true,
  
    // Enables code lens for 'cells' in a python file.
    "jupyter.enableCellCodeLens": true,
  
    // This setting is deprecated and will be removed in the next release.
    // Enables scrolling for large cell outputs in the Notebook Editor. This setting does not apply to the Interactive Window.
    "jupyter.enableScrollingForCellOutputs": true,
  
    // Enable exporting a python file into a jupyter notebook and run all cells when doing so.
    "jupyter.exportWithOutputEnabled": false,
  
    // Generate SVG output for notebook plots. This allows for better display in the plot viewer at the cost of generation speed and file size.
    "jupyter.generateSVGPlots": false,
  
    // This setting is deprecated and will be removed in the next release.
    // Don't use the VS Code theme in the Interactive window (requires reload of VS Code). This forces the Interactive window to use 'Light +(default light)' and disables matplotlib defaults.
    "jupyter.ignoreVscodeTheme": false,
  
    // Behavior of the Interactive Window. 'perFile' will create a new interactive window for every file that runs a cell. 'single' allows a single window. 'multiple' allows the creation of multiple.
    "jupyter.interactiveWindowMode": "multiple",
  
    // When a Notebook Editor or Interactive Window Jupyter server is started, these arguments will be passed to it. By default this list is generated by the Jupyter Extension.
    "jupyter.jupyterCommandLineArguments": [],
  
    // Amount of time (in ms) to wait for an interrupt before asking to restart the Jupyter kernel.
    "jupyter.jupyterInterruptTimeout": 10000,
  
    // Number of times to attempt to connect to the Jupyter Notebook
    "jupyter.jupyterLaunchRetries": 3,
  
    // Amount of time (in ms) to wait for the Jupyter Notebook server to start.
    "jupyter.jupyterLaunchTimeout": 60000,
  
    // Determines the type of connection for talking to jupyter. Local will start kernels locally. Remote allows for connections to remote servers
    "jupyter.jupyterServerType": "",
  
    // List of Jupyter Kernels and/or python environments that are to be excluded from the Kernel picker.
    "jupyter.kernels.filter": [],
  
    // Uncomment shell assignments (#!), line magic (#!%) and cell magic (#!%%) when parsing code cells.
    "jupyter.magicCommandsAsComments": false,
  
    // Regular expression used to identify markdown cells. All comments after this expression are considered part of the markdown.
    "jupyter.markdownRegularExpression": "^(#\\s*%%\\s*\\[markdown\\]|#\\s*\\<markdowncell\\>)",
  
    // This setting is deprecated and will be removed in the next release.
    // Maximum size (in pixels) of text output in the Notebook Editor before a scrollbar appears. First enable scrolling for cell outputs in settings.
    "jupyter.maxOutputSize": 400,
  
    // Append a new empty cell to an interactive window file on running the currently last cell.
    "jupyter.newCellOnRunLast": true,
  
    // Set the root directory for loading files for the Interactive window.
    "jupyter.notebookFileRoot": "${fileDirname}",
  
    // When debugging a cell, open this port on the remote box. If -1 is specified, a random port between 8889 and 9000 will be attempted.
    "jupyter.remoteDebuggerPort": -1,
  
    // This setting is deprecated and will be removed in the next release.
    // Search all installed Python interpreters for a Jupyter installation when starting the Interactive window
    "jupyter.searchForJupyter": true,
  
    // When pressing shift+enter, send selected code in a Python file to the Jupyter interactive window as opposed to the Python terminal.
    "jupyter.sendSelectionToInteractiveWindow": false,
  
    // This setting is deprecated and will be removed in the next release.
    // Show cell input code.
    "jupyter.showCellInputCode": true,
  
    // Show the Outline button in the Jupyter notebook toolbar.
    "jupyter.showOutlineButtonInNotebookToolbar": true,
  
    // Stop running cells if a cell throws an exception.
    "jupyter.stopOnError": true,
  
    // When debugging a cell, stop on the first line.
    "jupyter.stopOnFirstLineWhileDebugging": true,
  
    // This setting is deprecated in favor of `notebook.output.textLineLimit`. This setting will be removed in an upcoming release.
    // Limit the amount of text in Interactive cell text output to this value. 0 to allow any amount of characters.
    "jupyter.textOutputLimit": 20000,
  
    // In the Interactive window and Notebook Editor theme matplotlib outputs to match the VS Code editor theme.
    "jupyter.themeMatplotlibPlots": false,
  
    // When running Jupyter locally, create a default empty Jupyter config for the Interactive window
    "jupyter.useDefaultConfigForJupyter": true,
  
    // Types to exclude from showing in the Interactive variable explorer
    "jupyter.variableExplorerExclude": "module;function;builtin_function_or_method;ABCMeta;type"
  
  },
  {
    // Controls whether files are automatically added to `files.associations` when they are the target of a navigation operation from a C/C++ file.
    "C_Cpp.autoAddFileAssociations": true,
  
    // Controls the auto-completion provider. If `Disabled` and you want word-based completion, you will also need to set `"[cpp]": {"editor.wordBasedSuggestions": true}` (and similarly for `c` and `cuda-cpp` languages).
    //  - Default: Uses the active IntelliSense engine.
    //  - Disabled: Uses the word-based completion provided by Visual Studio Code.
    "C_Cpp.autocomplete": "Default",
  
    // If `true`, autocomplete will automatically add `(` after function calls, in which case `)` may also be added, depending on the value of the `editor.autoClosingBrackets` setting.
    "C_Cpp.autocompleteAddParentheses": false,
  
    // Name of the predefined style used as a fallback in case `clang-format` is invoked with style `file` but the `.clang-format` file is not found. Possible values are `Visual Studio`, `LLVM`, `Google`, `Chromium`, `Mozilla`, `WebKit`, `Microsoft`, `GNU`, `none`, or use `{key: value, ...}` to set specific parameters. For example, the `Visual Studio` style is similar to: `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`.
    "C_Cpp.clang_format_fallbackStyle": "Visual Studio",
  
    // The full path of the `clang-format` executable. If not specified, and `clang-format` is available in the environment path, that is used. If not found in the environment path, the `clang-format` bundled with the extension will be used.
    "C_Cpp.clang_format_path": "",
  
    // If set, overrides the include sorting behavior determined by the `SortIncludes` parameter.
    "C_Cpp.clang_format_sortIncludes": null,
  
    // Coding style, currently supports: `Visual Studio`, `LLVM`, `Google`, `Chromium`, `Mozilla`, `WebKit`, `Microsoft`, `GNU`. Use `file` to load the style from a `.clang-format` file in the current or parent directory. Use `{key: value, ...}` to set specific parameters. For example, the `Visual Studio` style is similar to: `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`.
    "C_Cpp.clang_format_style": "file",
  
    // If enabled, code folding ranges are provided by the language server.
    "C_Cpp.codeFolding": "Enabled",
  
    // Defines the editor behavior for when the Enter key is pressed inside a multiline or single line comment block.
    "C_Cpp.commentContinuationPatterns": [
      "/**"
    ],
  
    // Determines whether pop up notifications will be shown when a configuration provider extension is unable to provide a configuration for a source file.
    "C_Cpp.configurationWarnings": "Enabled",
  
    // If `true`, debugger shell command substitution will use obsolete backtick (`).
    "C_Cpp.debugger.useBacktickCommandSubstitution": false,
  
    // The value to use in a configuration if `browse.databaseFilename` is either not specified or set to `${default}`.
    "C_Cpp.default.browse.databaseFilename": "",
  
    // The value to use in a configuration if `browse.limitSymbolsToIncludedHeaders` is either not specified or set to `${default}`.
    "C_Cpp.default.browse.limitSymbolsToIncludedHeaders": true,
  
    // The value to use in a configuration if `browse.path` is not specified, or the values to insert if `${default}` is present in `browse.path`.
    "C_Cpp.default.browse.path": null,
  
    // The value to use in a configuration if `compileCommands` is either not specified, or set to `${default}`.
    "C_Cpp.default.compileCommands": "",
  
    // The value to use in configuration if `compilerArgs` is either not specified or set to `${default}`.
    "C_Cpp.default.compilerArgs": [],
  
    // The value to use in a configuration if `compilerPath` is either not specified or set to `${default}`.
    "C_Cpp.default.compilerPath": null,
  
    // The value to use in a configuration if `configurationProvider` is either not specified or set to `${default}`.
    "C_Cpp.default.configurationProvider": "",
  
    // The value to use in a configuration if `cppStandard` is either not specified or set to `${default}`.
    "C_Cpp.default.cppStandard": "",
  
    // The value to use in a configuration if `cStandard` is either not specified or set to `${default}`.
    "C_Cpp.default.cStandard": "",
  
    // The value to use in a configuration if `customConfigurationVariables` is not set, or the values to insert if `${default}` is present as a key in `customConfigurationVariables`.
    "C_Cpp.default.customConfigurationVariables": null,
  
    // The value to use in a configuration if `defines` is not specified, or the values to insert if `${default}` is present in `defines`.
    "C_Cpp.default.defines": [],
  
    // Controls whether the extension will report errors detected in `c_cpp_properties.json`.
    "C_Cpp.default.enableConfigurationSquiggles": true,
  
    // The value to use in a configuration if `forcedInclude` is not specified, or the values to insert if `${default}` is present in `forcedInclude`.
    "C_Cpp.default.forcedInclude": [],
  
    // The value to use in a configuration if `includePath` is not specified in `c_cpp_properties.json`. If `includePath` is specified, add `${default}` to the array to insert the values from this setting. Usually, this should not include system includes; instead, set `C_Cpp.default.compilerPath`.
    "C_Cpp.default.includePath": [],
  
    // The value to use in a configuration if `intelliSenseMode` is either not specified or set to `${default}`.
    "C_Cpp.default.intelliSenseMode": "",
  
    // The value to use in a configuration if `macFrameworkPath` is not specified, or the values to insert if `${default}` is present in `macFrameworkPath`.
    "C_Cpp.default.macFrameworkPath": [],
  
    // Set to `true` to merge include paths, defines, and forced includes with those from a configuration provider.
    "C_Cpp.default.mergeConfigurations": false,
  
    // The value to use for the system include path. If set, it overrides the system include path acquired via `compilerPath` and `compileCommands` settings.
    "C_Cpp.default.systemIncludePath": [],
  
    // Version of the Windows SDK include path to use on Windows, e.g. `10.0.17134.0`.
    "C_Cpp.default.windowsSdkVersion": "",
  
    // Controls whether inactive preprocessor blocks are colored differently than active code. This setting has no effect if IntelliSense is disabled or if using the Default High Contrast theme.
    "C_Cpp.dimInactiveRegions": true,
  
    // If enabled, code is colorized based on IntelliSense. This setting only applies if `C_Cpp.intelliSenseEngine` is set to `Default`.
    "C_Cpp.enhancedColorization": "Enabled",
  
    // Controls whether suspected compile errors detected by the IntelliSense engine will be reported back to the editor. This setting is ignored by the Tag Parser engine.
    "C_Cpp.errorSquiggles": "EnabledIfIncludesResolve",
  
    // Instructs the extension when to use the `files.exclude#` (and `#C_Cpp.files.exclude#`) setting when determining which files should be added to the code navigation database while traversing through the paths in the `browse.path` array. If your `#files.exclude` setting only contains folders, then `checkFolders` is the best choice and will increase the speed at which the extension can initialize the code navigation database.
    //  - checkFolders: The exclusion filters will only be evaluated once per folder (individual files are not checked).
    //  - checkFilesAndFolders: The exclusion filters will be evaluated against every file and folder encountered.
    "C_Cpp.exclusionPolicy": "checkFolders",
  
    // Controls whether "experimental" features are usable.
    "C_Cpp.experimentalFeatures": "Disabled",
  
    // Configure glob patterns for excluding folders (and files if `C_Cpp.exclusionPolicy#` is changed). These are specific to the C/C++ extension and are in addition to `#files.exclude#`, but unlike `#files.exclude` they are not removed from the Explorer view. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
    "C_Cpp.files.exclude": {
      "**/.vscode": true
    },
  
    // Configures the formatting engine
    //  - clangFormat: `clang-format` will be used to format code.
    //  - vcFormat: The Visual C++ formatting engine will be used to format code.
    //  - Default: By default, `clang-format` will be used to format the code. However, the Visual C++ formatting engine will be used if an `.editorconfig` file with relevant settings is found nearer to the code being formatted and `C_Cpp.clang_format_style` is the default value: `file`.
    //  - Disabled: Code formatting will be disabled.
    "C_Cpp.formatting": "Default",
  
    // Controls the background coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to transparent. This setting only applies when inactive region dimming is enabled.
    "C_Cpp.inactiveRegionBackgroundColor": "",
  
    // Controls the font coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to the syntax coloring scheme of the editor. This setting only applies when inactive region dimming is enabled.
    "C_Cpp.inactiveRegionForegroundColor": "",
  
    // Controls the opacity of inactive preprocessor blocks. Scales between `0.1` and `1.0`. This setting only applies when inactive region dimming is enabled.
    "C_Cpp.inactiveRegionOpacity": 0.55,
  
    // Defines the folder path for cached precompiled headers used by IntelliSense. The default cache path is `%LocalAppData%/Microsoft/vscode-cpptools` on Windows, `$XDG_CACHE_HOME/vscode-cpptools/` on Linux (or `$HOME/.cache/vscode-cpptools/` if `XDG_CACHE_HOME` is not defined), and `$HOME/Library/Caches/vscode-cpptools/` on macOS. The default path will be used if no path is specified or if a specified path is invalid.
    "C_Cpp.intelliSenseCachePath": "",
  
    // Maximum size of the per-workspace hard drive space in megabytes (MB) for cached precompiled headers; the actual usage may fluctuate around this value. The default size is `5120` MB. Precompiled header caching is disabled when the size is `0`.
    "C_Cpp.intelliSenseCacheSize": 5120,
  
    // Controls the IntelliSense provider.
    //  - Default: Provides context-aware results via a separate IntelliSense process.
    //  - Tag Parser: Provides "fuzzy" results that are not context-aware.
    //  - Disabled: Turns off C/C++ language service features.
    "C_Cpp.intelliSenseEngine": "Default",
  
    // Controls whether the IntelliSense engine will automatically switch to the Tag Parser for translation units containing `#include` errors.
    "C_Cpp.intelliSenseEngineFallback": "Disabled",
  
    // Memory usage limit in megabytes (MB) of an IntelliSense process. The default is `4096` and the maximum is `16384`. The extension will shutdown and restart an IntelliSense process when it exceeds the limit.
    "C_Cpp.intelliSenseMemoryLimit": 4096,
  
    // The verbosity of logging in the Output Panel. The order of levels from least verbose to most verbose is: `None` < `Error` < `Warning` < `Information` < `Debug`.
    "C_Cpp.loggingLevel": "Error",
  
    // The character used as a path separator for `#include` auto-completion results.
    "C_Cpp.preferredPathSeparator": "Forward Slash",
  
    // If `true`, snippets are provided by the language server.
    "C_Cpp.suggestSnippets": true,
  
    // Access specifiers are indented relative to class or struct definitions by the amount specified in the `editor.tabSize` setting.
    "C_Cpp.vcFormat.indent.accessSpecifiers": false,
  
    // Braces are indented by the amount specified in the `editor.tabSize` setting.
    "C_Cpp.vcFormat.indent.braces": false,
  
    // Code inside a `case` block is indented relative to its label by the amount specified in the `editor.tabSize` setting.
    "C_Cpp.vcFormat.indent.caseContents": true,
  
    // Indent braces following a case statement by the amount specified in the `editor.tabSize` setting.
    "C_Cpp.vcFormat.indent.caseContentsWhenBlock": false,
  
    // Labels are indented relative to switch statements by the amount specified in the `editor.tabSize` setting.
    "C_Cpp.vcFormat.indent.caseLabels": false,
  
    // The position of goto labels.
    //  - oneLeft: Position goto labels to the left of the current code indentation, by the amount specified in the `editor.tabSize` setting.
    //  - leftmostColumn: Position goto labels at the leftmost edge of the code.
    //  - none: Goto labels will not be formatted.
    "C_Cpp.vcFormat.indent.gotoLabels": "oneLeft",
  
    // Indent braces of lambdas used as function parameters relative to the start of the statement by the amount specified in the `editor.tabSize` setting.
    "C_Cpp.vcFormat.indent.lambdaBracesWhenParameter": true,
  
    // Determines what new line indentation is relative to.
    //  - outermostParenthesis: Indent new line relative to the outermost open parenthesis.
    //  - innermostParenthesis: Indent new line relative to the innermost open parenthesis.
    //  - statementBegin: Indent new line relative to the beginning of the current statement.
    "C_Cpp.vcFormat.indent.multiLineRelativeTo": "innermostParenthesis",
  
    // Code is indented relative to its enclosing namespace by the amount specified in the `editor.tabSize` setting.
    "C_Cpp.vcFormat.indent.namespaceContents": true,
  
    // The position of preprocessor directives.
    //  - oneLeft: Preprocessor directives are positioned to the left of the current code indentation, by the amount specified in the `editor.tabSize` setting.
    //  - leftmostColumn: Preprocessor directives are positioned at the leftmost edge of the code.
    //  - none: Preprocessor directives will not be formatted.
    "C_Cpp.vcFormat.indent.preprocessor": "leftmostColumn",
  
    // Indentation of comments is not changed during formatting operations.
    "C_Cpp.vcFormat.indent.preserveComments": false,
  
    // In existing code, preserve the existing indent alignment of new lines within parentheses.
    "C_Cpp.vcFormat.indent.preserveWithinParentheses": false,
  
    // When a new line is typed, it is aligned under the opening parenthesis or based on `C_Cpp.vcFormat.indent.multiLineRelativeTo`.
    //  - alignToParenthesis: New line is aligned under the opening parenthesis.
    //  - indent: New line is indented based on `C_Cpp.vcFormat.indent.multiLineRelativeTo`.
    "C_Cpp.vcFormat.indent.withinParentheses": "indent",
  
    // Place `catch` and similar keywords on a new line.
    "C_Cpp.vcFormat.newLine.beforeCatch": true,
  
    // Place `else` on a new line.
    "C_Cpp.vcFormat.newLine.beforeElse": true,
  
    // The position of opening braces for control blocks.
    //  - newLine: Opening braces are moved to a new line.
    //  - sameLine: Opening braces are kept on the same line and a space is added before each one.
    //  - ignore: Opening braces are not formatted.
    "C_Cpp.vcFormat.newLine.beforeOpenBrace.block": "ignore",
  
    // The position of opening braces for functions.
    //  - newLine: Opening braces are moved to a new line.
    //  - sameLine: Opening braces are kept on the same line and a space is added before each one.
    //  - ignore: Opening braces are not formatted.
    "C_Cpp.vcFormat.newLine.beforeOpenBrace.function": "ignore",
  
    // The position of opening braces for lambda functions.
    //  - newLine: Opening braces are moved to a new line.
    //  - sameLine: Opening braces are kept on the same line and a space is added before each one.
    //  - ignore: Opening braces are not formatted.
    "C_Cpp.vcFormat.newLine.beforeOpenBrace.lambda": "ignore",
  
    // The position of opening braces for namespaces.
    //  - newLine: Opening braces are moved to a new line.
    //  - sameLine: Opening braces are kept on the same line and a space is added before each one.
    //  - ignore: Opening braces are not formatted.
    "C_Cpp.vcFormat.newLine.beforeOpenBrace.namespace": "ignore",
  
    // The position of opening braces for type definitions.
    //  - newLine: Opening braces are moved to a new line.
    //  - sameLine: Opening braces are kept on the same line and a space is added before each one.
    //  - ignore: Opening braces are not formatted.
    "C_Cpp.vcFormat.newLine.beforeOpenBrace.type": "ignore",
  
    // Place `while` in a `do`-`while` loop on a new line.
    "C_Cpp.vcFormat.newLine.beforeWhileInDoWhile": false,
  
    // For empty function bodies, move closing braces to the same line as opening braces.
    "C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyFunction": false,
  
    // For empty types, move closing braces to the same line as opening braces.
    "C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyType": false,
  
    // Place opening and closing braces for scopes on separate lines.
    "C_Cpp.vcFormat.newLine.scopeBracesOnSeparateLines": false,
  
    // A space is added after the closing parenthesis of a C-style cast.
    "C_Cpp.vcFormat.space.afterCastCloseParenthesis": false,
  
    // A space is added after every comma.
    "C_Cpp.vcFormat.space.afterComma": true,
  
    // A space is added between the keyword and opening parenthesis in control flow statements.
    "C_Cpp.vcFormat.space.afterKeywordsInControlFlowStatements": true,
  
    // Spaces around assignment operators.
    //  - insert: A space is added before the operator and also after it.
    //  - remove: Spaces before and after the operator are removed.
    //  - ignore: Spaces are left as entered.
    "C_Cpp.vcFormat.space.aroundAssignmentOperator": "insert",
  
    // Spaces around binary operators.
    //  - insert: A space is added before the operator and also after it.
    //  - remove: Spaces before and after the operator are removed.
    //  - ignore: Spaces are left as entered.
    "C_Cpp.vcFormat.space.aroundBinaryOperator": "insert",
  
    // Spaces around conditional operators.
    //  - insert: A space is added before the operator and also after it.
    //  - remove: Spaces before and after the operator are removed.
    //  - ignore: Spaces are left as entered.
    "C_Cpp.vcFormat.space.aroundTernaryOperator": "insert",
  
    // A space is added before the opening braces of scope blocks.
    "C_Cpp.vcFormat.space.beforeBlockOpenBrace": true,
  
    // A space is added before every comma.
    "C_Cpp.vcFormat.space.beforeComma": false,
  
    // A space is added before the colon in constructor definitions.
    "C_Cpp.vcFormat.space.beforeConstructorColon": true,
  
    // When square brackets are empty, a space is added before the opening bracket.
    "C_Cpp.vcFormat.space.beforeEmptySquareBrackets": false,
  
    // Spacing between function names and opening parentheses of argument lists.
    //  - insert: Add a space before the opening parenthesis of a function.
    //  - remove: Spaces before opening parenthesis of a function are removed.
    //  - ignore: Spaces are left as entered.
    "C_Cpp.vcFormat.space.beforeFunctionOpenParenthesis": "remove",
  
    // A space is added before the colon for inherited types in class definitions.
    "C_Cpp.vcFormat.space.beforeInheritanceColon": true,
  
    // A space is added before the opening brace of uniform initialization and initializer lists.
    "C_Cpp.vcFormat.space.beforeInitializerListOpenBrace": false,
  
    // A space is added before the opening parenthesis of lambda argument lists.
    "C_Cpp.vcFormat.space.beforeLambdaOpenParenthesis": false,
  
    // A space is added before opening square brackets.
    "C_Cpp.vcFormat.space.beforeOpenSquareBracket": false,
  
    // When braces are empty and on the same line, a space is inserted between them.
    "C_Cpp.vcFormat.space.betweenEmptyBraces": false,
  
    // When square brackets are empty, a space is inserted between them.
    "C_Cpp.vcFormat.space.betweenEmptyLambdaBrackets": false,
  
    // When a function parameter list is empty, a space is inserted between its parentheses.
    "C_Cpp.vcFormat.space.betweenEmptyParameterListParentheses": false,
  
    // When square brackets are empty, a space is inserted between them.
    "C_Cpp.vcFormat.space.betweenEmptySquareBrackets": false,
  
    // For multi-dimensional arrays, all space between brackets is removed. Other settings that control space are overridden.
    "C_Cpp.vcFormat.space.groupSquareBrackets": true,
  
    // A space is inserted after every semicolon.
    "C_Cpp.vcFormat.space.insertAfterSemicolon": false,
  
    // Spaces around pointer and reference operators.
    //  - left: Pointer and reference operators are aligned to the left.
    //  - center: Pointer and reference operators are centered.
    //  - right: Pointer and reference operators are aligned to the right.
    //  - ignore: Pointer and reference operators are not formatted.
    "C_Cpp.vcFormat.space.pointerReferenceAlignment": "left",
  
    // Spaces around commas are preserved inside uniform initialization and initializer lists.
    "C_Cpp.vcFormat.space.preserveInInitializerList": true,
  
    // Spaces around member access operators, pointer-to-member operators, and scope resolution operators are removed.
    "C_Cpp.vcFormat.space.removeAroundMemberOperators": true,
  
    // Spaces between unary operators and operands are removed.
    "C_Cpp.vcFormat.space.removeAroundUnaryOperator": true,
  
    // Spaces are removed before every semicolon.
    "C_Cpp.vcFormat.space.removeBeforeSemicolon": true,
  
    // A space is added after the opening parenthesis and also before the closing parenthesis of a C-style cast.
    "C_Cpp.vcFormat.space.withinCastParentheses": false,
  
    // A space is added after the opening parenthesis and also before the closing parenthesis in control flow statements.
    "C_Cpp.vcFormat.space.withinControlFlowStatementParentheses": false,
  
    // A space is added after the opening parenthesis and also before the closing parenthesis of a parenthesized expression.
    "C_Cpp.vcFormat.space.withinExpressionParentheses": false,
  
    // A space is added after the opening brace and also before the closing brace of uniform initialization and initializer lists.
    "C_Cpp.vcFormat.space.withinInitializerListBraces": true,
  
    // A space is added after the opening square bracket and also before the closing square bracket.
    "C_Cpp.vcFormat.space.withinLambdaBrackets": false,
  
    // A space is added after the opening parenthesis and also before the closing parenthesis in function parameter lists.
    "C_Cpp.vcFormat.space.withinParameterListParentheses": false,
  
    // A space is added after the opening square bracket and also before the closing square bracket.
    "C_Cpp.vcFormat.space.withinSquareBrackets": false,
  
    // Wrapping options for blocks.
    //  - oneLiners: A complete code block that is entered on one line is kept on one line, regardless of the values of any of the `C_Cpp.vcFormat.newLine.*` settings.
    //  - allOneLineScopes: Any code where the opening and closing brace is entered on one line is kept on one line, regardless of the values of any of the `C_Cpp.vcFormat.newLine.*` settings.
    //  - never: Code blocks are always formatted based on the values of the `C_Cpp.vcFormat.newLine.*` settings.
    "C_Cpp.vcFormat.wrap.preserveBlocks": "oneLiners",
  
    // Enable integration services for the [vcpkg dependency manager](https://aka.ms/vcpkg/).
    "C_Cpp.vcpkg.enabled": true,
  
    // Controls whether parsing of the non-active workspace files uses sleeps to avoid using 100% CPU. The values `highest`/`high`/`medium`/`low` correspond to approximately 100/75/50/25% CPU usage.
    "C_Cpp.workspaceParsingPriority": "highest",
  
    // The symbols to include in the query results when 'Go to Symbol in Workspace' is invoked.
    "C_Cpp.workspaceSymbols": "Just My Code"
  
  },
  {
    // Select an icon pack that enables specific icons.
    //  - angular: Icons for Angular.
    //  - angular_ngrx: Icons for Angular and ngrx.
    //  - react: Icons for React.
    //  - react_redux: Icons for React and Redux.
    //  - vue: Icons for Vue.
    //  - vue_vuex: Icons for Vue and Vuex.
    //  - nest: Icons for NestJS.
    //  - none: No icon pack enabled.
    "material-icon-theme.activeIconPack": "angular",
  
    // Set custom file icon associations.
    "material-icon-theme.files.associations": {},
  
    // Set custom folder icon associations.
    "material-icon-theme.folders.associations": {},
  
    // Change the color of the folder icons.
    "material-icon-theme.folders.color": "#90a4ae",
  
    // Set the type for the folder icons.
    //  - specific: Select specific folder icons.
    //  - classic: Select classic folder icons.
    //  - none: No folder icons.
    "material-icon-theme.folders.theme": "specific",
  
    // Hide explorer arrows before folder.
    "material-icon-theme.hidesExplorerArrows": false,
  
    // Set custom language icon associations.
    "material-icon-theme.languages.associations": {},
  
    // Change the opacity of the icons.
    "material-icon-theme.opacity": 1,
  
    // Change the saturation of the icons.
    "material-icon-theme.saturation": 1,
  
    // Show restart notification.
    "material-icon-theme.showReloadMessage": true,
  
    // Show the update message after each update.
    "material-icon-theme.showUpdateMessage": false,
  
    // Show the welcome message after first installation.
    "material-icon-theme.showWelcomeMessage": true
  
  },
  {
    // Automatically add vendor prefixes to unsupported CSS properties (e. g. transform -> -ms-transform). Specify what browsers to target with an array of strings (uses [Browserslist](https://github.com/ai/browserslist)). Pass `null` to turn off. 
    // Default is `null`
    "liveSassCompile.settings.autoprefix": [
      "> 1%",
      "last 2 versions"
    ],
  
    // All Sass/Scss files inside the folders will be excluded. 
    // 
    // Examples: 
    // '**/node_modules/**',
    // '.vscode/**', 
    // '.history/**' 
    // 
    // Glob Patterns are accepted.
    "liveSassCompile.settings.excludeList": [
      "**/node_modules/**",
      ".vscode/**"
    ],
  
    // Set your exported CSS Styles, Formats & save location.
    "liveSassCompile.settings.formats": [
      {
        "format": "expanded",
        "extensionName": ".css",
        "savePath": null
      }
    ],
  
    // Set it as `false` if you don't want `.map` file for compiled CSS. 
    // Default is `true`
    "liveSassCompile.settings.generateMap": true,
  
    // This setting is useful when you deals with only few of sass files. Only mentioned Sass files will be included. 
    // NOTE: No need to include partial sass files.
    "liveSassCompile.settings.includeItems": null,
  
    // Set this to `false` if you do not want the output window to show.
    // Note: You can use the command palette to open the Live Sass output window.
    // Default is `true`
    "liveSassCompile.settings.showOutputWindow": true
  
  },
  {
    // Note: If it is not Null, It will override CustomBrowser and ChromeDebuggingAttachment settings.
    // 
    //  Examples : 
    // chrome --incognito --headless --remote-debugging-port=9222 
    //  C:\\Program Files\\Firefox Developer Edition\\firefox.exe --private-window
    "liveServer.settings.AdvanceCustomBrowserCmdLine": null,
  
    // Enable Chrome Debugging Attachment to Live Server at Debuging Port 9222.
    //  NOTE: You have to install 'Debugger for Chrome' 
    // If the value is true, Select 'Attach to Chrome' from Debug Window to start debugging. 
    // 
    //  CAUTION: If it is true, 'Launch Chrome against localhost' may not work.
    "liveServer.settings.ChromeDebuggingAttachment": false,
  
    // Specify custom browser settings for Live Server. 
    // By Default it will open your default favorite browser.
    "liveServer.settings.CustomBrowser": null,
  
    // To disable information pop up messages.
    "liveServer.settings.donotShowInfoMsg": false,
  
    // To turn off prompt warning message if body or head or other supporting tag is missing in your HTML.
    "liveServer.settings.donotVerifyTags": false,
  
    // When set, serve this file (server root relative) for every 404 (useful for single-page applications)
    "liveServer.settings.file": "",
  
    // By Default Live Server inject CSS changes without full reloading of browser. You can change this behviour by making this setting as `true`
    "liveServer.settings.fullReload": false,
  
    // To switch between localhost or 127.0.0.1 or anything else. Default is 127.0.0.1
    "liveServer.settings.host": "127.0.0.1",
  
    // Setup https configuration
    "liveServer.settings.https": {
      "enable": false,
      "cert": "",
      "key": "",
      "passphrase": ""
    },
  
    // To ignore specific file changes
    "liveServer.settings.ignoreFiles": [
      ".vscode/**",
      "**/*.scss",
      "**/*.sass",
      "**/*.ts"
    ],
  
    // Mount a directory to a route. Such as [['/components', './node_modules']]
    "liveServer.settings.mount": [],
  
    // This the entry point of server when you're in multiroot workspace
    "liveServer.settings.multiRootWorkspaceName": null,
  
    // If it is true live server will start without browser opened.
    "liveServer.settings.NoBrowser": false,
  
    // Set Custom Port Number of Live Server. Set 0 if you want random port.
    "liveServer.settings.port": 5500,
  
    // To Setup Proxy
    "liveServer.settings.proxy": {
      "enable": false,
      "baseUri": "/",
      "proxyUri": "http://127.0.0.1:80"
    },
  
    // Set Custom root of Live Server. 
    // To change root the the server to sub folder of workspace, use '/' and relative path from workspace. 
    // Example: /subfolder1/subfolder2
    "liveServer.settings.root": "/",
  
    // Change this to false if you don't want the button to show in the statusbar
    "liveServer.settings.showOnStatusbar": true,
  
    // Open in Browser Preview inside VS Code, instead of default browser
    "liveServer.settings.useBrowserPreview": false,
  
    // Use local IP as host
    "liveServer.settings.useLocalIp": false,
  
    // You have to install a browser extension. That will be works for your dynamic pages (like PHP).
    "liveServer.settings.useWebExt": false,
  
    // Delay before live reloading. Value in milliseconds. Default is 100
    "liveServer.settings.wait": 100
  
  },
  {
    // Set the brightness value for the glow effect. 0.0 is fully transparent and 1.0 is fully bright
    "synthwave84.brightness": 0.45,
  
    // Disable the glow effect, but show Synthwave '84 editor chrome updates
    "synthwave84.disableGlow": false
  
  },
  {
    // The linter to use
    "python.linter": "pyLint",
  
    // Controls the maximum number of problems produced by the server.
    "python.maxNumberOfProblems": 100
  
  },
  {
    // 
    "vsintellicode.features.python.deepLearning": "default",
  
    // Enable Visual Studio IntelliCode completions for Java
    "vsintellicode.java.completionsEnabled": true,
  
    // Specifies the folder path where downloaded model files are stored. Defaults to the extension install directory if not specified.
    "vsintellicode.modelDownloadPath": null,
  
    // Control whether Visual Studio IntelliCode will modify `editor.suggestSelection` if it is set to a value (`recentlyUsed`) that will result in IntelliCode suggested completion items not being visible.
    //  - enabled: Allows IntelliCode to modify the editor.suggestSelection setting on your behalf.
    //  - disabled: You've explicitly opted out of having this configuration controlled by IntelliCode.
    //  - automaticallyOverrodeDefaultValue: (DO NOT SET THIS MANUALLY) IntelliCode will set this to record that configuration has been automatically modified to override a default value.
    //  - choseToUpdateConfiguration: (DO NOT SET THIS MANUALLY) IntelliCode will set this to record that you've chosen to let IntelliCode change the configuration from a value that was explicitly set.
    "vsintellicode.modify.editor.suggestSelection": "enabled",
  
    // Enable Visual Studio IntelliCode completions for Python
    "vsintellicode.python.completionsEnabled": true,
  
    // Enable Visual Studio IntelliCode completions for MSSQL
    "vsintellicode.sql.completionsEnabled": true,
  
    // Enable Visual Studio IntelliCode completions for TypeScript and JavaScript
    "vsintellicode.typescript.completionsEnabled": true
  
  },
  {
    // This setting will let you change the default file icon for dark themes.
    "vsicons.associations.fileDefault.file": null,
  
    // This setting will let you change the default file icon for light themes.
    "vsicons.associations.fileDefault.file_light": null,
  
    // These custom associations will override the file icon associations defined by default.
    "vsicons.associations.files": [],
  
    // This setting will let you change the default folder icon for dark themes.
    "vsicons.associations.folderDefault.folder": null,
  
    // This setting will let you change the default folder icon for light themes.
    "vsicons.associations.folderDefault.folder_light": null,
  
    // This setting will let you change the default root folder icon for dark themes.
    "vsicons.associations.folderDefault.root_folder": null,
  
    // This setting will let you change the default root folder icon for light themes.
    "vsicons.associations.folderDefault.root_folder_light": null,
  
    // These custom associations will override the folder icon associations defined by default.
    "vsicons.associations.folders": [],
  
    // The physical path to the parent folder where the custom icons folder resides on your local machine.
    "vsicons.customIconFolderPath": "",
  
    // If set to 'true', when manually changing the configurations, the 'restart' message won't be shown.
    "vsicons.dontShowConfigManuallyChangedMessage": false,
  
    // If set to 'true', the new version message won't be shown anymore.
    "vsicons.dontShowNewVersionMessage": false,
  
    // If set to 'true', the extension will match some of the common Angular patterns.
    "vsicons.presets.angular": false,
  
    // If set to 'true', all folders will have the default folder icon.
    "vsicons.presets.foldersAllDefaultIcon": false,
  
    // If set to 'true', the extension will hide the folder arrows in the 'Explorer'.
    "vsicons.presets.hideExplorerArrows": false,
  
    // If set to 'true', all folders will be hidden.
    "vsicons.presets.hideFolders": false,
  
    // If set to 'true', the extension will use the official JS icon.
    "vsicons.presets.jsOfficial": false,
  
    // If set to 'true', the extension will use the official JSON icon.
    "vsicons.presets.jsonOfficial": false,
  
    // If set to 'true', the extension will match some of the common NestJS patterns.
    "vsicons.presets.nestjs": false,
  
    // If set to 'true', the extension will use the official TS icon.
    "vsicons.presets.tsOfficial": false,
  
    // If set to 'true', the extension will restart automatically on project detection.
    "vsicons.projectDetection.autoReload": false,
  
    // If set to 'true', the extension will disable the project detection.
    "vsicons.projectDetection.disableDetect": false
  
  },
  {
    // A path to a file, or an object containing the configuration options for js-beautify, if the .jsbeautifyrc file exists in project root, it overrides this configuration.
    "compile-hero.config": null,
  
    // Disable compile files on did save code.
    "compile-hero.disable-compile-files-on-did-save-code": true,
  
    // Enable to generate minified css (*.min.css) files.
    "compile-hero.generate-minified-css": false,
  
    // Enable to generate only minified css (*.min.css) files.
    "compile-hero.generate-minified-css-only": false,
  
    // Enable to generate minified html (*.min.html) files.
    "compile-hero.generate-minified-html": false,
  
    // Enable to generate only minified html (*.min.html) files.
    "compile-hero.generate-minified-html-only": false,
  
    // Enable to generate minified javascript (*.dev.js) files.
    "compile-hero.generate-minified-javascript": false,
  
    // Enable to generate only minified javascript (*.dev.js) files.
    "compile-hero.generate-minified-javascript-only": false,
  
    // List of paths to ignore when using format or compile command, including format or compile on save, uses glob pattern matching.
    "compile-hero.ignore": [],
  
    // Set the directory to output after compiling jade.
    "compile-hero.jade-output-directory": "./dist",
  
    // Switch to control the compilation of jade.
    "compile-hero.jade-output-toggle": true,
  
    // Set the directory to output after compiling javascript.
    "compile-hero.javascript-output-directory": "./dist",
  
    // Switch to control the compilation of javascript.
    "compile-hero.javascript-output-toggle": true,
  
    // Link file types to the beautifier type.
    "compile-hero.language": {
      "js": {
        "type": [
          "javascript",
          "json",
          "jsonc"
        ],
        "filename": [
          ".jshintrc",
          ".jsbeautifyrc"
        ]
      },
      "css": [
        "css",
        "less",
        "scss"
      ],
      "html": [
        "htm",
        "html"
      ]
    },
  
    // Set the directory to output after compiling less.
    "compile-hero.less-output-directory": "./dist",
  
    // Switch to control the compilation of less.
    "compile-hero.less-output-toggle": true,
  
    // Switch to control the notification.
    "compile-hero.notification-toggle": true,
  
    // Set the directory to output after compiling pug.
    "compile-hero.pug-output-directory": "./dist",
  
    // Switch to control the compilation of pug.
    "compile-hero.pug-output-toggle": true,
  
    // Set the directory to output after compiling sass.
    "compile-hero.sass-output-directory": "./dist",
  
    // Switch to control the compilation of sass.
    "compile-hero.sass-output-toggle": true,
  
    // Set the directory to output after compiling sass.
    "compile-hero.scss-output-directory": "./dist",
  
    // Switch to control the compilation of sass.
    "compile-hero.scss-output-toggle": true,
  
    // Set the directory to output after compiling stylus.
    "compile-hero.stylus-output-directory": "./dist",
  
    // Switch to control the compilation of stylus.
    "compile-hero.stylus-output-toggle": true,
  
    // Set the directory to output after compiling typescript.
    "compile-hero.typescript-output-directory": "./dist",
  
    // Switch to control the compilation of typescript.
    "compile-hero.typescript-output-toggle": true,
  
    // Set the directory to output after compiling typescriptx.
    "compile-hero.typescriptx-output-directory": "./dist",
  
    // Switch to control the compilation of typescriptx.
    "compile-hero.typescriptx-output-toggle": true,
  
    // List of paths to watch when using format or compile command, including format or compile on save, uses glob pattern matching.
    "compile-hero.watch": []
  
  }]